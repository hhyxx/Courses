------------------------------------------
-- Export file for user TBDW            --
-- Created by jj on 2013/8/23, 17:39:40 --
------------------------------------------

spool tbdw_pkg.log

prompt
prompt Creating package DW_COMMON_UTILS_ETL
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE TBDW.DW_COMMON_UTILS_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_REGION_ETL
  Description:
      This program provided common utils for DW.

  History:
       1.00  2010-07-28  Tsingtao Technology  Creation
  ==================================================*/

--
  /*==================================================
  Procedure Name :
      purge_customer_data
  Description:
      This procedure used to purge customer deminsion data.

  History:
       1.00  2010-07-28  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE purge_customer_data;
--
  /*==================================================
  Procedure Name :
      purge_region_data
  Description:
      This procedure used to purge region deminsion data.

  History:
       1.00  2010-07-28  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE purge_region_data;
--
  /*==================================================
  Procedure Name :
      process_product_level
  Description:
      This procedure make the center detail series to merge product and product level.
          
  History: 
       1.00  2010-01-27  Hand Consultant  Creation
  ==================================================*/
  PROCEDURE process_product_level;
--
  /*==================================================
  Procedure Name :
      process_dim_data
  Description:
      This procedure is the main entry for dimension data.

  History:
       1.00  2010-07-28  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE process_dim_data;
--
  /*==================================================
  Procedure Name :
      refresh_mv
  Description:
      This procedure used to refresh mv.

  History:
       1.00  2010-07-31  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE refresh_mv;
--
  /*==================================================
  Procedure Name :
      refresh_dayrpt
  Description:
      This procedure used to synchronize day report data.

  History:
       1.00  2010-08-25  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE refresh_dayrpt;
--
END DW_COMMON_UTILS_ETL;
/

prompt
prompt Creating package DW_DAY_SALE_ETL
prompt ================================
prompt
create or replace package tbdw.DW_DAY_SALE_ETL is
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_DAY_SALE_ETL
  Description:
      This program provide util function for process dimension level to be uniform.
  
  History:
      1.10  2010-01-27  Hand Consultant    Creation
  ==================================================*/
  --
  FUNCTION get_first_day(p_day_id IN NUMBER, p_type IN VARCHAR2)
    RETURN NUMBER;
  --
  FUNCTION get_last_year_day(p_day_id IN NUMBER) RETURN NUMBER;
  --
  FUNCTION get_month_of_day(p_day_id IN NUMBER) RETURN NUMBER;
  --
  /*==================================================
  Procedure Name :
      get_to_day_qty
  Description:
      This function return MTD or YTD quantity.
  
  History:
       1.00  2010-01-27  Hand Consultant  Creation
  ==================================================*/
  FUNCTION get_to_day_qty(p_day_id            IN NUMBER,
                          p_brand_category_id IN NUMBER,
                          p_region_id         IN NUMBER,
                          p_type              IN VARCHAR2) RETURN NUMBER;
  --
  /*==================================================
  Procedure Name :
      process_product_level
  Description:
      This procedure make the center detail series to merge product and product level.
  
  History:
       1.00  2010-01-27  Hand Consultant  Creation
  ==================================================*/
  FUNCTION get_month_qty(p_region_id         IN NUMBER,
                         p_brand_category_id IN NUMBER,
                         p_month_id          IN NUMBER) RETURN NUMBER;
  --
  FUNCTION get_month_budget_qty(p_region_id         IN NUMBER,
                                p_brand_category_id IN NUMBER,
                                p_month_id          IN NUMBER) RETURN NUMBER;
  --                          
  FUNCTION get_year_budget_qty(p_region_id         IN NUMBER,
                               p_brand_category_id IN NUMBER,
                               p_year_id           IN NUMBER) RETURN NUMBER;
  --                            
  FUNCTION get_year_qty(p_region_id         IN NUMBER,
                        p_brand_category_id IN NUMBER,
                        p_year_id           IN NUMBER) RETURN NUMBER;
  --
  FUNCTION get_last_year_month_qty(p_region_id         IN NUMBER,
                                   p_brand_category_id IN NUMBER,
                                   p_month_id          IN NUMBER)
    RETURN NUMBER;
  --
  /*==================================================
  Procedure Name :
      process_last_year_sale
  Description:
      This procedure calculate last year sale data.
  
  History:
       1.00  2010-01-27  Hand Consultant  Creation
  ==================================================*/
  --PROCEDURE process_last_year_sale(p_year IN NUMBER DEFAULT to_number(to_char(SYSDATE, 'YYYY')));
  --
  FUNCTION get_month_plan_qty(p_region_id         IN NUMBER,
                              p_brand_category_id IN NUMBER,
                              p_month_id          IN NUMBER) RETURN NUMBER;
  --
  FUNCTION get_year_plan_qty(p_region_id         IN NUMBER,
                             p_brand_category_id IN NUMBER,
                             p_year_id           IN NUMBER) RETURN NUMBER;
  --
end DW_DAY_SALE_ETL;
/

prompt
prompt Creating package DW_DM_LOAD_COST_DIM_PKG
prompt ========================================
prompt
create or replace package tbdw.DW_DM_LOAD_COST_DIM_PKG is

  -- Author  : BRUCE
  -- Created : 2011/3/24 10:45:18
  -- Purpose : 同步成本分析的部分维度
  procedure load_cost_dim;
end DW_DM_LOAD_COST_DIM_PKG;
/

prompt
prompt Creating package DW_DM_MEP_ETL_PKG
prompt ==================================
prompt
create or replace package tbdw.DW_DM_MEP_ETL_PKG is

  -- Author  : BRUCE
  -- Created : 2011/8/7 14:45:33
  -- Purpose : 
  PROCEDURE DELETE_MEP_DATA;
end DW_DM_MEP_ETL_PKG;
/

prompt
prompt Creating package DW_DM_SALE_COST_ETL_PKG
prompt ========================================
prompt
create or replace package tbdw.DW_DM_SALE_COST_ETL_PKG is

  -- Author  : BRUCE
  -- Created : 2010/10/7 16:03:31
  -- Purpose : 处理成本分析的数据
  g_entity_code varchar2(240) := '0307';
  /*
  *得到 上年同期期间名称
  */
  function get_sync_period_name(p_period_name varchar2) return varchar2;
  /*
  *处理产量的数据
  */
  function calc_output_data(p_period_name varchar2) return varchar2;
  /*
  *检查物料属性是否完整
  */
  function check_product return varchar2;
  /*
  *处理成本数据
  */
  procedure handle_period_data(p_period_name varchar2);
end DW_DM_SALE_COST_ETL_PKG;
/

prompt
prompt Creating package DW_HFM_CALCULATE_ACCOUNT
prompt =========================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_hfm_calculate_account IS
  fzzb101 NUMBER;
  fzzb102 NUMBER;
  fzzb103 NUMBER;
  fzzb104 NUMBER;
  fzzb105 NUMBER;
  fzzb106 NUMBER;
  fzzb107 NUMBER;
  fzzb108 NUMBER;
  fzzb109 NUMBER;
  fzzb110 NUMBER;
  fzzb111 NUMBER;
  fzzb112 NUMBER;
  fzzb113 NUMBER;
  fzzb114 NUMBER;
  fzzb115 NUMBER;
  fzzb116 NUMBER;
  fzzb117 NUMBER;
  fzzb118 NUMBER;
  fzzb119 NUMBER;
  fzzb120 NUMBER;

  PROCEDURE main(p_year_label IN VARCHAR2, p_period_label IN VARCHAR2);
END dw_hfm_calculate_account;
/

prompt
prompt Creating package DW_HFM_CALCULATE_ALL
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_hfm_calculate_all IS
  PROCEDURE main;

  --按期间计算数据
  Procedure calc_period(p_year varchar2, p_period varchar2);
END dw_hfm_calculate_all;
/

prompt
prompt Creating package DW_HFM_CALCULATE_SCORE
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_hfm_calculate_score IS
  PROCEDURE main(p_year_label IN VARCHAR2, p_period_label IN VARCHAR2);
END dw_hfm_calculate_score;
/

prompt
prompt Creating package DW_HFM_DELETE_DIM_FACT
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_hfm_delete_dim_fact IS
  PROCEDURE main;
END dw_hfm_delete_dim_fact;
/

prompt
prompt Creating package DW_HFM_HANDLE_DATA_PKG
prompt =======================================
prompt
create or replace package tbdw.dw_hfm_handle_data_pkg is

-- Author  : BRUCE
-- Created : 2011/12/28 13:16:21
-- Purpose : 处理HFM的数据

   --处理HFM的实际数据
  procedure handle_data;
end dw_hfm_handle_data_pkg;
/

prompt
prompt Creating package DW_HFM_UTILITY
prompt ===============================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_hfm_utility IS
  display_order NUMBER;
  PROCEDURE calc_account_child(p_parent_id IN NUMBER, p_level IN NUMBER);
  PROCEDURE main;
END dw_hfm_utility;
/

prompt
prompt Creating package DW_HP_METEDATA_PKG
prompt ===================================
prompt
create or replace package tbdw.DW_HP_METEDATA_PKG is

  -- Author  : EPHRAM
  -- Created : 2011-11-09 14:07:45
  -- Purpose : 
  /*
  *说明：处理HP预算系统抽取过来的元数据，转换成分析所需要的维度结构。
  * 
  * BUYER      : 购物单位维
  * DEPARTMENT : 机构维
  * ENTITY     : 实体维
  * JOINT      : 对接维
  * LOGISTIC   : 物流方式维
  * PERIOD     : 期间维
  * SCENARIO   : 场景维
  * SOURCE     : 来源单位维
  */
  -- TBCWYS_PRODUCTR 维表
  PROCEDURE TBCWYS_PRODUCTR_BUYER;
  PROCEDURE TBCWYS_PRODUCTR_DEPARTMENT;
  PROCEDURE TBCWYS_PRODUCTR_ENTITY;
  PROCEDURE TBCWYS_PRODUCTR_JOINT;
  PROCEDURE TBCWYS_PRODUCTR_LOGISTIC;
  PROCEDURE TBCWYS_PRODUCTR_PERIOD;
  PROCEDURE TBCWYS_PRODUCTR_SCENARIO;
  PROCEDURE TBCWYS_PRODUCTR_SOURCE;
  -- TBCWYS_NONPRODU 科目维
  PROCEDURE TBCWYS_NONPRODU_ACCOUNT;
  PROCEDURE TBCWYS_NONPRODU_ACCOUNT_NON;

  -- TBXHYB_CONSUMPT 维度
  PROCEDURE TBXHYB_CONSUMPT_CATEGORY;
  PROCEDURE TBXHYB_CONSUMPT_DEPARTMENT;
  PROCEDURE TBXHYB_CONSUMPT_ENTITY;
  PROCEDURE TBXHYB_CONSUMPT_PACKAGE;

  --处理成本预算的 
  PROCEDURE TBCBYS_COST_ENTITY; --实体维度
  PROCEDURE TBCBYS_COST_DEPARTMENT; --部门维度
  PROCEDURE TBCBYS_COST_MATERIAL; --物料
  PROCEDURE TBCBYS_COST_PACKAGE; --包装维度
  PROCEDURE TBCBYS_EXPENSE_ACCOUNT; --科目维度
  --主程序
  PROCEDURE main;

end DW_HP_METEDATA_PKG;
/

prompt
prompt Creating package DW_HP_TBCBYS_PKG
prompt =================================
prompt
create or replace package tbdw.DW_HP_TBCBYS_PKG is

  -- Author  : BRUCE
  -- Created : 2011/12/2 16:09:45
  -- Purpose : 处理成本相关的数据
  --CONSUME_DIFF  '消耗差异';
  FUNCTION CONSUME_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                        P_A_C_QUANTITY NUMBER, --实际消耗
                        P_A_C_AMOUNT   NUMBER, --实际成本
                        P_S_QUANTITY   NUMBER, --场景产量
                        P_S_C_QUANTITY NUMBER, --场景消耗
                        P_S_C_AMOUNT   NUMBER --场景成本
                        ) RETURN NUMBER;
  --PRICE_DIFF  '价格差异';
  FUNCTION PRICE_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                      P_A_C_QUANTITY NUMBER, --实际消耗
                      P_A_C_AMOUNT   NUMBER, --实际成本
                      P_S_QUANTITY   NUMBER, --场景产量
                      P_S_C_QUANTITY NUMBER, --场景消耗
                      P_S_C_AMOUNT   NUMBER --场景成本
                      ) RETURN NUMBER;
  --QUANTITY_DIFF  '产量差异';
  FUNCTION QUANTITY_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                         P_A_C_QUANTITY NUMBER, --实际消耗
                         P_A_C_AMOUNT   NUMBER, --实际成本
                         P_S_QUANTITY   NUMBER, --场景产量
                         P_S_C_QUANTITY NUMBER, --场景消耗
                         P_S_C_AMOUNT   NUMBER --场景成本
                         ) RETURN NUMBER;
  --OTHER_DIFF  '其它差异';
  FUNCTION OTHER_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                      P_A_C_QUANTITY NUMBER, --实际消耗
                      P_A_C_AMOUNT   NUMBER, --实际成本
                      P_S_QUANTITY   NUMBER, --场景产量
                      P_S_C_QUANTITY NUMBER, --场景消耗
                      P_S_C_AMOUNT   NUMBER --场景成本
                      ) RETURN NUMBER;
  --NOFACTOR_DIFF  '不可比因素';
  FUNCTION NOFACTOR_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                         P_A_C_QUANTITY NUMBER, --实际消耗
                         P_A_C_AMOUNT   NUMBER, --实际成本
                         P_S_QUANTITY   NUMBER, --场景产量
                         P_S_C_QUANTITY NUMBER, --场景消耗
                         P_S_C_AMOUNT   NUMBER --场景成本
                         ) RETURN NUMBER;
  --处理COST实际数据
  PROCEDURE COST_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2);
  --处理COST预算数据
  PROCEDURE COST_B(P_YEAR VARCHAR2);
  --处理COST实际数据
  PROCEDURE EXPENSE_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2);
  --处理COST预算数据
  PROCEDURE EXPENSE_B(P_YEAR VARCHAR2);
end DW_HP_TBCBYS_PKG;
/

prompt
prompt Creating package DW_HP_TBCWYS_PKG
prompt =================================
prompt
create or replace package tbdw.DW_HP_TBCWYS_PKG is

  -- Author  : EPHRAM
  -- Created : 2011-12-07 16:06:30
  -- Purpose : 
  
  /*
  *处理HP预算系统抽取过来的单品盈利数据。
  */  
  
  -- 分别处理单品盈利实际、预算数据，转换导入到FACT_PP_PRODUCT_PROFIT
  -- 实际数按照 年份+月份 处理
  -- 预算数按照 年份 处理
  -- A: 实际数 
  -- B: 预算数
  PROCEDURE DPYL_A(p_year VARCHAR2 , p_period VARCHAR2);  
  PROCEDURE DPYL_B(p_year VARCHAR2);
  --处理费用分析实际数
  PROCEDURE FY_A(p_year VARCHAR2 , p_period VARCHAR2);  
  
  --处理费用分析预算数
  PROCEDURE FY_B(p_year VARCHAR2);  


end DW_HP_TBCWYS_PKG;
/

prompt
prompt Creating package DW_HP_TBXHYB_PKG
prompt =================================
prompt
create or replace package tbdw.DW_HP_TBXHYB_PKG is

  -- Author  : EPHRAM
  -- Created : 2011-12-16 19:37:32
  -- Purpose : 处理消耗月报数据
  
  -- A: 实际数 
  -- B: 预算数
  PROCEDURE BZ_A(p_year VARCHAR2 , p_period VARCHAR2);  
  PROCEDURE BZ_B(p_year VARCHAR2);
  
  PROCEDURE CB_A(p_year VARCHAR2 , p_period VARCHAR2);  
  PROCEDURE CB_B(p_year VARCHAR2);
  
  PROCEDURE DL_A(p_year VARCHAR2 , p_period VARCHAR2);  
  PROCEDURE DL_B(p_year VARCHAR2);
  
  
  --主程序
  PROCEDURE XH_A(p_year VARCHAR2 , p_period VARCHAR2);  
  PROCEDURE XH_B(p_year VARCHAR2);

end DW_HP_TBXHYB_PKG;
/

prompt
prompt Creating package DW_LOAD_BASE_BUDGET_ETL
prompt ========================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_base_budget_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main;

END dw_load_base_budget_etl;
/

prompt
prompt Creating package DW_LOAD_CENTER_BUDGET_ETL
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_center_budget_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-10-27  Carter.wang  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-10-27  Carter.wang  Creation
  ==================================================*/

  PROCEDURE main;

END dw_load_center_budget_etl;
/

prompt
prompt Creating package DW_LOAD_CUSTOM_PROD_ETL
prompt ========================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_custom_prod_etl AS
  PROCEDURE main(p_days NUMBER);
  PROCEDURE get_load_category_series(p_days NUMBER);
  PROCEDURE get_load_pack_grade(p_days NUMBER);
  PROCEDURE get_prod_custom_series(p_days NUMBER);
END dw_load_custom_prod_etl;
/

prompt
prompt Creating package DW_LOAD_CUST_RANGE_ETL
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_cust_range_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_CUST_RANGE_ETL
  Description:
      This program provide util function for fact customer range for ETL.
  
  History:
      1.00  2010-04-20  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact customer range etl.
  
  History:
      1.00  2010-04-20  hand  Creation 
      
  ==================================================*/
  g_month_id      NUMBER;
  TYPE cust_range_rec IS RECORD
    (region_id    NUMBER,
     delivery_qty NUMBER,
     range_code   VARCHAR2(30));
     
  TYPE cust_range_tab IS TABLE OF cust_range_rec INDEX BY BINARY_INTEGER;
  
  l_cust_range cust_range_tab;
  
  PROCEDURE main;
  
  PROCEDURE main_batch(p_month_id_from IN NUMBER,p_month_id_to IN NUMBER);

END dw_load_cust_range_etl;
/

prompt
prompt Creating package DW_LOAD_DELIVERY_ETL
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_delivery_etl IS


 
  /*==================================================
 
  Copyright (C) TsingTao Brewery Co.,Ltd.
 
             AllRights Reserved
 
  ==================================================*/
 
  /*==================================================
 
  Program Name:
 
      DW_LOAD_DELIERY_ETL
 
  Description:
 
      This program provide util function for fact DELIERY for ETL.
 
  
 
  History:
 
      1.00  2009-10-31  Hand Consultant  Creation
 
  ==================================================*/
 
  --
 
  /*==================================================
 
  Procedure Name :
 
      main
 
  Description:
 
      This procedure proceed the fact DELIERY etl.
 
  
 
  History:
 
      1.00  2009-10-31  hand  Creation 
 
      2.00  2010-3-10   parton Updated
 
            修改取订单逻辑，与ERP报表“CUX.营销公司销量统计报表”一致，
 
            主要添加OPM逻辑及加部分限制
 
  ==================================================*/
 
  g_timespan_date DATE :=  -- to_date('2013-03-29', 'yyyy-mm-dd');
 
  SYSDATE - get_time_span('FACT_PROD_DELIERY');
 
  FUNCTION get_rcv_date(p_line_id IN NUMBER, p_organization_id IN NUMBER)
 
    RETURN DATE;
 

 
  FUNCTION get_return_date(p_oe_header_id     IN NUMBER,
 
                           p_oe_order_line_id IN NUMBER,
 
                           p_organization_id  IN NUMBER) RETURN DATE;
 
  FUNCTION get_return_date_xn(p_oe_header_id     IN NUMBER,
 
                              p_oe_order_line_id IN NUMBER,
 
                              p_organization_id  IN NUMBER) RETURN DATE;
 
  FUNCTION get_uom_conversion_rate(p_inventory_item_id NUMBER,
 
                                   p_mfg_org_id        NUMBER,
 
                                   p_to_uom_code       VARCHAR2)
 
    RETURN NUMBER;
 

 
  PROCEDURE purge_deleted_data;
 
 /* 
  *得到销售单位当期的增长率 
  */
 
  function get_increase_rate(p_month_id number, p_region_id number) return number;
 
 
/* 
  *得到销售单位当期的增长率 --YTD
  */
 
  function get_ytd_increase_rate(p_month_id number, p_region_id number) return number;
 
  PROCEDURE main;
 
  
 
  PROCEDURE main_mmt;--created by xieyt 2011-03-30
 
  procedure import_sales_data_b;--created by xieyt 2011-03-30
 
--FUNCTION get_time_span(p_table IN VARCHAR2) RETURN NUMBER;
 
END dw_load_delivery_etl;
/

prompt
prompt Creating package DW_LOAD_DISTRIBUTOR_BUDGE_ETL
prompt ==============================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_distributor_budge_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main;

END dw_load_distributor_budge_etl;
/

prompt
prompt Creating package DW_LOAD_HIGH_ADD_PROD_ETL
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_high_add_prod_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      dw_load_high_add_prod_etl
  Description:
      This program provide high add prod.
           
  History: 
      1.00  2010-07-30  carter.wang  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This program provide high add prod.
          
  History: 
      1.00  2010-07-30  carter.wang  Creation
  ==================================================*/

  PROCEDURE main;

END dw_load_high_add_prod_etl;
/

prompt
prompt Creating package DW_LOAD_NEW_PROD_ETL
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE TBDW.DW_LOAD_NEW_PROD_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_NEW_PROD_ETL
  Description:
      This program provide util function for new product for ETL.


  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed for new product for ETL.

  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE main;
  --
END DW_LOAD_NEW_PROD_ETL;
/

prompt
prompt Creating package DW_LOAD_PROVINCE_BUDGET_ETL
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_province_budget_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-10-27  Carter.wang  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-10-27  Carter.wang  Creation
  ==================================================*/

  PROCEDURE main;

END dw_load_province_budget_etl;
/

prompt
prompt Creating package DW_LOAD_REGION_NEW_ETL
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE TBDW.DW_LOAD_REGION_NEW_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_REGION_ETL
  Description:
      This program provide util function for region dimension for ETL.
      需要确认几点:
      1)是否有新增的销售单位及其简称;
      2)胶东等区域是否已改为片区（已改为片区）;
      3)海外新科（海外直接从系统里导出，新科和工厂自销仍需手工导入）。
  
  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the region dimension etl.
  
  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE MAIN;
  --
  /*==================================================
  Function Name :
      get_region_alt
  Description:
      This function proceed the region dimension etl.
  
  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  FUNCTION GET_REGION_ALT(P_REGION_SRC_ID IN NUMBER) RETURN VARCHAR2;
  --
END DW_LOAD_REGION_NEW_ETL;
/

prompt
prompt Creating package DW_LOAD_SALE_BUDGE_ETL
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE TBDW.dw_load_sale_budge_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main;

END dw_load_sale_budge_etl;
/

prompt
prompt Creating package DW_LOAD_TRADE_LEVEL_ETL
prompt ========================================
prompt
CREATE OR REPLACE PACKAGE TBDW.DW_LOAD_TRADE_LEVEL_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_REGION_ETL
  Description:
      This program provide util function for region dimension for ETL.

  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the region dimension etl.

  History:
       1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE main;
  --
END DW_LOAD_TRADE_LEVEL_ETL;
/

prompt
prompt Creating package DW_NEW_SALE_ETL
prompt ================================
prompt
CREATE OR REPLACE PACKAGE TBDW.DW_NEW_SALE_ETL IS
  G_TIMESPAN NUMBER := 30;
  --??????????????????????????????
  FUNCTION GET_DAY_QTY(P_ZONE_ID          IN NUMBER,
                       P_DETAIL_SERIES_ID IN NUMBER,
                       P_DATE             IN DATE) RETURN NUMBER;
  --????????????

  FUNCTION GET_MONTH_BUDGET_QTY(P_ZONE_ID          IN NUMBER,
                                P_DETAIL_SERIES_ID IN NUMBER,
                                P_DATE             IN DATE) RETURN NUMBER;
  --????????????
  FUNCTION GET_YEAR_BUDGET_QTY(P_ZONE_ID          IN NUMBER,
                               P_DETAIL_SERIES_ID IN NUMBER,
                               P_DATE             IN DATE) RETURN NUMBER;
  FUNCTION GET_MONTH_BUDGET_QTY_NEW(P_BRANCH_ID        IN NUMBER,
                                    P_DETAIL_SERIES_ID IN NUMBER,
                                    P_MONTH_ID         IN NUMBER)
    RETURN NUMBER;
  FUNCTION GET_YEAR_BUDGET_QTY_NEW(P_BRANCH_ID        IN NUMBER,
                                   P_DETAIL_SERIES_ID IN NUMBER,
                                   P_YEAR_ID          IN NUMBER)
    RETURN NUMBER;

  --?????????
  /*PROCEDURE MAIN;*/
  /*==================================================
  Procedure Name :
      get_to_day_qty
  Description:
      This function return MTD or YTD quantity.
  
  History:
       1.00  2010-01-27  Hand Consultant  Creation
  ==================================================*/
  FUNCTION GET_TO_DAY_QTY(P_DAY_ID           IN NUMBER,
                          P_DETAIL_SERIES_ID IN NUMBER,
                          P_BRANCH_ID        IN NUMBER,
                          P_TYPE             IN VARCHAR2) RETURN NUMBER;
  FUNCTION GET_FIRST_DAY(P_DAY_ID IN NUMBER, P_TYPE IN VARCHAR2)
    RETURN NUMBER;
  FUNCTION GET_MONTH_OF_DAY(P_DAY_ID IN NUMBER) RETURN NUMBER;
END DW_NEW_SALE_ETL;
/

prompt
prompt Creating package DW_XXZZ_MTL_ETL
prompt ================================
prompt
CREATE OR REPLACE PACKAGE TBDW.DW_XXZZ_MTL_ETL IS
/*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
/*==================================================
  Program Name:
      dw_xxzz_mtl_etl
  Description:
      This program provide util function for material item dimension for ETL.
           
  History: 
      1.0.0  2009-11-04  Best Help Consultant  Creation
  ==================================================*/
--
/*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the region dimension etl.
          
  History: 
      1.0.0  2009-11-04  BestHelp  Creation
  ==================================================*/
  
  G_Item_Org             Constant  Number := 113; -- Master Item Organization Id
  G_Category_Set         Constant  Number := 1100000081;
  G_Category_Stru        Constant  Number := 51540;
  
  --物料维度处理
  PROCEDURE mtl_dim;
  --供应商维度处理
  Procedure vendor_dim;
  --计算库存天数
  Function Jdays(i_qty      in Number
                ,i_org      in Number
                ,i_cate     in Varchar2
                ,i_month    in number
                )
  RETURN number;
  --是否含制麦车间
  Function JFlag(i_org_id   in number,
                 p_year_id  in number default null
                )
  Return Varchar2
  ;
  --读取用户id
  Function get_UserId(x_user in varchar2
                )
  Return Number;
  
  --安全库存天数统计
  Function JsafeNum(p_org_id    in number
                   ,p_category  in varchar2
                   ,p_month_id  in number
                   ,p_flag      in varchar2
                   ,p_type      in varchar2
                   ,p_days      in number
                   )
  Return Number;

  --读取PYE
  Function Get_PYE(p_org_id         in number
                  ,p_flex_value_id  in number
                  ,p_month_id       in number
                  ,p_ytd            in number
                  )
  Return Number;
  
  --Refresh Category
  Procedure Refresh_Category;
END;
/

prompt
prompt Creating package body DW_COMMON_UTILS_ETL
prompt =========================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.DW_COMMON_UTILS_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_REGION_ETL
  Description:
      This program provided common utils for DW.

  History:
       1.00  2010-07-28  Tsingtao Technology  Creation
  ==================================================*/
--
  PROCEDURE purge_customer_data
  IS
  BEGIN
    -- 1. 删除ERP系统中不存在的客户
    DELETE FROM dim_customer dc
    
   --  WHERE NOT EXISTS (SELECT 1 FROM erps.hz_cust_accounts hca
   WHERE NOT EXISTS (SELECT 1 FROM dwstg.hz_cust_accounts hca
   -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE hca.cust_account_id = dc.customer_src_id);
    
    -- 2. 删除ERP系统中不存在的客户地址
    DELETE FROM dim_customer_site dcs
   --  WHERE NOT EXISTS (SELECT 1 FROM erps.hz_cust_site_uses_all hcsu
   WHERE NOT EXISTS (SELECT 1 FROM dwstg.hz_cust_site_uses_all hcsu
   -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE hcsu.site_use_id = dcs.customer_site_src_id);
  END purge_customer_data;
--
  PROCEDURE purge_region_data
  IS
  BEGIN
    -- 1. 删除不存在的二级区域
    DELETE FROM dim_region_secondary drs
     WHERE drs.secondary_region_id != drs.branch_id
       AND nvl(drs.secondary_region_src_type, 'N') != 'MANUAL'
     --  AND NOT EXISTS (SELECT 1 FROM stgs.cnl_region_sbl_v cr
         AND NOT EXISTS (SELECT 1 FROM dwstg.cnl_region_sbl_all cr
         -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE cr.region_id = drs.secondary_region_src_id)
       AND NOT EXISTS (SELECT 1 FROM dim_customer_site dcs
                        WHERE dcs.secondary_region_id = drs.secondary_region_id);
    
    -- 2. 删除不存在城市大区
    DELETE FROM dim_region_branch drb
     WHERE drb.branch_id != drb.zone_id
       AND nvl(drb.branch_src_type, 'N') != 'MANUAL'
    --   AND NOT EXISTS (SELECT 1 FROM stgs.cnl_region_sbl_v cr
    AND NOT EXISTS (SELECT 1 FROM dwstg.CNL_REGION_SBL_ALL cr
    -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE cr.region_id = drb.branch_src_id)
       AND NOT EXISTS (SELECT 1 FROM dim_customer_site dcs
                        WHERE dcs.branch_id = drb.branch_id);
    
    -- 3. 删除不存在的片区
    DELETE FROM dim_region_zone drz
     WHERE drz.zone_id != drz.region_id
       AND nvl(drz.zone_src_type, 'N') != 'MANUAL'
     --  AND NOT EXISTS (SELECT 1 FROM stgs.cnl_region_sbl_v cr
     AND NOT EXISTS (SELECT 1 FROM dwstg.CNL_REGION_SBL_ALL cr
     -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE cr.region_id = drz.zone_src_id)
       AND NOT EXISTS (SELECT 1 FROM dim_customer_site dcs,
                                     dim_region_branch drb
                        WHERE dcs.branch_id = drb.branch_id
                          AND drb.zone_id = drz.zone_id);
    
    -- 4. 删除不存在的销售单位
    DELETE FROM dim_region_area dra
     WHERE nvl(dra.region_src_type, 'N') != 'MANUAL'
    --   AND NOT EXISTS (SELECT 1 FROM stgs.cnl_region_sbl_v cr
     AND NOT EXISTS (SELECT 1 FROM dwstg.CNL_REGION_SBL_ALL cr
     -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE cr.region_id = dra.region_src_id)
       AND NOT EXISTS (SELECT 1 FROM dim_customer_site dcs
                        WHERE dcs.region_id = dra.region_id);
  END purge_region_data;
--
  /* 目前由于数据只会在中心明细与品种之间存在不齐，所以只将中心明细刷到合并品种及品种。
     将来如果存在更多不齐的度量数据时，请增加相同逻辑。注意品牌大类、品牌系列、中心系列
     由于是值集，可能与品种的source_id (inventory_item_id)可能存在冲突，所以补齐到品种
     和合并品种时，需要将source_id设置为负 */
  PROCEDURE process_product_level
  IS
  BEGIN
    -- 1. 中心明细系列补到合并品种级别
    MERGE INTO dim_prod_merge_product dest
    USING (SELECT detail_series_id,
                  detail_series_name,
                  detail_series_src_id,
                  detail_series_desc,
                  brand_series_id,
                  brand_series_src_id,
                  brand_series_name,
                  brand_series_desc,
                  center_series_id,
                  center_series_src_id,
                  center_series_name,
                  center_series_desc,
                  brand_category_id,
                  brand_category_src_id,
                  brand_category_name,
                  brand_category_desc
             FROM dim_prod_detail_series
            WHERE detail_series_id != 0) src
    ON (dest.merge_product_id = src.detail_series_id)
    WHEN MATCHED THEN UPDATE SET dest.merge_product_name = src.detail_series_name || '_缺省',
                                 dest.merge_product_desc = src.detail_series_desc,
                                 dest.detail_series_id  = src.detail_series_id,
                                 dest.detail_series_src_id = src.detail_series_src_id,
                                 dest.detail_series_name = src.detail_series_name,
                                 dest.detail_series_desc = src.detail_series_desc,
                                 dest.brand_series_id = src.brand_series_id,
                                 dest.brand_series_src_id = src.brand_series_src_id,
                                 dest.brand_series_name = src.brand_series_name, 
                                 dest.brand_series_desc = src.brand_series_desc,
                                 dest.center_series_id = src.center_series_id,
                                 dest.center_series_src_id = src.center_series_src_id,
                                 dest.center_series_name = src.center_series_name,
                                 dest.center_series_desc = src.center_series_desc,
                                 dest.brand_category_id = src.brand_category_id,
                                 dest.brand_category_src_id = src.brand_category_src_id,
                                 dest.brand_category_name = src.brand_category_name,
                                 dest.brand_category_desc = src.brand_category_desc
    WHEN NOT MATCHED THEN INSERT (dest.merge_product_id,
                                  dest.merge_product_src_id,
                                  dest.merge_product_name,
                                  dest.merge_product_desc,
                                  dest.detail_series_id,
                                  dest.detail_series_src_id,
                                  dest.detail_series_name,
                                  dest.detail_series_desc,
                                  dest.brand_series_id,
                                  dest.brand_series_src_id,
                                  dest.brand_series_name,
                                  dest.brand_series_desc,
                                  dest.center_series_id ,
                                  dest.center_series_src_id,
                                  dest.center_series_name,
                                  dest.center_series_desc,
                                  dest.brand_category_id,
                                  dest.brand_category_src_id,
                                  dest.brand_category_name,
                                  dest.brand_category_desc)
                          VALUES (src.detail_series_id,
                                  -src.detail_series_src_id,
                                  src.detail_series_name || '_缺省',
                                  src.detail_series_desc,
                                  src.detail_series_id,
                                  src.detail_series_src_id,
                                  src.detail_series_name,
                                  src.detail_series_desc,
                                  src.brand_series_id,
                                  src.brand_series_src_id,
                                  src.brand_series_name,
                                  src.brand_series_desc,
                                  src.center_series_id ,
                                  src.center_series_src_id,
                                  src.center_series_name,
                                  src.center_series_desc,
                                  src.brand_category_id,
                                  src.brand_category_src_id,
                                  src.brand_category_name,
                                  src.brand_category_desc);
    
    -- 2. 中心明细系列补到品种级别
    MERGE INTO dim_product dest
    USING (SELECT detail_series_id,
                  detail_series_name,
                  detail_series_src_id,
                  detail_series_desc,
                  brand_series_id,
                  brand_series_src_id,
                  brand_series_name,
                  brand_series_desc,
                  center_series_id,
                  center_series_src_id,
                  center_series_name,
                  center_series_desc,
                  brand_category_id,
                  brand_category_src_id,
                  brand_category_name,
                  brand_category_desc
             FROM dim_prod_detail_series
            WHERE detail_series_id != 0) src
    ON (dest.product_id = src.detail_series_id)
    WHEN MATCHED THEN UPDATE SET dest.product_code = src.detail_series_name || '_缺省',
                                 dest.product_desc = src.detail_series_desc,
                                 dest.merge_product_id = src.detail_series_id,
                                 dest.merge_product_src_id = -src.detail_series_src_id,
                                 dest.merge_product_name = src.detail_series_name || '_缺省',
                                 dest.merge_product_desc = src.detail_series_desc,
                                 dest.detail_series_id  = src.detail_series_id,
                                 dest.detail_series_src_id = src.detail_series_src_id,
                                 dest.detail_series_name = src.detail_series_name,
                                 dest.detail_series_desc = src.detail_series_desc,
                                 dest.brand_series_id = src.brand_series_id,
                                 dest.brand_series_src_id = src.brand_series_src_id,
                                 dest.brand_series_name = src.brand_series_name, 
                                 dest.brand_series_desc = src.brand_series_desc,
                                 dest.center_series_id = src.center_series_id,
                                 dest.center_series_src_id = src.center_series_src_id,
                                 dest.center_series_name = src.center_series_name,
                                 dest.center_series_desc = src.center_series_desc,
                                 dest.brand_category_id = src.brand_category_id,
                                 dest.brand_category_src_id = src.brand_category_src_id,
                                 dest.brand_category_name = src.brand_category_name, 
                                 dest.brand_category_desc = src.brand_category_desc
    WHEN NOT MATCHED THEN INSERT (dest.product_id,
                                  dest.product_src_id,
                                  dest.product_code,
                                  dest.product_desc,
                                  dest.merge_product_id,
                                  dest.merge_product_src_id,
                                  dest.merge_product_name,
                                  dest.merge_product_desc,
                                  dest.detail_series_id,
                                  dest.detail_series_src_id,
                                  dest.detail_series_name,
                                  dest.detail_series_desc,
                                  dest.brand_series_id,
                                  dest.brand_series_src_id,
                                  dest.brand_series_name,
                                  dest.brand_series_desc,
                                  center_series_id,
                                  center_series_src_id,
                                  center_series_name,
                                  center_series_desc,
                                  dest.brand_category_id,
                                  dest.brand_category_src_id,
                                  dest.brand_category_name,
                                  dest.brand_category_desc)
                          VALUES (src.detail_series_id,
                                  -src.detail_series_src_id,
                                  src.detail_series_name || '_缺省',
                                  src.detail_series_desc,
                                  src.detail_series_id,
                                  -src.detail_series_src_id,
                                  src.detail_series_name || '_缺省',
                                  src.detail_series_desc,
                                  src.detail_series_id,
                                  src.detail_series_src_id,
                                  src.detail_series_name,
                                  src.detail_series_desc,
                                  src.brand_series_id,
                                  src.brand_series_src_id,
                                  src.brand_series_name,
                                  src.brand_series_desc,
                                  src.center_series_id ,
                                  src.center_series_src_id,
                                  src.center_series_name,
                                  src.center_series_desc,
                                  src.brand_category_id,
                                  src.brand_category_src_id,
                                  src.brand_category_name,
                                  src.brand_category_desc);
  END process_product_level;
--
  PROCEDURE process_dim_data
  IS
  BEGIN
    -- Purging customer data must before region data.
    purge_customer_data;
    
    purge_region_data;
    
    process_product_level;
  END process_dim_data;
--
  PROCEDURE refresh_mv
  IS
  BEGIN
    -- 1. 刷新维表
    -- 1.1 时间维
    dbms_mview.refresh('TBDW.DIM_TIME_MONTH',atomic_refresh => false);
    dbms_mview.refresh('TBDW.DIM_TIME_GL_MONTH',atomic_refresh => false);
    dbms_mview.refresh('TBDW.DIM_TIME_QUARTER',atomic_refresh => false);
    dbms_mview.refresh('TBDW.DIM_TIME_YEAR',atomic_refresh => false);
    dbms_mview.refresh('TBDW.DIM_TIME_WEEK',atomic_refresh => false);
    
    -- 1.2 客户维
    dbms_mview.refresh('TBDW.DIM_CUSTOMER_PRIMARY_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.DIM_CUSTOMER_CUSTOMER_MV',atomic_refresh => false);
    
    -- 1.3 维表组合
    -- 1.3.1有效区域（一年内有销量）
    dbms_mview.refresh('TBDW.UTL_REGION_ACTIVE_MV',atomic_refresh => false);
    -- 1.3.2 公司销售日报维表组合：销售单位、品牌、日,其中品牌为青岛品牌和第二品牌
    dbms_mview.refresh('TBDW.UTL_DAYRPT_DIMENSIONS_MV',atomic_refresh => false);
    -- 1.3.3 公司新品日报维表组合：城市大区、中心明细系列、日
    dbms_mview.refresh('TBDW.UTL_DAYNEWRPT_DIMENSIONS_MV',atomic_refresh => false);
    -- 1.3.4 各销售单位日报维表组合：城市大区、中心系列、日
    dbms_mview.refresh('TBDW.UTL_DAYRPT_REG_DIMENSIONS_MV',atomic_refresh => false);
    -- 1.3.5 公司销售日报维表组合：中心系列分析所用维表
    dbms_mview.refresh('TBDW.UTL_DAYRPT_DIMREGSER_MV',atomic_refresh => false);
    --added by guojuan 2012/2/15
    --begin
    -- 1.3.6 公司销售日报维表组合：品牌系列分析所用维表 销售单位、品牌系列
    dbms_mview.refresh('TBDW.UTL_DAYRPT_REG_BRASER_DIM_MV',atomic_refresh => false);
    -- 1.3.7 各销售单位日报维表组合：城市大区、品牌系列、日
    dbms_mview.refresh('TBDW.UTL_DAYRPT_BRA_DIMENSIONS_MV',atomic_refresh => false);
    --end;
    
    -- 2. 刷新销量聚集事实表
    -- 2.1 销量基础MV (PRODUCT_ID, DAY_ID, SECONDARY_REGION_ID, CUSTOMER_ID)
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_MV',atomic_refresh => false);
    -- 2.2 A类用户月报销量聚集表 (MONTH_ID, CENTER_SERIES_ID, ZONE_ID)
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_GLOBAL_MV',atomic_refresh => false);
    
    -- 2.3 公司销量日报
    -- 2.3.1公司销售日报销量聚集表 (DAY_ID, REGION_ID, BRAND_CATEGORY_ID)，其中品牌为青岛品牌和第二品牌
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_DAY_MV',atomic_refresh => false);
    -- 2.3.2 公司销售日报使用月度及年度数据事实表
    dbms_mview.refresh('TBDW.FACT_PROD_DEL_MONTHLY_MV',atomic_refresh => false);
    -- 2.3.3 公司销售日报聚集表 
    dbms_mview.refresh('TBDW.FACT_DAY_PROD_DELIVERY_MV',atomic_refresh => false);   
    -- 2.3.4公司销售日报中心系列分析 
    dbms_mview.refresh('TBDW.FACT_PROD_DEL_DAY_CENTERS_MV',atomic_refresh => false);
                                                                          
    --added by guojuan 2012/2/22
    --begin
    -- 2.3.5公司销售日报品牌系列分析
    dbms_mview.refresh('TBDW.FACT_PROD_DEL_DAY_BRASER_MV',atomic_refresh => false);
    --end;
    
    
    
    -- 2.4 公司新品日报
    -- 2.4.1 公司新品日报基础销量数据聚集表
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_DAY_NEW_MV',atomic_refresh => false);
    -- 2.4.2 公司新品日报月度及年度数据聚集表
   -- dbms_mview.refresh('TBDW.FACT_PROD_DEL_MONTHLY_NEW_MV');
    -- 2.4.3 公司新品日报聚集表
    dbms_mview.refresh('TBDW.FACT_DAY_NEW_SALE_MV',atomic_refresh => false);
    
    
    -- 2.5 地理区域维度聚集事实表 (DAY_ID, DETAIL_SERIES_ID, CUSTOMER_ID, COUNTY_ID)
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_GEO_MV',atomic_refresh => false);
  
   
    -- 2.6 各销售单位日报数据聚集表  
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_CENT_PROD_DEL_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_BUDGET_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_PROD_LAST_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRANCH_CENT_DEL_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRANCH_PROD_DEL_MV',atomic_refresh => false);
    --added by guojuan 2012/2/16 
    --begin 
    --城市大区、品牌系列销量数据聚合表
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_BRAND_PROD_DEL_MV',atomic_refresh => false);
    --城市大区、品牌系列预算数据聚合表
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_BRAND_BUDGET_MV',atomic_refresh => false);
    --城市大区、品牌系列去年销量数据聚合表
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_BRAND_LAST_DEL_MV',atomic_refresh => false);
    --各销售单位品牌系列分析
    dbms_mview.refresh('TBDW.FACT_DAY_BRANCH_BRASER_DEL_MV',atomic_refresh => false);
    --end;
    
    
    
    -- 2.7. 刷新经销商聚集事实表
    -- 2.7.1 销售单位经销售销量聚集事实表 (MONTH_ID, CENTER_SERIES_ID, CUSTOMER_ID, REGION_ID)
    dbms_mview.refresh('TBDW.FACT_CUST_DELIVERY_REGION_MV',atomic_refresh => false);
    -- 2.7.2 销量区间聚集事实表 (MONTH_ID, RANGE_ID, SECONDARY_REGION_ID)
    dbms_mview.refresh('TBDW.FACT_CUST_SALE_RANGE_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_CUST_SALE_RANGE_REGION_MV',atomic_refresh => false);
    -- 2.7.3 大客户销量聚集事实表 (MONTH_ID, PRIMARY_CUSTOMER_ID, PRODUCT_ID, SECONDARY_REGION_ID)
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_PRIMARY_MV',atomic_refresh => false);
    
    -- F系统经销售出入库分析聚集事实表(已弃用)
    /*dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_BASE_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_BRAN_DAY_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_BRAN_MONTH_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_COUNT_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_REG_DAY_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_REG_MONTH_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_REG_MON_PD_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_REG_MON_P_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_SEC_DAY_MV');
    dbms_mview.refresh('TBDW.FACT_DISTRIBUTOR_SEC_MONTH_MV');
    dbms_mview.refresh('TBDW.FACT_DIS_PROD_COUNT_YEAR_MV');
    dbms_mview.refresh('TBDW.FACT_DIS_SERIES_COUNT_MV');
    dbms_mview.refresh('TBDW.FACT_DIS_SERIES_COUNT_YEAR_MV');*/
    -- 2.8
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_B_MV',atomic_refresh => false);
    -- 2.9 分工厂销量2011-03-30
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_MMT_MV',atomic_refresh => false);
    --3.0 销售单位3个月销量趋势
    dbms_mview.refresh('TBDW.FACT_PROD_QUANTITY_INCREASE_MV',atomic_refresh => false);
  END refresh_mv;
--
  PROCEDURE refresh_dayrpt
  IS
  BEGIN
    --基础数据ETL
    dw_load_delivery_etl.g_timespan_date := SYSDATE - 10/24;
    dw_load_delivery_etl.main;
    
   --基础物化视图数据刷新 
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_GLOBAL_MV',atomic_refresh => false);
    
   --公司销量日报
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_DAY_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_PROD_DEL_MONTHLY_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_PROD_DELIVERY_MV',atomic_refresh => false);      
    dbms_mview.refresh('TBDW.FACT_PROD_DEL_DAY_CENTERS_MV',atomic_refresh => false); 
    
    --各销售单位销量日报                                                                                                                                
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_CENT_PROD_DEL_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_BUDGET_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRA_PROD_LAST_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRANCH_CENT_DEL_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_BRANCH_PROD_DEL_MV',atomic_refresh => false);
    --     
    --dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_B_MV',atomic_refresh => false); --2011-07-14
  
   ---新品日报销量刷新  
    dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_DAY_NEW_MV',atomic_refresh => false);
    dbms_mview.refresh('TBDW.FACT_DAY_NEW_SALE_MV',atomic_refresh => false);
    
    --分工厂销量2011-03-30
   --dbms_mview.refresh('TBDW.FACT_PROD_DELIVERY_MMT_MV',atomic_refresh => false);

  END refresh_dayrpt;
--
END DW_COMMON_UTILS_ETL;
/

prompt
prompt Creating package body DW_DAY_SALE_ETL
prompt =====================================
prompt
create or replace package body tbdw.DW_DAY_SALE_ETL is
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_DAY_SALE_ETL
  Description:
      This program provide util function for process dimension level to be uniform.
  
  History:
      1.10  2010-01-27  Hand Consultant    Creation
  ==================================================*/
  --
  FUNCTION get_first_day(p_day_id IN NUMBER, p_type IN VARCHAR2)
    RETURN NUMBER IS
    l_day_id NUMBER;
  BEGIN
    IF p_type = 'Y' THEN
      l_day_id := round(p_day_id / 10000) * 10000 + 101;
    ELSIF p_type = 'M' THEN
      SELECT MIN(day_id)
        INTO l_day_id
        FROM dim_time dt
       WHERE dt.gl_month_id = get_month_of_day(p_day_id);
    END IF;
  
    RETURN l_day_id;
  END get_first_day;
  --
  FUNCTION get_last_year_day(p_day_id IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN to_number(to_char(add_months(to_date(p_day_id, 'YYYYMMDD'), -12),
                             'YYYYMMDD'));
  END get_last_year_day;
  --
  FUNCTION get_month_of_day(p_day_id IN NUMBER) RETURN NUMBER IS
    l_month_id NUMBER;
  BEGIN
    SELECT gl_month_id
      INTO l_month_id
      FROM dim_time
     WHERE day_id = p_day_id;
  
    RETURN l_month_id;
  END get_month_of_day;
  --
  FUNCTION get_to_day_qty(p_day_id            IN NUMBER,
                          p_brand_category_id IN NUMBER,
                          p_region_id         IN NUMBER,
                          p_type              IN VARCHAR2) RETURN NUMBER IS
    l_today_qty NUMBER;
  BEGIN
    SELECT SUM(fpd.delivery_unit_qty)
      INTO l_today_qty
      FROM fact_prod_delivery_day_mv fpd
     WHERE fpd.brand_category_id = p_brand_category_id
       AND fpd.region_id = p_region_id
       AND fpd.day_id BETWEEN get_first_day(p_day_id, p_type) AND p_day_id;
  
    RETURN l_today_qty;
  END get_to_day_qty;
  --
  FUNCTION get_month_qty(p_region_id         IN NUMBER,
                         p_brand_category_id IN NUMBER,
                         p_month_id          IN NUMBER) RETURN NUMBER IS
    l_month_qty NUMBER;
  BEGIN
    SELECT SUM(fdp.delivery_unit_qty)
      INTO l_month_qty
      FROM fact_prod_delivery_day_mv fdp, dim_time dt
     WHERE fdp.region_id = p_region_id
       AND fdp.brand_category_id = p_brand_category_id
       AND fdp.day_id = dt.day_id
       AND dt.gl_month_id = p_month_id;
  
    RETURN l_month_qty;
  EXCEPTION
    WHEN OTHERS THEN
      l_month_qty := NULL;
      RETURN l_month_qty;
  END;
  --
  FUNCTION get_last_year_month_qty(p_region_id         IN NUMBER,
                                   p_brand_category_id IN NUMBER,
                                   p_month_id          IN NUMBER)
    RETURN NUMBER IS
    l_ly_day_id NUMBER;
  BEGIN
    l_ly_day_id := get_last_year_day(p_month_id * 100 + 1);
  
    RETURN get_month_qty(p_region_id,
                         p_brand_category_id,
                         round(l_ly_day_id / 100));
  END;
  --
  FUNCTION get_month_budget_qty(p_region_id         IN NUMBER,
                                p_brand_category_id IN NUMBER,
                                p_month_id          IN NUMBER) RETURN NUMBER IS
    l_month_budget_qty NUMBER;
  BEGIN
    SELECT SUM(fsb.budget_qty)
      INTO l_month_budget_qty
      FROM fact_sale_budget       fsb,
           dim_region_branch      drb,
           dim_prod_detail_series pds
     WHERE fsb.branch_id = drb.branch_id
       AND fsb.detail_series_id = pds.detail_series_id
       AND decode(pds.brand_category_id, 7, 1, 2) = p_brand_category_id
       AND drb.region_id = p_region_id
       AND fsb.month_id = p_month_id;
  
    RETURN l_month_budget_qty;
  EXCEPTION
    WHEN OTHERS THEN
      l_month_budget_qty := NULL;
      RETURN l_month_budget_qty;
  END;
  --
  FUNCTION get_year_qty(p_region_id         IN NUMBER,
                        p_brand_category_id IN NUMBER,
                        p_year_id           IN NUMBER) RETURN NUMBER IS
    l_year_qty NUMBER;
  BEGIN
    SELECT SUM(fdp.delivery_unit_qty)
      INTO l_year_qty
      FROM fact_prod_delivery_day_mv fdp
     WHERE fdp.region_id = p_region_id
       AND fdp.brand_category_id = p_brand_category_id
       AND fdp.day_id BETWEEN p_year_id * 10000 + 101 AND
           p_year_id * 10000 + 1231;
  
    RETURN l_year_qty;
  END get_year_qty;
  --
  FUNCTION get_year_budget_qty(p_region_id         IN NUMBER,
                               p_brand_category_id IN NUMBER,
                               p_year_id           IN NUMBER) RETURN NUMBER IS
    l_year_budget_qty NUMBER;
  BEGIN
    SELECT SUM(fsb.budget_qty)
      INTO l_year_budget_qty
      FROM fact_sale_budget       fsb,
           dim_region_branch      drb,
           dim_prod_detail_series pds
     WHERE fsb.branch_id = drb.branch_id
       AND fsb.detail_series_id = pds.detail_series_id
       AND decode(pds.brand_category_id, 7, 1, 2) = p_brand_category_id
       AND drb.region_id = p_region_id
       AND fsb.month_id BETWEEN p_year_id * 100 + 1 AND
           p_year_id * 100 + 12;
  
    RETURN l_year_budget_qty;
  
    RETURN l_year_budget_qty;
  EXCEPTION
    WHEN OTHERS THEN
      l_year_budget_qty := NULL;
      RETURN l_year_budget_qty;
  END;
  --
  /*PROCEDURE process_last_year_sale(p_year IN NUMBER DEFAULT to_number(to_char(SYSDATE, 'YYYY')))
  IS
    l_begin_day NUMBER;
    l_end_day   NUMBER;
  BEGIN
    l_begin_day := p_year * 10000 + 101;
    l_end_day := p_year * 10000 + 1231;
  
    -- 1. 删除FACT_LAST_YEAR_DAY_SALE表中去年数据
    DELETE FROM fact_last_year_day_sale WHERE day_id BETWEEN l_begin_day AND l_end_day;
    
    -- 2. 插入销量数据
    INSERT INTO fact_day_prod_delivery
      (day_id,
       brand_category_id,
       region_id,
       day_sale_unit_qty,
       month_unit_qty, --MTD
       last_year_month_unit_qty, -- LY MTD
       month_budget_unit_qty,
       year_budget_unit_qty,
       last_year_unit_qty -- LY YTM
       )
    SELECT dt.day_id,
           brand_category_id,
           dra.region_id,
           get_today_qty(dt.day_id, brand_category_id, dra.region_id, 'M'), -- MTD
           get_month_qty(dra.region_id, brand_category_id, get_last_year_day(dt.day_id)),
           get_today_qty(dt.day_id, brand_category_id, dra.region_id, 'Y')  -- YTD
      FROM dim_region_area dra,
           (SELECT 1 brand_category_id FROM dual UNION SELECT 2 FROM dual) pbc,
           dim_time dt
     WHERE dt.year_id = 2009;
           
    COMMIT;    
  END process_last_year_sale;*/
  --
  FUNCTION get_month_plan_qty(p_region_id         IN NUMBER,
                              p_brand_category_id IN NUMBER,
                              p_month_id          IN NUMBER) RETURN NUMBER IS
    l_month_plan_qty NUMBER;
  BEGIN
    IF p_region_id IN (1964, 2246, 2325, 2528, 2599) THEN
      SELECT SUM(fi.unit_volume * fsp.plan_qty)
        INTO l_month_plan_qty
        FROM fact_sale_plan       fsp,
             dim_region_secondary drs,
             dim_product          dp,
             --    fsms.fnd_item fi,
             dwstg.FND_ITEM fi, -- by dengj@besthelp 20130822 数据中心拆分
             dim_time dt
       WHERE fsp.secondary_region_id = drs.secondary_region_id
         AND fsp.product_id = dp.product_id
         AND dp.product_src_id = fi.item_id
         AND decode(dp.brand_category_id, 7, 1, 2) = p_brand_category_id
         AND drs.region_id = p_region_id
         AND fsp.day_id = dt.day_id
         AND dt.gl_month_id = p_month_id;
    
      RETURN l_month_plan_qty;
    ELSE
      RETURN NULL;
    END IF;
  END get_month_plan_qty;
  --
  FUNCTION get_year_plan_qty(p_region_id         IN NUMBER,
                             p_brand_category_id IN NUMBER,
                             p_year_id           IN NUMBER) RETURN NUMBER IS
    l_year_plan_qty NUMBER;
  BEGIN
    IF p_region_id IN (1964, 2246, 2325, 2528, 2599) THEN
      SELECT SUM(fsp.plan_qty * fi.unit_volume)
        INTO l_year_plan_qty
        FROM fact_sale_plan       fsp,
             dim_region_secondary drs,
             dim_product          dp,
              --    fsms.fnd_item fi,
             dwstg.FND_ITEM fi-- by dengj@besthelp 20130822 数据中心拆分
       WHERE fsp.secondary_region_id = drs.secondary_region_id
         AND fsp.product_id = dp.product_id
         AND dp.product_src_id = fi.item_id
         AND decode(dp.brand_category_id, 7, 1, 2) = p_brand_category_id
         AND drs.region_id = p_region_id
         AND fsp.day_id BETWEEN p_year_id * 10000 + 101 AND
             p_year_id * 10000 + 1231;
    
      RETURN l_year_plan_qty;
    ELSE
      RETURN NULL;
    END IF;
  END get_year_plan_qty;

--
end DW_DAY_SALE_ETL;
/

prompt
prompt Creating package body DW_DM_LOAD_COST_DIM_PKG
prompt =============================================
prompt
create or replace package body tbdw.DW_DM_LOAD_COST_DIM_PKG is
  --维度dim_dm_cost_scenario
  procedure load_cost_scenario is
  begin
    --新增
    insert into dim_dm_cost_scenario
      select alv.display_sequence scenario_order,
             alv.lookup_code      scenario_code,
             alvt.meaning         scenario_name
        from /*dm.afwk_lookup_types     alt,
                           dm.afwk_lookup_values    alv,
                           dm.afwk_lookup_values_tl alvt*/
             dwstg.afwk_lookup_types     alt,
             dwstg.afwk_lookup_values    alv,
             dwstg.afwk_lookup_values_tl alvt
      -- by dengj@besthelp 20130822 数据中心拆分  
       where 1 = 1
         and alvt.language = 'zh_CN'
         and alvt.lookup_value_id = alv.lookup_value_id
         and alv.lookup_id = alt.lookup_id
         and alt.lookup_type = 'BI_COST_SCENARIO'
         and not exists
       (select 1
                from dim_dm_cost_scenario dcs
               where 1 = 1
                 and dcs.scenario_code = alv.lookup_code);
    --更新
    for i in (select alv.display_sequence, alv.lookup_code, alvt.meaning
                from /*dm.afwk_lookup_types     alt,
                                           dm.afwk_lookup_values    alv,
                                           dm.afwk_lookup_values_tl alvt,*/
                     dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt,
                     -- by dengj@besthelp 20130822 数据中心拆分  
                     dim_dm_cost_scenario dcs
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_SCENARIO'
                 and dcs.scenario_code = alv.lookup_code
                 and (dcs.scenario_order <> alv.display_sequence or
                     dcs.scenario_name <> alvt.meaning)) loop
      update dim_dm_cost_scenario dcs
         set dcs.scenario_order = i.display_sequence,
             dcs.scenario_name  = i.meaning
       where 1 = 1
         and dcs.scenario_code = i.lookup_code;
    end loop;
    commit;
  end load_cost_scenario;
  --DIM_DM_COST_BRAND
  procedure load_cost_brand is
  begin
    --新增
    insert into DIM_DM_COST_BRAND
      select 'T' lev0_code,
             '品牌合计' lev0_name,
             alv.tag lev1_code,
             alvt.description lev1_name,
             alv.lookup_code lev2_code,
             alvt.meaning lev2_name
        from /*dm.afwk_lookup_types     alt,
                                         dm.afwk_lookup_values    alv,
                                         dm.afwk_lookup_values_tl alvt*/
             dwstg.afwk_lookup_types     alt,
             dwstg.afwk_lookup_values    alv,
             dwstg.afwk_lookup_values_tl alvt
      -- by dengj@besthelp 20130822 数据中心拆分      
       where 1 = 1
         and alvt.language = 'zh_CN'
         and alvt.lookup_value_id = alv.lookup_value_id
         and alv.lookup_id = alt.lookup_id
         and alt.lookup_type = 'BI_COST_BRAND'
         and not exists
       (select 1
                from DIM_DM_COST_BRAND dcs
               where 1 = 1
                 and dcs.lev2_code = alv.lookup_code);
    --更新
    for i in (select 'T' lev0_code,
                     '品牌合计' lev0_name,
                     alv.tag lev1_code,
                     alvt.description lev1_name,
                     alv.lookup_code lev2_code,
                     alvt.meaning lev2_name
                from /*dm.afwk_lookup_types     alt,
                                           dm.afwk_lookup_values    alv,
                                           dm.afwk_lookup_values_tl alvt,*/
                     dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt,
                     -- by dengj@besthelp 20130822 数据中心拆分  
                     DIM_DM_COST_BRAND dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_BRAND'
                 and dcb.lev2_code = alv.lookup_code
                 and (dcb.lev2_name <> alvt.meaning or
                     dcb.lev1_code <> alv.tag or
                     dcb.lev1_name <> alvt.description)) loop
      update DIM_DM_COST_BRAND dcb
         set dcb.lev1_code = i.lev1_code,
             dcb.lev1_name = i.lev1_name,
             dcb.lev2_name = i.lev2_name
       where 1 = 1
         and dcb.lev2_code = i.lev2_code;
    end loop;
    commit;
  end load_cost_brand;
  --BI_COST_PACK
  procedure load_cost_pack is
  begin
    --新增
    insert into DIM_DM_COST_PACK
      select 'T' lev0_code,
             '产品包装合计' lev0_name,
             alv.tag lev1_code,
             alvt.description lev1_name,
             alv.lookup_code lev2_code,
             alvt.meaning lev2_name
        from /*dm.afwk_lookup_types     alt,
                           dm.afwk_lookup_values    alv,
                           dm.afwk_lookup_values_tl alvt*/
             
             dwstg.afwk_lookup_types     alt,
             dwstg.afwk_lookup_values    alv,
             dwstg.afwk_lookup_values_tl alvt
      -- by dengj@besthelp 20130822 数据中心拆分  
       where 1 = 1
         and alvt.language = 'zh_CN'
         and alvt.lookup_value_id = alv.lookup_value_id
         and alv.lookup_id = alt.lookup_id
         and alt.lookup_type = 'BI_COST_PACK'
         and not exists
       (select 1
                from DIM_DM_COST_PACK dcs
               where 1 = 1
                 and dcs.lev2_code = alv.lookup_code);
    --更新
    for i in (select 'T' lev0_code,
                     '产品包装合计' lev0_name,
                     alv.tag lev1_code,
                     alvt.description lev1_name,
                     alv.lookup_code lev2_code,
                     alvt.meaning lev2_name
                from /*dm.afwk_lookup_types     alt,
                                           dm.afwk_lookup_values    alv,
                                           dm.afwk_lookup_values_tl alvt,*/
                     dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt,
                     -- by dengj@besthelp 20130822 数据中心拆分  
                     DIM_DM_COST_PACK dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_PACK'
                 and dcb.lev2_code = alv.lookup_code
                 and (dcb.lev2_name <> alvt.meaning or
                     dcb.lev1_code <> alv.tag or
                     dcb.lev1_name <> alvt.description)) loop
      update DIM_DM_COST_PACK dcb
         set dcb.lev1_code = i.lev1_code,
             dcb.lev1_name = i.lev1_name,
             dcb.lev2_name = i.lev2_name
       where 1 = 1
         and dcb.lev2_code = i.lev2_code;
    end loop;
    commit;
  end load_cost_pack;
  --DIM_DM_COST_PROJECT_NOLEVEL
  procedure load_cost_project_nolevel is
  begin
    --新增
    insert into DIM_DM_COST_PROJECT_NOLEVEL
      select alv.lookup_code lev_code, alvt.meaning lev_name
        from /*dm.afwk_lookup_types     alt,
             dm.afwk_lookup_values    alv,
             dm.afwk_lookup_values_tl alvt*/
             dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt 
                     -- by dengj@besthelp 20130822 数据中心拆分 
       where 1 = 1
         and alvt.language = 'zh_CN'
         and alvt.lookup_value_id = alv.lookup_value_id
         and alv.lookup_id = alt.lookup_id
         and alt.lookup_type = 'BI_COST_PROJECT'
         and not exists (select 1
                from DIM_DM_COST_PROJECT_NOLEVEL dcs
               where 1 = 1
                 and dcs.lev_code = alv.lookup_code);
    --更新
    for i in (select alv.lookup_code lev_code, alvt.meaning lev_name
                from /*dm.afwk_lookup_types        alt,
                     dm.afwk_lookup_values       alv,
                     dm.afwk_lookup_values_tl    alvt,*/
                       dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt ,
                     -- by dengj@besthelp 20130822 数据中心拆分
                     DIM_DM_COST_PROJECT_NOLEVEL dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_PROJECT'
                 and dcb.lev_code = alv.lookup_code
                 and (dcb.lev_name <> alvt.meaning)) loop
      update DIM_DM_COST_PROJECT_NOLEVEL dcb
         set dcb.lev_name = i.lev_name
       where 1 = 1
         and dcb.lev_code = i.lev_code;
    end loop;
    commit;
  end load_cost_project_nolevel;

  --DIM_DM_COST_PROJECT
  procedure load_cost_project is
  begin
    --新增
    insert into DIM_DM_COST_PROJECT
      select '' lev0_code,
             '' lev0_name,
             '' lev1_code,
             '' lev1_name,
             '' lev2_code,
             '' lev2_name,
             '' lev3_code,
             '' lev3_name,
             '' lev4_code,
             '' lev4_name,
             alv.lookup_code lev5_code,
             alvt.meaning lev5_name
        from /*dm.afwk_lookup_types     alt,
             dm.afwk_lookup_values    alv,
             dm.afwk_lookup_values_tl alvt*/
               dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt 
                     -- by dengj@besthelp 20130822 数据中心拆分
       where 1 = 1
         and alvt.language = 'zh_CN'
         and alvt.lookup_value_id = alv.lookup_value_id
         and alv.lookup_id = alt.lookup_id
         and alt.lookup_type = 'BI_COST_PROJECT'
         and not exists (select 1
                from DIM_DM_COST_PROJECT dcs
               where 1 = 1
                 and dcs.lev5_code = alv.lookup_code)
         and not exists
       (select alv.lookup_code lev5_code, alvt.meaning lev5_name
                from /*dm.afwk_lookup_types     alt1,
                     dm.afwk_lookup_values    alv1,
                     dm.afwk_lookup_values_tl alvt1*/
                       dwstg.afwk_lookup_types     alt1,
                     dwstg.afwk_lookup_values    alv1,
                     dwstg.afwk_lookup_values_tl alvt1 
                     -- by dengj@besthelp 20130822 数据中心拆分
               where 1 = 1
                 and alv1.tag = alv.lookup_code --最底层的项目
                 and alvt1.language = 'zh_CN'
                 and alvt1.lookup_value_id = alv1.lookup_value_id
                 and alv1.lookup_id = alt1.lookup_id
                 and alt1.lookup_type = 'BI_COST_PROJECT');
    --更新 lev4\lev5
    for i in (select alv.tag          lev4_code,
                     alvt.description lev4_name,
                     alv.lookup_code  lev5_code,
                     alvt.meaning     lev5_name
                from /*dm.afwk_lookup_types     alt,
                     dm.afwk_lookup_values    alv,
                     dm.afwk_lookup_values_tl alvt,*/
                       dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt ,
                     -- by dengj@besthelp 20130822 数据中心拆分
                     DIM_DM_COST_PROJECT      dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_PROJECT'
                 and dcb.lev5_code = alv.lookup_code
                 and dcb.lev5_code <> dcb.lev4_code
                 and (dcb.lev5_name <> alvt.meaning or
                     dcb.lev4_code <> alv.tag or
                     dcb.lev4_name <> alvt.description)) loop
      update DIM_DM_COST_PROJECT dcb
         set dcb.lev5_name = i.lev5_name,
             dcb.lev4_code = i.lev4_code,
             dcb.lev4_name = i.lev4_name
       where 1 = 1
         and dcb.lev5_code = i.lev5_code;
    end loop;
    --更新 lev3
    for i in (select distinct alv.tag          lev3_code,
                              alvt.description lev3_name,
                              alv.lookup_code  lev4_code,
                              alvt.meaning     lev4_name
                from /*dm.afwk_lookup_types     alt,
                     dm.afwk_lookup_values    alv,
                     dm.afwk_lookup_values_tl alvt,*/
                       dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt, 
                     -- by dengj@besthelp 20130822 数据中心拆分
                     DIM_DM_COST_PROJECT      dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_PROJECT'
                 and dcb.lev4_code = alv.lookup_code
                 and dcb.lev4_code <> dcb.lev3_code
                 and (dcb.lev3_code <> alv.tag or
                     dcb.lev3_name <> alvt.description)) loop
      update DIM_DM_COST_PROJECT dcb
         set dcb.lev3_code = i.lev3_code, dcb.lev3_name = i.lev3_name
       where 1 = 1
         and dcb.lev4_code = i.lev4_code;
    end loop;
    --更新 lev2
    for i in (select distinct alv.tag          lev2_code,
                              alvt.description lev2_name,
                              alv.lookup_code  lev3_code,
                              alvt.meaning     lev3_name
                from /*dm.afwk_lookup_types     alt,
                     dm.afwk_lookup_values    alv,
                     dm.afwk_lookup_values_tl alvt,*/
                       dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt ,
                     -- by dengj@besthelp 20130822 数据中心拆分
                     DIM_DM_COST_PROJECT      dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_PROJECT'
                 and dcb.lev3_code = alv.lookup_code
                 and dcb.lev3_code <> dcb.lev2_code
                 and (dcb.lev2_code <> alv.tag or
                     dcb.lev2_name <> alvt.description)) loop
      update DIM_DM_COST_PROJECT dcb
         set dcb.lev2_code = i.lev2_code, dcb.lev2_name = i.lev2_name
       where 1 = 1
         and dcb.lev3_code = i.lev3_code;
    end loop;
    --更新 lev1
    for i in (select distinct alv.tag          lev1_code,
                              alvt.description lev1_name,
                              alv.lookup_code  lev2_code,
                              alvt.meaning     lev2_name
                from /*dm.afwk_lookup_types     alt,
                     dm.afwk_lookup_values    alv,
                     dm.afwk_lookup_values_tl alvt,*/
                       dwstg.afwk_lookup_types     alt,
                     dwstg.afwk_lookup_values    alv,
                     dwstg.afwk_lookup_values_tl alvt ,
                     -- by dengj@besthelp 20130822 数据中心拆分
                     DIM_DM_COST_PROJECT      dcb
               where 1 = 1
                 and alvt.language = 'zh_CN'
                 and alvt.lookup_value_id = alv.lookup_value_id
                 and alv.lookup_id = alt.lookup_id
                 and alt.lookup_type = 'BI_COST_PROJECT'
                 and dcb.lev2_code = alv.lookup_code
                 and dcb.lev2_code <> dcb.lev1_code
                 and (dcb.lev1_code <> alv.tag or
                     dcb.lev1_name <> alvt.description)) loop
      update DIM_DM_COST_PROJECT dcb
         set dcb.lev1_code = i.lev1_code, dcb.lev1_name = i.lev1_name
       where 1 = 1
         and dcb.lev2_code = i.lev2_code;
    end loop;
    --更新 lev0
    update DIM_DM_COST_PROJECT dcb
       set dcb.lev0_code = 'T', dcb.lev0_name = '成本要素合计'
     where 1 = 1
       and (dcb.lev0_code is null or dcb.lev0_name is null);
    commit;
  end load_cost_project;
  procedure load_cost_dim is
  begin
    --更新开始
    load_cost_scenario;
    load_cost_brand;
    load_cost_pack;
    load_cost_project_nolevel;
    load_cost_project;
    --更新结束
  end load_cost_dim;
end DW_DM_LOAD_COST_DIM_PKG;
/

prompt
prompt Creating package body DW_DM_MEP_ETL_PKG
prompt =======================================
prompt
create or replace package body tbdw.DW_DM_MEP_ETL_PKG is
  --删除期间数据
  PROCEDURE DELETE_MEP_DATA IS
  BEGIN
    --促销费用
    delete fact_dm_discount_amount fda
     where 1 = 1
       and fda.discount_type = '常规'
       and not exists (select 1
            --  from dm.mep_discount_normal mdn
              from dwstg.MEP_DISCOUNT_NORMAL mdn
            -- by dengj@besthelp 20130822 数据中心拆分
             where 1 = 1
               and mdn.line_id = fda.line_id);
    --
    delete fact_dm_discount_amount fda
     where 1 = 1
       and fda.discount_type = '专项'
       and not exists (select 1
            --  from dm.mep_discount_special mdn
            from dwstg.mep_discount_special mdn
                -- by dengj@besthelp 20130822 数据中心拆分
             where 1 = 1
               and mdn.line_id = fda.line_id);
    commit;
    --品牌费用
    delete fact_dm_brand_amount fdb
     where 1 = 1
       and not exists (select 1
             -- from dm.mep_brand_detail mbd
             from dwstg.mep_brand_detail mbd
             -- by dengj@besthelp 20130822 数据中心拆分
             where 1 = 1
               and mbd.line_id = fdb.line_id);
    commit;
    --运行费用
    delete fact_dm_project_amount fpa
     where 1 = 1
       and not exists (select 1
             -- from dm.mep_project_detail mpd
             from dwstg.mep_project_detail mpd
              -- by dengj@besthelp 20130822 数据中心拆分
             where 1 = 1
               and mpd.line_id = fpa.line_id);
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
end DW_DM_MEP_ETL_PKG;
/

prompt
prompt Creating package body DW_DM_SALE_COST_ETL_PKG
prompt =============================================
prompt
create or replace package body tbdw.DW_DM_SALE_COST_ETL_PKG is

  -- Author  : BRUCE
  -- Created : 2010/10/7 16:03:31
  -- Purpose : 处理成本分析的数据

  /*
  *得到 上年同期期间名称
  */
  function get_sync_period_name(p_period_name varchar2) return varchar2 is
    l_period varchar2(240) := 'NONE';
  begin
    l_period := (to_number(substr(p_period_name, 1, 4)) - 1) || '-' ||
                substr(p_period_name, -2, 2);
    return l_period;
  exception
    when others then
      return 'NONE';
  end get_sync_period_name;

  /*
  *处理产量的数据
  */
  function calc_output_data(p_period_name varchar2) return varchar2 is
    l_msg_data             varchar2(3000) := 'success';
    l_period_name          varchar2(80);
    l_HP_YEARS             varchar2(80);
    l_NEXT_HP_YEARS        varchar2(80);
    l_hp_months            varchar2(80);
    l_sync_period_name     varchar2(80);
    l_l420_quantity_actual number := 0; --新瓶的数量 实际
    l_l420_quantity_sync   number := 0; --新瓶的数量 场景
    l_l430_quantity_actual number := 0; --旧瓶的数量 实际
    l_l430_quantity_sync   number := 0; --旧瓶的数量 场景
  begin
    --  
    l_period_name      := p_period_name; --期间
    l_sync_period_name := get_sync_period_name(p_period_name); --上年同期
    l_HP_YEARS         := 'FY' || substr(p_period_name, 3, 2); --预算年份
    l_NEXT_HP_YEARS    := 'FY' ||
                          to_char(to_number(substr(p_period_name, 3, 2)) + 1); --下年预算年份
    select pm.hp_code
      into l_hp_months
     -- from hp.hp_hadf_period_mapping pm
     from dwstg.hp_hadf_period_mapping pm
     -- by dengj@besthelp 20130822 数据中心拆分
     where 1 = 1
       and pm.hadf_code = substr(l_period_name, 6, 2);
    --
    execute immediate 'truncate table FACT_DM_PRODUCT_QUANTITY_CALC';
    execute immediate 'truncate table FACT_DM_PRODUCT_AMOUNT_CALC';
    --处理实际数据
    --写入产量
    insert into FACT_DM_PRODUCT_QUANTITY_CALC
      (PERIOD_NAME,
       ENTITY_CODE,
       SCENARIO_CODE,
       CONCENTRATION,
       BRAND,
       PACK,
       VOLUME,
       SPECIFICATIONS,
       CONTAINER,
       OPERATION,
       PRODUCT,
       PROJECT,
       QUANTITY)
      select dsc.PERIOD_NAME        PERIOD_NAME,
             de.entity_code         ENTITY_CODE,
             dsc.data_type          SCENARIO_CODE,
             dp.cost_concentraiton  CONCENTRATION,
             dp.cost_brand          BRAND,
             dcp.lev2_code          PACK,
             dp.cost_VOLUME         VOLUME,
             dp.cost_SPECIFICATIONS SPECIFICATIONS,
             dp.cost_CONTAINER      CONTAINER,
             dp.cost_OPERATION      OPERATION,
             dp.product_id          PRODUCT,
             dsc.cost_type          PROJECT,
             dsc.quantity           QUANTITY
        from -- dm.dl_products      dp,
             DIM_DM_COST_PACK    DCP,
           --  dm.dl_sale_cost_all dsc,
            -- dm.dl_entities      de
            dwstg.DL_PRODUCTS dp,
            dwstg.DL_SALE_COST_ALL dsc,
            dwstg.DL_ENTITIES de
            -- by dengj@besthelp 20130822 数据中心拆分
       where 1 = 1
         and dsc.pack_type = substr(dcp.lev2_code, 4, 3)
         AND DCP.LEV1_CODE = DP.Cost_Pack
         and dsc.product_id = dp.product_id
         and dsc.cost_type = 'L010'
         and dsc.data_type = 'ACTUAL'
         and de.entity_id = dsc.entity_id
         and dsc.period_name = l_period_name ---
         and dp.cost_brand is not null
         and dp.cost_concentraiton is not null
         and dp.cost_PACK is not null
         and dp.cost_VOLUME is not null
         and dp.cost_SPECIFICATIONS is not null
         and dp.cost_CONTAINER is not null
         and dp.cost_OPERATION is not null;
    commit;
    --写入的金额
    insert into FACT_DM_PRODUCT_AMOUNT_CALC
      (PERIOD_NAME,
       ENTITY_CODE,
       SCENARIO_CODE,
       CONCENTRATION,
       BRAND,
       PACK,
       VOLUME,
       SPECIFICATIONS,
       CONTAINER,
       OPERATION,
       PRODUCT,
       PROJECT,
       QUANTITY_ALL,
       AMOUNT_ALL)
      select dsc.PERIOD_NAME        PERIOD_NAME,
             de.entity_code         ENTITY_CODE,
             dsc.data_type          SCENARIO_CODE,
             dp.cost_concentraiton  CONCENTRATION,
             dp.cost_brand          BRAND,
             dcp.lev2_code          PACK,
             dp.cost_VOLUME         VOLUME,
             dp.cost_SPECIFICATIONS SPECIFICATIONS,
             dp.cost_CONTAINER      CONTAINER,
             dp.cost_OPERATION      OPERATION,
             dp.product_id          PRODUCT,
             dsc.cost_type          PROJECT,
             dsc.quantity           QUANTITY_ALL,
             dsc.amount             AMOUNT_ALL
        from-- dm.dl_products      dp,
             DIM_DM_COST_PACK    DCP,
            -- dm.dl_sale_cost_all dsc,
             --dm.dl_entities      de
              dwstg.DL_PRODUCTS dp,
             dwstg.DL_SALE_COST_ALL dsc,
              dwstg.DL_ENTITIES de
            -- by dengj@besthelp 20130822 数据中心拆分
       where 1 = 1
         and dsc.pack_type = substr(dcp.lev2_code, 4, 3)
         AND DCP.LEV1_CODE = DP.Cost_Pack
         and dsc.product_id = dp.product_id
         and dsc.cost_type <> 'L010'
         and dsc.data_type = 'ACTUAL'
         and de.entity_id = dsc.entity_id
         and dsc.period_name = l_period_name ---
         and dp.cost_brand is not null
         and dp.cost_concentraiton is not null
         and dp.cost_PACK is not null
         and dp.cost_VOLUME is not null
         and dp.cost_SPECIFICATIONS is not null
         and dp.cost_CONTAINER is not null
         and dp.cost_OPERATION is not null;
    commit;
    --处理同期实际数据
    --写入产量
    insert into FACT_DM_PRODUCT_QUANTITY_CALC
      (PERIOD_NAME,
       ENTITY_CODE,
       SCENARIO_CODE,
       CONCENTRATION,
       BRAND,
       PACK,
       VOLUME,
       SPECIFICATIONS,
       CONTAINER,
       OPERATION,
       PRODUCT,
       PROJECT,
       QUANTITY)
      select l_period_name PERIOD_NAME,
             de.entity_code ENTITY_CODE,
             'SYNC' SCENARIO_CODE,
             dp.cost_concentraiton CONCENTRATION,
             dp.cost_brand BRAND,
             dcp.lev2_code PACK,
             dp.cost_VOLUME VOLUME,
             dp.cost_SPECIFICATIONS SPECIFICATIONS,
             dp.cost_CONTAINER CONTAINER,
             dp.cost_OPERATION OPERATION,
             dp.product_id PRODUCT,
             dsc.cost_type PROJECT,
             dsc.quantity QUANTITY
        from--dm.dl_products      dp,
             DIM_DM_COST_PACK    DCP,
            -- dm.dl_sale_cost_all dsc,
             --dm.dl_entities      de
              dwstg.DL_PRODUCTS dp,
             dwstg.DL_SALE_COST_ALL dsc,
              dwstg.DL_ENTITIES de
            -- by dengj@besthelp 20130822 数据中心拆分
       where 1 = 1
         and dsc.pack_type = substr(dcp.lev2_code, 4, 3)
         AND DCP.LEV1_CODE = DP.Cost_Pack
         and dsc.product_id = dp.product_id
         and dsc.cost_type = 'L010'
         and dsc.data_type = 'ACTUAL'
         and de.entity_id = dsc.entity_id
         and dsc.period_name = l_sync_period_name ---
         and dp.cost_brand is not null
         and dp.cost_concentraiton is not null
         and dp.cost_PACK is not null
         and dp.cost_VOLUME is not null
         and dp.cost_SPECIFICATIONS is not null
         and dp.cost_CONTAINER is not null
         and dp.cost_OPERATION is not null;
    commit;
    --写入的金额
    insert into FACT_DM_PRODUCT_AMOUNT_CALC
      (PERIOD_NAME,
       ENTITY_CODE,
       SCENARIO_CODE,
       CONCENTRATION,
       BRAND,
       PACK,
       VOLUME,
       SPECIFICATIONS,
       CONTAINER,
       OPERATION,
       PRODUCT,
       PROJECT,
       QUANTITY_ALL,
       AMOUNT_ALL)
      select l_period_name PERIOD_NAME,
             de.entity_code ENTITY_CODE,
             'SYNC' SCENARIO_CODE,
             dp.cost_concentraiton CONCENTRATION,
             dp.cost_brand BRAND,
             dcp.lev2_code PACK,
             dp.cost_VOLUME VOLUME,
             dp.cost_SPECIFICATIONS SPECIFICATIONS,
             dp.cost_CONTAINER CONTAINER,
             dp.cost_OPERATION OPERATION,
             dp.product_id PRODUCT,
             dsc.cost_type PROJECT,
             dsc.quantity QUANTITY_ALL,
             dsc.amount AMOUNT_ALL
        from-- dm.dl_products      dp,
             DIM_DM_COST_PACK    DCP,
             --dm.dl_sale_cost_all dsc,
             --dm.dl_entities      de
              dwstg.DL_PRODUCTS dp,
             dwstg.DL_SALE_COST_ALL dsc,
              dwstg.DL_ENTITIES de
            -- by dengj@besthelp 20130822 数据中心拆分
       where 1 = 1
         and dsc.pack_type = substr(dcp.lev2_code, 4, 3)
         AND DCP.LEV1_CODE = DP.Cost_Pack
         and dsc.product_id = dp.product_id
         and dsc.cost_type <> 'L010'
         and dsc.data_type = 'ACTUAL'
         and de.entity_id = dsc.entity_id
         and dsc.period_name = l_sync_period_name ---
         and dp.cost_brand is not null
         and dp.cost_concentraiton is not null
         and dp.cost_PACK is not null
         and dp.cost_VOLUME is not null
         and dp.cost_SPECIFICATIONS is not null
         and dp.cost_CONTAINER is not null
         and dp.cost_OPERATION is not null;
    commit;
  
    --处理预算数据
    if (l_period_name < '2012-01') then
      --2012年之前的预算数据
      --写入预算产量
      insert into FACT_DM_PRODUCT_QUANTITY_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY)
        select dsc.PERIOD_NAME        PERIOD_NAME,
               de.entity_code         ENTITY_CODE,
               dsc.data_type          SCENARIO_CODE,
               dp.cost_concentraiton  CONCENTRATION,
               dp.cost_brand          BRAND,
               dcp.lev2_code          PACK,
               dp.cost_VOLUME         VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER      CONTAINER,
               dp.cost_OPERATION      OPERATION,
               dp.product_id          PRODUCT,
               dsc.cost_type          PROJECT,
               dsc.quantity           QUANTITY
          from-- dm.dl_products      dp,
               DIM_DM_COST_PACK    DCP,
              -- dm.dl_sale_cost_all dsc,
              -- dm.dl_entities      de
               dwstg.DL_PRODUCTS dp,
              dwstg.DL_SALE_COST_ALL dsc,
               dwstg.DL_ENTITIES de
            -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
           and dsc.pack_type = substr(dcp.lev2_code, 4, 3)
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dsc.product_id = dp.product_id
           and dsc.cost_type = 'L010'
           and dsc.data_type in ('TARGET_A', 'TARGET_B')
           and de.entity_id = dsc.entity_id
           and dsc.period_name = l_period_name ---
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null;
      commit;
      --写入预算的金额
      insert into FACT_DM_PRODUCT_AMOUNT_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY_ALL,
         AMOUNT_ALL)
        select dsc.PERIOD_NAME        PERIOD_NAME,
               de.entity_code         ENTITY_CODE,
               dsc.data_type          SCENARIO_CODE,
               dp.cost_concentraiton  CONCENTRATION,
               dp.cost_brand          BRAND,
               dcp.lev2_code          PACK,
               dp.cost_VOLUME         VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER      CONTAINER,
               dp.cost_OPERATION      OPERATION,
               dp.product_id          PRODUCT,
               dsc.cost_type          PROJECT,
               dsc.quantity           QUANTITY_ALL,
               dsc.amount             AMOUNT_ALL
          from-- dm.dl_products      dp,
               DIM_DM_COST_PACK    DCP,
             --  dm.dl_sale_cost_all dsc,
              -- dm.dl_entities      de
               dwstg.DL_PRODUCTS dp,
              dwstg.DL_SALE_COST_ALL dsc,
               dwstg.DL_ENTITIES de
            -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
           and dsc.pack_type = substr(dcp.lev2_code, 4, 3)
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dsc.product_id = dp.product_id
           and dsc.cost_type <> 'L010'
           and dsc.data_type in ('TARGET_A', 'TARGET_B')
           and de.entity_id = dsc.entity_id
           and dsc.period_name = l_period_name ---
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null;
      commit;
    else
      --2012年之后的预算数据
      --写入预算产量
      insert into FACT_DM_PRODUCT_QUANTITY_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY)
        select l_period_name PERIOD_NAME,
               replace(hc.entity, 'E', '') ENTITY_CODE,
               decode(hc.scenario,
                      'SC02',
                      'TARGET_B',
                      'SC01',
                      'TARGET_A',
                      'ERROR') SCENARIO_CODE,
               dp.cost_concentraiton CONCENTRATION,
               dp.cost_brand BRAND,
               dcp.lev2_code PACK,
               dp.cost_VOLUME VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER CONTAINER,
               dp.cost_OPERATION OPERATION,
               dp.product_id PRODUCT,
               'L010' PROJECT,
               hc.data QUANTITY
          from --dm.dl_products          dp,
               DIM_DM_COST_PACK        DCP,
              -- hp.hp_data_tbcbys_cost  hc,
              -- hp.hp_hadf_pack_mapping hpm
              dwstg.DL_PRODUCTS  dp,
              dwstg.HP_DATA_TBCBYS_COST hc,
               dwstg.HP_HADF_PACK_MAPPING hpm
               -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
              --   and hc.entity
           and hpm.hadf_code = substr(dcp.lev2_code, 4, 3)
           and hc.package = hpm.hp_code
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null
           and hc.product = 'P' || dp.product_code
           and hc.material = 'M00'
           and hc.department = 'D0103'
           and hc.input = 'I00'
           and hc.stage = 'ST0102'
           and hc.spare = 'SP00'
           and hc.account = 'A0501010000000000'
           and hc.version = 'V02' --终稿
           AND HC.PERIODS = l_hp_months --
           AND HC.SCENARIO in ('SC01', 'SC02')
           and hc.years = l_HP_YEARS --
        ;
      commit;
      --写入预算的金额
      insert into FACT_DM_PRODUCT_AMOUNT_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY_ALL,
         AMOUNT_ALL)
        select l_period_name PERIOD_NAME,
               replace(hc.entity, 'E', '') ENTITY_CODE,
               decode(hc.scenario,
                      'SC02',
                      'TARGET_B',
                      'SC01',
                      'TARGET_A',
                      'ERROR') SCENARIO_CODE,
               dp.cost_concentraiton CONCENTRATION,
               dp.cost_brand BRAND,
               dcp.lev2_code PACK,
               dp.cost_VOLUME VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER CONTAINER,
               dp.cost_OPERATION OPERATION,
               dp.product_id PRODUCT,
               hcm.hadf_code PROJECT,
               sum(decode(hc.account, 'A0502020000000000', hc.data, 0)) QUANTITY_ALL,
               sum(decode(hc.account, 'A0503010000000000', hc.data, 0)) AMOUNT_ALL
          from --dm.dl_products          dp,
               DIM_DM_COST_PACK        DCP,
              -- hp.hp_data_tbcbys_cost  hc,
              -- hp.hp_hadf_pack_mapping hpm,
              -- hp.hp_hadf_cost_mapping hcm
              dwstg.dl_products          dp,
              dwstg.hp_data_tbcbys_cost  hc,
               dwstg.hp_hadf_pack_mapping hpm,
               dwstg.hp_hadf_cost_mapping hcm
               -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
              --   and hc.entity
           and hpm.hadf_code = substr(dcp.lev2_code, 4, 3)
           and hc.package = hpm.hp_code
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null
           and hc.product = 'P' || dp.product_code
           and hc.material = hcm.hp_code
           and hc.department = 'D00'
           and hc.input = 'I00'
           and hc.stage = 'ST01'
           and hc.spare = 'SP00'
           and hc.account in ('A0502020000000000', 'A0503010000000000')
           and hc.version = 'V02' --终稿
           AND HC.PERIODS = l_hp_months --
           AND HC.SCENARIO in ('SC01', 'SC02')
           and hc.years = l_HP_YEARS --
         GROUP BY replace(hc.entity, 'E', ''),
                  decode(hc.scenario,
                         'SC02',
                         'TARGET_B',
                         'SC01',
                         'TARGET_A',
                         'ERROR'),
                  dp.cost_concentraiton,
                  dp.cost_brand,
                  dcp.lev2_code,
                  dp.cost_VOLUME,
                  dp.cost_SPECIFICATIONS,
                  dp.cost_CONTAINER,
                  dp.cost_OPERATION,
                  dp.product_id,
                  hcm.hadf_code;
    
      commit;
    end if;
    --处理预计数据
    if (l_hp_months = 'Nov') then
      --11月
      --写入预算产量
      insert into FACT_DM_PRODUCT_QUANTITY_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY)
        select l_period_name PERIOD_NAME,
               replace(hc.entity, 'E', '') ENTITY_CODE,
               'BUDGET' SCENARIO_CODE,
               dp.cost_concentraiton CONCENTRATION,
               dp.cost_brand BRAND,
               dcp.lev2_code PACK,
               dp.cost_VOLUME VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER CONTAINER,
               dp.cost_OPERATION OPERATION,
               dp.product_id PRODUCT,
               'L010' PROJECT,
               SUM(hc.data) QUANTITY
          from /*dm.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               hp.hp_data_tbcbys_cost    hc,
               hp.hp_hadf_pack_mapping   hpm,
               hp.hp_hadf_period_mapping PM1,
               hp.hp_hadf_period_mapping PM2*/
               dwstg.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               dwstg.hp_data_tbcbys_cost    hc,
               dwstg.hp_hadf_pack_mapping   hpm,
               dwstg.hp_hadf_period_mapping PM1,
               dwstg.hp_hadf_period_mapping PM2
               -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
              --   and hc.entity
           and hpm.hadf_code = substr(dcp.lev2_code, 4, 3)
           and hc.package = hpm.hp_code
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null
           and hc.product = 'P' || dp.product_code
           and hc.material = 'M00'
           and hc.department = 'D0103'
           and hc.input = 'I00'
           and hc.stage = 'ST0102'
           and hc.spare = 'SP00'
           and hc.account = 'A0501010000000000'
           and hc.version = 'V02' --终稿
           AND HC.PERIODS = pm2.hp_code --
           and pm2.month <= pm1.month
           and pm1.hp_code = l_hp_months
           AND HC.SCENARIO = 'SC02'
           and hc.years = l_NEXT_HP_YEARS --
         GROUP BY replace(hc.entity, 'E', ''),
                  dp.cost_concentraiton,
                  dp.cost_brand,
                  dcp.lev2_code,
                  dp.cost_VOLUME,
                  dp.cost_SPECIFICATIONS,
                  dp.cost_CONTAINER,
                  dp.cost_OPERATION,
                  dp.product_id;
    
      commit;
      --写入预算的金额
      insert into FACT_DM_PRODUCT_AMOUNT_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY_ALL,
         AMOUNT_ALL)
        select l_period_name PERIOD_NAME,
               replace(hc.entity, 'E', '') ENTITY_CODE,
               'BUDGET' SCENARIO_CODE,
               dp.cost_concentraiton CONCENTRATION,
               dp.cost_brand BRAND,
               dcp.lev2_code PACK,
               dp.cost_VOLUME VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER CONTAINER,
               dp.cost_OPERATION OPERATION,
               dp.product_id PRODUCT,
               hcm.hadf_code PROJECT,
               sum(decode(hc.account, 'A0502020000000000', hc.data, 0)) QUANTITY_ALL,
               sum(decode(hc.account, 'A0503010000000000', hc.data, 0)) AMOUNT_ALL
          from /*dm.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               hp.hp_data_tbcbys_cost    hc,
               hp.hp_hadf_pack_mapping   hpm,
               hp.hp_hadf_cost_mapping   hcm,
               hp.hp_hadf_period_mapping PM1,
               hp.hp_hadf_period_mapping PM2*/
               dwstg.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               dwstg.hp_data_tbcbys_cost    hc,
               dwstg.hp_hadf_pack_mapping   hpm,
               dwstg.hp_hadf_cost_mapping   hcm,
               dwstg.hp_hadf_period_mapping PM1,
               dwstg.hp_hadf_period_mapping PM2
               -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
              --   and hc.entity
           and hpm.hadf_code = substr(dcp.lev2_code, 4, 3)
           and hc.package = hpm.hp_code
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null
           and hc.product = 'P' || dp.product_code
           and hc.material = hcm.hp_code
           and hc.department = 'D00'
           and hc.input = 'I00'
           and hc.stage = 'ST01'
           and hc.spare = 'SP00'
           and hc.account in ('A0502020000000000', 'A0503010000000000')
           and hc.version = 'V02' --终稿
           AND HC.PERIODS = pm2.hp_code --
           and pm2.month <= pm1.month
           and pm1.hp_code = l_hp_months --
           AND HC.SCENARIO = 'SC02'
           and hc.years = l_NEXT_HP_YEARS --
         GROUP BY replace(hc.entity, 'E', ''),
                  dp.cost_concentraiton,
                  dp.cost_brand,
                  dcp.lev2_code,
                  dp.cost_VOLUME,
                  dp.cost_SPECIFICATIONS,
                  dp.cost_CONTAINER,
                  dp.cost_OPERATION,
                  dp.product_id,
                  hcm.hadf_code;
    
      commit;
    elsif (l_hp_months = 'Dec') then
      --12月
      --写入预算产量
      insert into FACT_DM_PRODUCT_QUANTITY_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY)
        select l_period_name PERIOD_NAME,
               replace(hc.entity, 'E', '') ENTITY_CODE,
               'BUDGET' SCENARIO_CODE,
               dp.cost_concentraiton CONCENTRATION,
               dp.cost_brand BRAND,
               dcp.lev2_code PACK,
               dp.cost_VOLUME VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER CONTAINER,
               dp.cost_OPERATION OPERATION,
               dp.product_id PRODUCT,
               'L010' PROJECT,
               SUM(hc.data) QUANTITY
          from /*dm.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               hp.hp_data_tbcbys_cost    hc,
               hp.hp_hadf_pack_mapping   hpm,
               hp.hp_hadf_period_mapping PM1,
               hp.hp_hadf_period_mapping PM2*/
               dwstg.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               dwstg.hp_data_tbcbys_cost    hc,
               dwstg.hp_hadf_pack_mapping   hpm,
               dwstg.hp_hadf_period_mapping PM1,
               dwstg.hp_hadf_period_mapping PM2
               -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
              --   and hc.entity
           and hpm.hadf_code = substr(dcp.lev2_code, 4, 3)
           and hc.package = hpm.hp_code
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null
           and hc.product = 'P' || dp.product_code
           and hc.material = 'M00'
           and hc.department = 'D0103'
           and hc.input = 'I00'
           and hc.stage = 'ST0102'
           and hc.spare = 'SP00'
           and hc.account = 'A0501010000000000'
           and hc.version = 'V02' --终稿
           AND HC.PERIODS = pm2.hp_code --
           and pm2.month = pm1.month
           and pm1.hp_code = l_hp_months
           AND HC.SCENARIO = 'SC02'
           and hc.years = l_NEXT_HP_YEARS --
         GROUP BY replace(hc.entity, 'E', ''),
                  dp.cost_concentraiton,
                  dp.cost_brand,
                  dcp.lev2_code,
                  dp.cost_VOLUME,
                  dp.cost_SPECIFICATIONS,
                  dp.cost_CONTAINER,
                  dp.cost_OPERATION,
                  dp.product_id;
    
      commit;
      --写入预算的金额
      insert into FACT_DM_PRODUCT_AMOUNT_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY_ALL,
         AMOUNT_ALL)
        select l_period_name PERIOD_NAME,
               replace(hc.entity, 'E', '') ENTITY_CODE,
               'BUDGET' SCENARIO_CODE,
               dp.cost_concentraiton CONCENTRATION,
               dp.cost_brand BRAND,
               dcp.lev2_code PACK,
               dp.cost_VOLUME VOLUME,
               dp.cost_SPECIFICATIONS SPECIFICATIONS,
               dp.cost_CONTAINER CONTAINER,
               dp.cost_OPERATION OPERATION,
               dp.product_id PRODUCT,
               hcm.hadf_code PROJECT,
               sum(decode(hc.account, 'A0502020000000000', hc.data, 0)) QUANTITY_ALL,
               sum(decode(hc.account, 'A0503010000000000', hc.data, 0)) AMOUNT_ALL
          from /*dm.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               hp.hp_data_tbcbys_cost    hc,
               hp.hp_hadf_pack_mapping   hpm,
               hp.hp_hadf_cost_mapping   hcm,
               hp.hp_hadf_period_mapping PM1,
               hp.hp_hadf_period_mapping PM2*/
               dwstg.dl_products            dp,
               DIM_DM_COST_PACK          DCP,
               dwstg.hp_data_tbcbys_cost    hc,
               dwstg.hp_hadf_pack_mapping   hpm,
               dwstg.hp_hadf_cost_mapping   hcm,
               dwstg.hp_hadf_period_mapping PM1,
               dwstg.hp_hadf_period_mapping PM2
               -- by dengj@besthelp 20130822 数据中心拆分
         where 1 = 1
              --   and hc.entity
           and hpm.hadf_code = substr(dcp.lev2_code, 4, 3)
           and hc.package = hpm.hp_code
           AND DCP.LEV1_CODE = DP.Cost_Pack
           and dp.cost_brand is not null
           and dp.cost_concentraiton is not null
           and dp.cost_PACK is not null
           and dp.cost_VOLUME is not null
           and dp.cost_SPECIFICATIONS is not null
           and dp.cost_CONTAINER is not null
           and dp.cost_OPERATION is not null
           and hc.product = 'P' || dp.product_code
           and hc.material = hcm.hp_code
           and hc.department = 'D00'
           and hc.input = 'I00'
           and hc.stage = 'ST01'
           and hc.spare = 'SP00'
           and hc.account in ('A0502020000000000', 'A0503010000000000')
           and hc.version = 'V02' --终稿
           AND HC.PERIODS = pm2.hp_code --
           and pm2.month = pm1.month
           and pm1.hp_code = l_hp_months --
           AND HC.SCENARIO = 'SC02'
           and hc.years = l_NEXT_HP_YEARS --
         GROUP BY replace(hc.entity, 'E', ''),
                  dp.cost_concentraiton,
                  dp.cost_brand,
                  dcp.lev2_code,
                  dp.cost_VOLUME,
                  dp.cost_SPECIFICATIONS,
                  dp.cost_CONTAINER,
                  dp.cost_OPERATION,
                  dp.product_id,
                  hcm.hadf_code;
    
      commit;
    end if;
    --补齐酿制材料的数据结构
    FOR I IN (select FP.PERIOD_NAME,
                     FP.ENTITY_CODE,
                     FP.SCENARIO_CODE,
                     FP.CONCENTRATION,
                     FP.BRAND,
                     FP.PACK,
                     FP.VOLUME,
                     FP.SPECIFICATIONS,
                     FP.CONTAINER,
                     FP.OPERATION,
                     FP.PRODUCT
                from fact_dm_product_amount_calc FP, DIM_DM_COST_PROJECT DP
               WHERE 1 = 1
                 AND DP.LEV5_CODE <= 'L250'
                 AND DP.LEV5_CODE = FP.PROJECT
              --AND FP.SCENARIO_CODE = 'ACTUAL'
               GROUP BY FP.PERIOD_NAME,
                        FP.ENTITY_CODE,
                        FP.SCENARIO_CODE,
                        FP.CONCENTRATION,
                        FP.BRAND,
                        FP.PACK,
                        FP.VOLUME,
                        FP.SPECIFICATIONS,
                        FP.CONTAINER,
                        FP.OPERATION,
                        FP.PRODUCT
              HAVING COUNT(FP.PROJECT) < 19) LOOP
      insert into FACT_DM_PRODUCT_AMOUNT_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY_ALL,
         AMOUNT_ALL)
        select I.PERIOD_NAME,
               I.ENTITY_CODE,
               I.SCENARIO_CODE,
               I.CONCENTRATION,
               I.BRAND,
               I.PACK,
               I.VOLUME,
               I.SPECIFICATIONS,
               I.CONTAINER,
               I.OPERATION,
               I.PRODUCT,
               DP.LEV5_CODE PROJECT,
               0 QUANTITY_ALL,
               0 AMOUNT_ALL
          from fact_dm_product_amount_calc FD1, DIM_DM_COST_PROJECT DP
         WHERE 1 = 1
           AND DP.LEV5_CODE <= 'L250'
           AND DP.LEV5_CODE = FD1.PROJECT(+)
           AND FD1.PACK(+) = I.PACK
           AND FD1.SCENARIO_CODE(+) = i.scenario_code
           AND FD1.ENTITY_CODE(+) = i.entity_code
           AND FD1.PRODUCT(+) = i.product
           AND NOT EXISTS
         (select 1
                  from fact_dm_product_amount_calc FD2,
                       DIM_DM_COST_PROJECT         DP
                 WHERE 1 = 1
                   AND DP.LEV5_CODE <= 'L250'
                   AND DP.LEV5_CODE = FD2.PROJECT
                   AND FD2.PROJECT = FD1.PROJECT
                   AND FD2.PACK = FD1.PACK
                   AND FD2.SCENARIO_CODE = FD1.SCENARIO_CODE
                   AND FD2.ENTITY_CODE = FD1.ENTITY_CODE
                   AND FD2.PRODUCT = FD1.PRODUCT);
      COMMIT;
    END LOOP;
    --补齐职工薪酬的数据结构
    FOR I IN (select FP.PERIOD_NAME,
                     FP.ENTITY_CODE,
                     FP.SCENARIO_CODE,
                     FP.CONCENTRATION,
                     FP.BRAND,
                     FP.PACK,
                     FP.VOLUME,
                     FP.SPECIFICATIONS,
                     FP.CONTAINER,
                     FP.OPERATION,
                     FP.PRODUCT
                from fact_dm_product_amount_calc FP, DIM_DM_COST_PROJECT DP
               WHERE 1 = 1
                 AND DP.LEV5_CODE IN ('L520', 'L530')
                 AND DP.LEV5_CODE = FP.PROJECT
              --AND FP.SCENARIO_CODE = 'ACTUAL'
               GROUP BY FP.PERIOD_NAME,
                        FP.ENTITY_CODE,
                        FP.SCENARIO_CODE,
                        FP.CONCENTRATION,
                        FP.BRAND,
                        FP.PACK,
                        FP.VOLUME,
                        FP.SPECIFICATIONS,
                        FP.CONTAINER,
                        FP.OPERATION,
                        FP.PRODUCT
              HAVING COUNT(FP.PROJECT) < 2) LOOP
      insert into FACT_DM_PRODUCT_AMOUNT_CALC
        (PERIOD_NAME,
         ENTITY_CODE,
         SCENARIO_CODE,
         CONCENTRATION,
         BRAND,
         PACK,
         VOLUME,
         SPECIFICATIONS,
         CONTAINER,
         OPERATION,
         PRODUCT,
         PROJECT,
         QUANTITY_ALL,
         AMOUNT_ALL)
        select I.PERIOD_NAME,
               I.ENTITY_CODE,
               I.SCENARIO_CODE,
               I.CONCENTRATION,
               I.BRAND,
               I.PACK,
               I.VOLUME,
               I.SPECIFICATIONS,
               I.CONTAINER,
               I.OPERATION,
               I.PRODUCT,
               DP.LEV5_CODE PROJECT,
               0 QUANTITY_ALL,
               0 AMOUNT_ALL
          from fact_dm_product_amount_calc FD1, DIM_DM_COST_PROJECT DP
         WHERE 1 = 1
           AND DP.LEV5_CODE IN ('L520', 'L530')
           AND DP.LEV5_CODE = FD1.PROJECT(+)
           AND FD1.PACK(+) = I.PACK
           AND FD1.SCENARIO_CODE(+) = i.scenario_code
           AND FD1.ENTITY_CODE(+) = i.entity_code
           AND FD1.PRODUCT(+) = i.product
           AND NOT EXISTS
         (select 1
                  from fact_dm_product_amount_calc FD2,
                       DIM_DM_COST_PROJECT         DP
                 WHERE 1 = 1
                   AND DP.LEV5_CODE IN ('L520', 'L530')
                   AND DP.LEV5_CODE = FD2.PROJECT
                   AND FD2.PROJECT = FD1.PROJECT
                   AND FD2.PACK = FD1.PACK
                   AND FD2.SCENARIO_CODE = FD1.SCENARIO_CODE
                   AND FD2.ENTITY_CODE = FD1.ENTITY_CODE
                   AND FD2.PRODUCT = FD1.PRODUCT);
      COMMIT;
    END LOOP;
    --按场景写入消耗数据
    execute immediate 'truncate table FACT_DM_PRODUCT_DATA_CALC1';
    execute immediate 'truncate table FACT_DM_PRODUCT_DATA_CALC';
    insert into FACT_DM_PRODUCT_DATA_CALC1
      (PERIOD_NAME,
       ENTITY_CODE,
       SCENARIO_CODE,
       CONCENTRATION,
       BRAND,
       PACK,
       VOLUME,
       SPECIFICATIONS,
       CONTAINER,
       OPERATION,
       PRODUCT,
       PROJECT,
       ACTUAL_QUANTITY,
       ACTUAL_QUANTITY_ALL,
       ACTUAL_AMOUNT_ALL,
       SCENARIO_QUANTITY,
       SCENARIO_QUANTITY_ALL,
       SCENARIO_AMOUNT_ALL)
      SELECT T.PERIOD_NAME,
             T.ENTITY_CODE,
             T.SCENARIO_CODE,
             T.CONCENTRATION,
             T.BRAND,
             T.PACK,
             T.VOLUME,
             T.SPECIFICATIONS,
             T.CONTAINER,
             T.OPERATION,
             T.PRODUCT,
             T.PROJECT,
             NVL(SUM(T.ACTUAL_QUANTITY), 0) ACTUAL_QUANTITY,
             NVL(SUM(T.ACTUAL_QUANTITY_ALL), 0) ACTUAL_QUANTITY_ALL,
             NVL(SUM(T.ACTUAL_AMOUNT_ALL), 0) ACTUAL_AMOUNT_ALL,
             NVL(SUM(T.SCENARIO_QUANTITY), 0) SCENARIO_QUANTITY,
             NVL(SUM(T.SCENARIO_QUANTITY_ALL), 0) SCENARIO_QUANTITY_ALL,
             NVL(SUM(T.SCENARIO_AMOUNT_ALL), 0) SCENARIO_AMOUNT_ALL
        FROM (select dc.PERIOD_NAME,
                     dc.ENTITY_CODE,
                     dc.SCENARIO_CODE,
                     dc.CONCENTRATION,
                     dc.BRAND,
                     dc.PACK,
                     dc.VOLUME,
                     dc.SPECIFICATIONS,
                     dc.CONTAINER,
                     dc.OPERATION,
                     dc.PRODUCT,
                     dc.PROJECT,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_QUANTITY_ALL,
                     0 ACTUAL_AMOUNT_ALL,
                     0 SCENARIO_QUANTITY,
                     DC.QUANTITY_ALL SCENARIO_QUANTITY_ALL,
                     DC.AMOUNT_ALL SCENARIO_AMOUNT_ALL
                from FACT_DM_PRODUCT_AMOUNT_CALC dc,
                     dim_dm_cost_scenario        dcs
               where 1 = 1
                 and dc.scenario_code = dcs.scenario_code
                 and dcs.scenario_code in
                     ('TARGET_A', 'TARGET_B', 'SYNC', 'BUDGET')
              UNION ALL
              select dc.PERIOD_NAME,
                     dc.ENTITY_CODE,
                     dcs.SCENARIO_CODE,
                     dc.CONCENTRATION,
                     dc.BRAND,
                     dc.PACK,
                     dc.VOLUME,
                     dc.SPECIFICATIONS,
                     dc.CONTAINER,
                     dc.OPERATION,
                     dc.PRODUCT,
                     dc.PROJECT,
                     0 ACTUAL_QUANTITY,
                     DC.QUANTITY_ALL ACTUAL_QUANTITY_ALL,
                     DC.AMOUNT_ALL ACTUAL_AMOUNT_ALL,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_QUANTITY_ALL,
                     0 SCENARIO_AMOUNT_ALL
                from FACT_DM_PRODUCT_AMOUNT_CALC dc,
                     dim_dm_cost_scenario        dcs
               where 1 = 1
                 and dcs.scenario_code in
                     ('TARGET_A', 'TARGET_B', 'SYNC', 'BUDGET')
                 and dc.scenario_code = 'ACTUAL') T
       GROUP BY T.PERIOD_NAME,
                T.ENTITY_CODE,
                T.SCENARIO_CODE,
                T.CONCENTRATION,
                T.BRAND,
                T.PACK,
                T.VOLUME,
                T.SPECIFICATIONS,
                T.CONTAINER,
                T.OPERATION,
                T.PRODUCT,
                T.PROJECT;
    --计算销量
    insert into FACT_DM_PRODUCT_DATA_CALC
      (PERIOD_NAME,
       ENTITY_CODE,
       SCENARIO_CODE,
       CONCENTRATION,
       BRAND,
       PACK,
       VOLUME,
       SPECIFICATIONS,
       CONTAINER,
       OPERATION,
       PRODUCT,
       PROJECT,
       ACTUAL_QUANTITY,
       ACTUAL_QUANTITY_ALL,
       ACTUAL_AMOUNT_ALL,
       SCENARIO_QUANTITY,
       SCENARIO_QUANTITY_ALL,
       SCENARIO_AMOUNT_ALL)
      SELECT T.PERIOD_NAME,
             T.ENTITY_CODE,
             T.SCENARIO_CODE,
             T.CONCENTRATION,
             T.BRAND,
             T.PACK,
             T.VOLUME,
             T.SPECIFICATIONS,
             T.CONTAINER,
             T.OPERATION,
             T.PRODUCT,
             T.PROJECT,
             NVL(SUM(T.ACTUAL_QUANTITY), 0) ACTUAL_QUANTITY,
             NVL(SUM(T.ACTUAL_QUANTITY_ALL), 0) ACTUAL_QUANTITY_ALL,
             NVL(SUM(T.ACTUAL_AMOUNT_ALL), 0) ACTUAL_AMOUNT_ALL,
             NVL(SUM(T.SCENARIO_QUANTITY), 0) SCENARIO_QUANTITY,
             NVL(SUM(T.SCENARIO_QUANTITY_ALL), 0) SCENARIO_QUANTITY_ALL,
             NVL(SUM(T.SCENARIO_AMOUNT_ALL), 0) SCENARIO_AMOUNT_ALL
        FROM (select dc.PERIOD_NAME,
                     dc.ENTITY_CODE,
                     dc.SCENARIO_CODE,
                     dc.CONCENTRATION,
                     dc.BRAND,
                     dc.PACK,
                     dc.VOLUME,
                     dc.SPECIFICATIONS,
                     dc.CONTAINER,
                     dc.OPERATION,
                     dc.PRODUCT,
                     dc.PROJECT,
                     0 ACTUAL_QUANTITY,
                     dc.ACTUAL_QUANTITY_ALL,
                     dc.ACTUAL_AMOUNT_ALL,
                     0 SCENARIO_QUANTITY,
                     DC.SCENARIO_QUANTITY_ALL,
                     DC.SCENARIO_AMOUNT_ALL
                from FACT_DM_PRODUCT_DATA_CALC1 dc
               where 1 = 1
              UNION ALL
              --实际产量
              select dc.PERIOD_NAME,
                     dc.ENTITY_CODE,
                     dc.SCENARIO_CODE,
                     dc.CONCENTRATION,
                     dc.BRAND,
                     dc.PACK,
                     dc.VOLUME,
                     dc.SPECIFICATIONS,
                     dc.CONTAINER,
                     dc.OPERATION,
                     dc.PRODUCT,
                     dc.PROJECT,
                     fq.quantity ACTUAL_QUANTITY,
                     0 ACTUAL_QUANTITY_ALL,
                     0 ACTUAL_AMOUNT_ALL,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_QUANTITY_ALL,
                     0 SCENARIO_AMOUNT_ALL
                from FACT_DM_PRODUCT_DATA_CALC1    dc,
                     FACT_DM_PRODUCT_QUANTITY_CALC FQ
               where 1 = 1
                 and dc.PERIOD_NAME = FQ.PERIOD_NAME
                 and dc.ENTITY_CODE = FQ.ENTITY_CODE
                    --and dc.SCENARIO_CODE = FQ.SCENARIO_CODE
                 and dc.CONCENTRATION = FQ.CONCENTRATION
                 and dc.BRAND = FQ.BRAND
                 and dc.PACK = FQ.PACK
                 and dc.VOLUME = FQ.VOLUME
                 and dc.SPECIFICATIONS = FQ.SPECIFICATIONS
                 and dc.CONTAINER = FQ.CONTAINER
                 and dc.OPERATION = FQ.OPERATION
                 and dc.PRODUCT = FQ.PRODUCT
                    --and dc.PROJECT = FQ.PROJECT
                 AND FQ.SCENARIO_CODE = 'ACTUAL'
              UNION ALL
              --预算产量
              select dc.PERIOD_NAME,
                     dc.ENTITY_CODE,
                     dc.SCENARIO_CODE,
                     dc.CONCENTRATION,
                     dc.BRAND,
                     dc.PACK,
                     dc.VOLUME,
                     dc.SPECIFICATIONS,
                     dc.CONTAINER,
                     dc.OPERATION,
                     dc.PRODUCT,
                     dc.PROJECT,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_QUANTITY_ALL,
                     0 ACTUAL_AMOUNT_ALL,
                     fq.quantity SCENARIO_QUANTITY,
                     0 SCENARIO_QUANTITY_ALL,
                     0 SCENARIO_AMOUNT_ALL
                from FACT_DM_PRODUCT_DATA_CALC1    dc,
                     FACT_DM_PRODUCT_QUANTITY_CALC FQ
               where 1 = 1
                 and dc.PERIOD_NAME = FQ.PERIOD_NAME
                 and dc.ENTITY_CODE = FQ.ENTITY_CODE
                 and dc.SCENARIO_CODE = FQ.SCENARIO_CODE
                 and dc.CONCENTRATION = FQ.CONCENTRATION
                 and dc.BRAND = FQ.BRAND
                 and dc.PACK = FQ.PACK
                 and dc.VOLUME = FQ.VOLUME
                 and dc.SPECIFICATIONS = FQ.SPECIFICATIONS
                 and dc.CONTAINER = FQ.CONTAINER
                 and dc.OPERATION = FQ.OPERATION
                 and dc.PRODUCT = FQ.PRODUCT
              --and dc.PROJECT = FQ.PROJECT
              ) T
       GROUP BY T.PERIOD_NAME,
                T.ENTITY_CODE,
                T.SCENARIO_CODE,
                T.CONCENTRATION,
                T.BRAND,
                T.PACK,
                T.VOLUME,
                T.SPECIFICATIONS,
                T.CONTAINER,
                T.OPERATION,
                T.PRODUCT,
                T.PROJECT;
    --  
    --汇总成本项目
    --LEV5->LEV4
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT, --产品
             dcp.lev4_code project, --项目
             fcs.actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             fcs.scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_cost_project dcp
       where 1 = 1
         and dcp.lev4_code <> dcp.lev5_code
         and fcs.project = dcp.lev5_code
         and fcs.period_name = l_period_name
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                dcp.lev4_code, --项目
                fcs.PRODUCT,
                fcs.actual_quantity,
                fcs.scenario_quantity;
    commit;
    --LEV4->LEV3
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT, --产品
             dcp.lev3_code project, --项目
             fcs.actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             fcs.scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_cost_project_lev4 dcp
       where 1 = 1
         and dcp.lev3_code <> dcp.lev4_code
         and fcs.project = dcp.lev4_code
         and fcs.period_name = l_period_name
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                dcp.lev3_code, --项目
                fcs.PRODUCT,
                fcs.actual_quantity,
                fcs.scenario_quantity;
    commit;
    --LEV3->LEV2
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT, --产品
             dcp.lev2_code project, --项目
             fcs.actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             fcs.scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_cost_project_lev3 dcp
       where 1 = 1
         and dcp.lev2_code <> dcp.lev3_code
         and fcs.project = dcp.lev3_code
         and fcs.period_name = l_period_name
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                dcp.lev2_code, --项目
                fcs.PRODUCT,
                fcs.actual_quantity,
                fcs.scenario_quantity;
    commit;
    --LEV2->LEV1
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT, --产品
             dcp.lev1_code project, --项目
             fcs.actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             fcs.scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_cost_project_lev2 dcp
       where 1 = 1
         and dcp.lev1_code <> dcp.lev2_code
         and fcs.project = dcp.lev2_code
         and fcs.period_name = l_period_name
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                dcp.lev1_code, --项目
                fcs.actual_quantity,
                fcs.scenario_quantity;
    commit;
    --LEV1->LEV0
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT, --产品
             dcp.lev0_code project, --项目
             fcs.actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             fcs.scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_cost_project_lev1 dcp
       where 1 = 1
         and dcp.lev0_code <> dcp.lev1_code
         and fcs.project = dcp.lev1_code
         and fcs.period_name = l_period_name
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                dcp.lev0_code, --项目
                fcs.actual_quantity,
                fcs.scenario_quantity;
    commit;
    --
  
    --摊分 的新瓶和旧瓶的产量 START
    for i in (select *
                from (select fcs.PERIOD_NAME,
                             fcs.ENTITY_CODE,
                             fcs.SCENARIO_CODE,
                             fcs.CONCENTRATION, --浓度
                             fcs.BRAND, --品牌
                             fcs.PACK, --产品包装
                             fcs.VOLUME, --容量
                             fcs.SPECIFICATIONS, --规格
                             fcs.CONTAINER, --容器
                             fcs.OPERATION, --操作方式
                             fcs.PRODUCT,
                             dcp.lev4_code PROJECT,
                             fcs.actual_quantity,
                             sum(fcs.actual_quantity_all) actual_quantity_all,
                             sum(fcs.actual_amount_all) actual_amount_all,
                             fcs.scenario_quantity,
                             sum(fcs.scenario_quantity_all) scenario_quantity_all,
                             sum(fcs.scenario_amount_all) scenario_amount_all
                        from FACT_DM_PRODUCT_DATA_CALC fcs,
                             dim_dm_cost_project       dcp
                       where 1 = 1
                         and fcs.period_name = p_period_name
                         and fcs.project = dcp.lev5_code
                         and dcp.lev4_code = 'L415'
                         and dcp.lev5_code <> dcp.lev4_code
                       group by fcs.PERIOD_NAME,
                                fcs.ENTITY_CODE,
                                fcs.SCENARIO_CODE,
                                fcs.CONCENTRATION, --浓度
                                fcs.BRAND, --品牌
                                fcs.PACK, --产品包装
                                fcs.VOLUME, --容量
                                fcs.SPECIFICATIONS, --规格
                                fcs.CONTAINER, --容器
                                fcs.OPERATION, --操作方式
                                fcs.PRODUCT,
                                dcp.lev4_code,
                                fcs.actual_quantity,
                                fcs.scenario_quantity) tt
               where 1 = 1
                 and (tt.actual_quantity_all <> 0 or
                     tt.actual_amount_all <> 0 or
                     tt.scenario_quantity_all <> 0or
                      tt.scenario_amount_all <> 0)) loop
      l_l420_quantity_actual := 0; --新瓶的数量 实际
      l_l420_quantity_sync   := 0; --新瓶的数量 场景
      l_l430_quantity_actual := 0; --旧瓶的数量 实际
      l_l430_quantity_sync   := 0; --旧瓶的数量 场景
      for j in (select fcs.PERIOD_NAME,
                       fcs.ENTITY_CODE,
                       fcs.SCENARIO_CODE,
                       fcs.CONCENTRATION, --浓度
                       fcs.BRAND, --品牌
                       fcs.PACK, --产品包装
                       fcs.VOLUME, --容量
                       fcs.SPECIFICATIONS, --规格
                       fcs.CONTAINER, --容器
                       fcs.OPERATION, --操作方式
                       fcs.PRODUCT,
                       dcp.lev5_code PROJECT,
                       fcs.actual_quantity,
                       sum(fcs.actual_quantity_all) actual_quantity_all,
                       sum(fcs.actual_amount_all) actual_amount_all,
                       fcs.scenario_quantity,
                       sum(fcs.scenario_quantity_all) scenario_quantity_all,
                       sum(fcs.scenario_amount_all) scenario_amount_all
                  from FACT_DM_PRODUCT_DATA_CALC fcs,
                       dim_dm_cost_project       dcp
                 where 1 = 1
                   and fcs.PERIOD_NAME = i.period_name
                   and fcs.ENTITY_CODE = i.entity_code
                   and fcs.SCENARIO_CODE = i.scenario_code
                   and fcs.CONCENTRATION = i.CONCENTRATION --浓度
                   and fcs.BRAND = i.BRAND --品牌
                   and fcs.PACK = i.PACK --产品包装
                   and fcs.VOLUME = i.VOLUME --容量
                   and fcs.SPECIFICATIONS = i.SPECIFICATIONS --规格
                   and fcs.CONTAINER = i.CONTAINER --容器
                   and fcs.OPERATION = i.OPERATION --操作方式
                   and fcs.PRODUCT = i.product
                   and fcs.project = dcp.lev5_code
                   and dcp.lev4_code = i.project
                   and dcp.lev5_code <> dcp.lev4_code
                 group by fcs.PERIOD_NAME,
                          fcs.ENTITY_CODE,
                          fcs.SCENARIO_CODE,
                          fcs.CONCENTRATION, --浓度
                          fcs.BRAND, --品牌
                          fcs.PACK, --产品包装
                          fcs.VOLUME, --容量
                          fcs.SPECIFICATIONS, --规格
                          fcs.CONTAINER, --容器
                          fcs.OPERATION, --操作方式
                          fcs.PRODUCT,
                          dcp.lev5_code,
                          fcs.actual_quantity,
                          fcs.scenario_quantity
                 order by fcs.PERIOD_NAME,
                          fcs.ENTITY_CODE,
                          fcs.SCENARIO_CODE,
                          fcs.CONCENTRATION, --浓度
                          fcs.BRAND, --品牌
                          fcs.PACK, --产品包装
                          fcs.VOLUME, --容量
                          fcs.SPECIFICATIONS, --规格
                          fcs.CONTAINER, --容器
                          fcs.OPERATION, --操作方式
                          fcs.PRODUCT,
                          dcp.lev5_code) loop
        if (j.project = 'L420') then
          --新瓶
          if (i.actual_quantity_all <> 0) then
            l_l420_quantity_actual := nvl(i.actual_quantity *
                                          (j.actual_quantity_all /
                                          i.actual_quantity_all),
                                          0); --新瓶的数量 实际
          else
            l_l420_quantity_actual := 0; --新瓶的数量 实际
          end if;
          --
          if (i.scenario_quantity_all <> 0) then
            l_l420_quantity_sync := nvl(i.scenario_quantity *
                                        (j.scenario_quantity_all /
                                        i.scenario_quantity_all),
                                        0); --新瓶的数量 场景
          else
            l_l420_quantity_sync := 0; --新瓶的数量 场景
          end if;
          update FACT_DM_PRODUCT_DATA_CALC fcs
             set fcs.actual_quantity   = l_l420_quantity_actual,
                 fcs.scenario_quantity = l_l420_quantity_sync
           where 1 = 1
             and fcs.PERIOD_NAME = j.period_name
             and fcs.ENTITY_CODE = j.entity_code
             and fcs.SCENARIO_CODE = j.scenario_code
             and fcs.CONCENTRATION = j.CONCENTRATION --浓度
             and fcs.BRAND = j.BRAND --品牌
             and fcs.PACK = j.PACK --产品包装
             and fcs.VOLUME = j.VOLUME --容量
             and fcs.SPECIFICATIONS = j.SPECIFICATIONS --规格
             and fcs.CONTAINER = j.CONTAINER --容器
             and fcs.OPERATION = j.OPERATION --操作方式
             and fcs.PRODUCT = j.product
             and fcs.project = j.project;
        else
          l_l430_quantity_actual := nvl(i.actual_quantity, 0) -
                                    l_l420_quantity_actual; --旧瓶的数量 实际
          l_l430_quantity_sync   := nvl(i.scenario_quantity, 0) -
                                    l_l420_quantity_sync; --旧瓶的数量 场景
          update FACT_DM_PRODUCT_DATA_CALC fcs
             set fcs.actual_quantity   = l_l430_quantity_actual,
                 fcs.scenario_quantity = l_l430_quantity_sync
           where 1 = 1
             and fcs.PERIOD_NAME = j.period_name
             and fcs.ENTITY_CODE = j.entity_code
             and fcs.SCENARIO_CODE = j.scenario_code
             and fcs.CONCENTRATION = j.CONCENTRATION --浓度
             and fcs.BRAND = j.BRAND --品牌
             and fcs.PACK = j.PACK --产品包装
             and fcs.VOLUME = j.VOLUME --容量
             and fcs.SPECIFICATIONS = j.SPECIFICATIONS --规格
             and fcs.CONTAINER = j.CONTAINER --容器
             and fcs.OPERATION = j.OPERATION --操作方式
             and fcs.PRODUCT = j.product
             and fcs.project = j.project;
        end if;
      end loop;
    end loop;
    commit;
    --摊分 的新瓶和旧瓶的产量 END 
  
    --非酿制材料，无消耗时，不计算产量 START
    --实际产量
    update FACT_DM_PRODUCT_DATA_CALC fcs
       set fcs.actual_quantity = 0
     where 1 = 1
       and nvl(fcs.actual_amount_all, 0) = 0
       and nvl(fcs.actual_quantity_all, 0) = 0
       and nvl(fcs.actual_quantity, 0) <> 0
       and fcs.product <> 'T'
       and fcs.project > 'L250'
       and fcs.project NOT IN ('T', 'L520', 'L530')
       and fcs.period_name = p_period_name;
    commit;
    --场景产量
    update FACT_DM_PRODUCT_DATA_CALC fcs
       set fcs.scenario_quantity = 0
     where 1 = 1
       and nvl(fcs.scenario_quantity_all, 0) = 0
       and nvl(fcs.scenario_amount_all, 0) = 0
       and nvl(fcs.scenario_quantity, 0) <> 0
       and fcs.product <> 'T'
       and fcs.project > 'L250'
       and fcs.project NOT IN ('T', 'L520', 'L530')
       and fcs.period_name = p_period_name;
    commit;
    --非酿制材料，无消耗时，不计算产量 END
  
    -- 清除金额都为零的垃圾数据
    delete from FACT_DM_PRODUCT_DATA_CALC fcs
     where 1 = 1
       and nvl(fcs.actual_quantity, 0) = 0
       and nvl(fcs.ACTUAL_QUANTITY_ALL, 0) = 0
       and nvl(fcs.ACTUAL_AMOUNT_ALL, 0) = 0
       and nvl(fcs.SCENARIO_QUANTITY, 0) = 0
       and nvl(fcs.SCENARIO_QUANTITY_ALL, 0) = 0
       and nvl(fcs.SCENARIO_AMOUNT_ALL, 0) = 0
       and fcs.period_name = p_period_name;
    commit;
    --产品汇总 id->T
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             'T' PRODUCT, --产品
             fcs.project, --项目
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs
       where 1 = 1
         and fcs.period_name = l_period_name
         and fcs.product <> 'T'
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.project; --项目
    commit;
    --实体汇总 汇总至成本父实体
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             de.cost_parent_code ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT,
             fcs.project, --项目
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_entities de
       where 1 = 1
         and fcs.period_name = l_period_name
         and fcs.entity_code = de.entity_code
         and de.entity_code <> de.cost_parent_code
       group by fcs.PERIOD_NAME,
                de.cost_parent_code,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                fcs.project;
    commit;
    --        
    --实体汇总 汇总至 汇总实体
    insert into FACT_DM_PRODUCT_DATA_CALC
      select fcs.PERIOD_NAME,
             de.parent_code ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT,
             fcs.project, --项目
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from FACT_DM_PRODUCT_DATA_CALC fcs, dim_dm_entities_cost_cp_v de
       where 1 = 1
         and fcs.period_name = l_period_name
         and fcs.entity_code = de.cost_parent_code
         and de.cost_parent_code <> de.parent_code
       group by fcs.PERIOD_NAME,
                de.parent_code,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                fcs.project;
    commit;
  
    --计算YTD的值
    insert into FACT_DM_PRODUCT_DATA_CALC
      select l_period_name PERIOD_NAME,
             fcs.ENTITY_CODE,
             (decode(fcs.scenario_code,
                     'TARGET_A',
                     'TARGET_A_YTD',
                     'TARGET_B',
                     'TARGET_B_YTD',
                     'SYNC',
                     'SYNC_YTD',
                     'BUDGET',
                     'BUDGET_YTD',
                     'ERROR')) SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT,
             fcs.project, --项目
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all
        from (select *
                from FACT_DM_PRODUCT_DATA FDP
               where 1 = 1
                 and FDP.scenario_code in
                     ('TARGET_A', 'TARGET_B', 'SYNC', 'BUDGET')
                 and substr(FDP.period_name, 1, 4) =
                     substr(l_period_name, 1, 4)
                 and FDP.period_name < l_period_name
              union all
              select *
                from FACT_DM_PRODUCT_DATA_CALC FDC
               where 1 = 1
                 and FDC.scenario_code in
                     ('TARGET_A', 'TARGET_B', 'SYNC', 'BUDGET')) fcs --
       where 1 = 1
       group by fcs.ENTITY_CODE,
                (decode(fcs.scenario_code,
                        'TARGET_A',
                        'TARGET_A_YTD',
                        'TARGET_B',
                        'TARGET_B_YTD',
                        'SYNC',
                        'SYNC_YTD',
                        'BUDGET',
                        'BUDGET_YTD',
                        'ERROR')),
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                fcs.project; --项目
  
    commit;
    return l_msg_data;
  exception
    when others then
      l_msg_data := '过程calc_output_data错误,sqlcode:' || sqlcode ||
                    ';sqlerrm:' || sqlerrm;
      return l_msg_data;
  end calc_output_data;

  /*
  *处理成本数据
  */
  function calc_cost_data(p_period_name varchar2) return varchar2 is
    l_msg_data varchar2(3000) := 'success';
  begin
    --插入酿造材料的数据
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             fpd.CONCENTRATION, --浓度
             fpd.BRAND, --品牌
             'T' PACK, --产品包装
             'T' VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             'T' CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project <> 'L200'
         and fpd.project <= 'L250'
         and fpd.project >= 'L035'
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.CONCENTRATION, --浓度
                fpd.BRAND, --品牌
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --能源
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             'T' PACK, --产品包装
             'T' VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             'T' CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project <= 'L310'
         and fpd.project >= 'L270'
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --纸箱/隔板
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             'T' PACK, --产品包装
             fpd.VOLUME, --容量
             fpd.SPECIFICATIONS, --规格
             'T' CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project <> 'L380'
         and fpd.project <= 'L390'
         and fpd.project >= 'L330'
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.VOLUME, --容量
                fpd.SPECIFICATIONS, --规格
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --塑膜(千克) 
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             fpd.PACK, --产品包装
             'T' VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             'T' CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project = 'L380'
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.PACK, --产品包装
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --易拉罐
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             'T' PACK, --产品包装
             fpd.VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             fpd.CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project in ('L400', 'L410')
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.VOLUME, --容量
                fpd.CONTAINER, --容器
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --瓶子
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             'T' PACK, --产品包装
             fpd.VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             fpd.CONTAINER, --容器
             fpd.OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project in ('L415', 'L420', 'L430')
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.VOLUME, --容量
                fpd.CONTAINER, --容器
                fpd.OPERATION, --操作方式
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --瓶盖商标
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             'T' PACK, --产品包装
             fpd.VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             fpd.CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project <= 'L480'
         and fpd.project >= 'L440'
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.VOLUME, --容量
                fpd.CONTAINER, --容器
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --材料费用
    insert into FACT_DM_COST_DATA_CALC fdc
      select fpd.PERIOD_NAME, --期间
             fpd.ENTITY_CODE, --实体
             fpd.SCENARIO_CODE, --场景
             'T' CONCENTRATION, --浓度
             'T' BRAND, --品牌
             'T' PACK, --产品包装
             'T' VOLUME, --容量
             'T' SPECIFICATIONS, --规格
             'T' CONTAINER, --容器
             'T' OPERATION, --操作方式
             fpd.PRODUCT, --产品
             fpd.PROJECT, --项目
             sum(fpd.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             sum(fpd.ACTUAL_QUANTITY_ALL) ACTUAL_QUANTITY_ALL,
             sum(fpd.ACTUAL_AMOUNT_ALL) ACTUAL_AMOUNT_ALL,
             sum(fpd.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             sum(fpd.SCENARIO_QUANTITY_ALL) SCENARIO_QUANTITY_ALL,
             sum(fpd.SCENARIO_AMOUNT_ALL) SCENARIO_AMOUNT_ALL,
             '' CONSUME_DIFF,
             '' PRICE_DIFF,
             '' QUANTITY_DIFF,
             '' OTHER_DIFF,
             '' NOFACTOR_DIFF
        from FACT_DM_PRODUCT_DATA_CALC fpd
       where 1 = 1
         and fpd.project <= 'L530'
         and fpd.project >= 'L490'
         and fpd.period_name = p_period_name
       group by fpd.PERIOD_NAME, --期间
                fpd.ENTITY_CODE, --实体
                fpd.SCENARIO_CODE, --场景
                fpd.PRODUCT, --产品
                fpd.PROJECT; --项目
    commit;
    --
    return l_msg_data;
  
  exception
    when others then
      l_msg_data := '过程calc_cost_data错误,sqlcode:' || sqlcode || ';sqlerrm:' ||
                    sqlerrm;
      return l_msg_data;
  end calc_cost_data;
  /*
  *计算成本差异
  */
  function calc_diff_data(p_period_name varchar2) return varchar2 is
    l_msg_data varchar2(3000) := 'success';
    --
    l_actual_uc   number := 0; --实际单耗
    l_actual_up   number := 0; --实际单价
    l_scenario_uc number := 0; --场景单耗
    l_scenario_up number := 0; --场景单价
    l_uc_diff     number := 0; --单耗差异
    l_up_diff     number := 0; --单价差异
    --    
    l_consume_diff  number; --消耗差异
    l_price_diff    number; --单价差异
    l_quantity_diff number; --产量差异
    l_other_diff    number; --其他差异
    l_nofactor_diff NUMBER; --不可比因素
  begin
    --处理辅助材料的成本
  
    --计算成本差异
    for i in (select *
                from FACT_DM_COST_DATA_CALC fcs
               where 1 = 1
                 and fcs.period_name = p_period_name) loop
      --
      if (nvl(i.actual_quantity, 0) <> 0) then
        l_actual_uc := i.actual_quantity_all / i.actual_quantity; --实际单耗      
      else
        l_actual_uc := 0; --实际单耗
      end if;
      --
      if (nvl(i.actual_quantity_all, 0) <> 0) then
        l_actual_up := i.actual_amount_all / i.actual_quantity_all; --实际单价      
      else
        l_actual_up := 0; --实际单价
      end if;
      --
    
      if (nvl(i.scenario_quantity, 0) <> 0) then
        l_scenario_uc := i.scenario_quantity_all / i.scenario_quantity; --场景单耗      
      else
        l_scenario_uc := 0; --场景单耗
      end if;
      --
      if (nvl(i.scenario_quantity_all, 0) <> 0) then
        l_scenario_up := i.scenario_amount_all / i.scenario_quantity_all; --场景单价      
      else
        l_scenario_up := 0; --场景单价
      end if;
      l_uc_diff := nvl(l_actual_uc, 0) - nvl(l_scenario_uc, 0); --单耗差异
      l_up_diff := nvl(l_actual_up, 0) - nvl(l_scenario_up, 0); --单价差异
      --消耗差异
      if (nvl(i.actual_amount_all, 0) <> 0 and
         nvl(i.scenario_amount_all, 0) <> 0) then
        l_consume_diff := l_uc_diff * i.actual_quantity * l_scenario_up;
      else
        l_consume_diff := 0;
      end if;
      --单价差异
      if (nvl(i.actual_amount_all, 0) <> 0 and
         nvl(i.scenario_amount_all, 0) <> 0) then
        l_price_diff := l_up_diff * i.actual_quantity * l_actual_uc;
      else
        l_price_diff := 0;
      end if;
    
      --产量差异    
      if (nvl(i.actual_amount_all, 0) <> 0 and
         nvl(i.scenario_amount_all, 0) <> 0) then
        l_quantity_diff := (nvl(i.actual_quantity, 0) -
                           nvl(i.scenario_quantity, 0)) * l_scenario_uc *
                           l_scenario_up;
      else
        l_quantity_diff := 0;
      end if;
      --其他差异
      if (nvl(i.actual_amount_all, 0) <> 0 and
         nvl(i.scenario_amount_all, 0) <> 0 and
         nvl(i.actual_quantity_all, 0) = 0 and
         nvl(i.scenario_quantity_all, 0) = 0) then
      
        l_other_diff := nvl(i.actual_amount_all, 0) -
                        nvl(i.scenario_amount_all, 0);
      else
        l_other_diff := 0;
      end if;
    
      --不可比因素
      if (nvl(i.actual_amount_all, 0) = 0 or
         nvl(i.scenario_amount_all, 0) = 0) then
      
        l_nofactor_diff := nvl(i.actual_amount_all, 0) -
                           nvl(i.scenario_amount_all, 0);
      else
        l_nofactor_diff := 0;
      end if;
      --更新成本差异数据
      update FACT_DM_COST_DATA_CALC fdc
         set fdc.consume_diff  = l_consume_diff,
             fdc.price_diff    = l_price_diff,
             fdc.quantity_diff = l_quantity_diff,
             fdc.other_diff    = l_other_diff,
             fdc.nofactor_diff = l_nofactor_diff
       where 1 = 1
         and fdc.period_name = i.period_name
         and fdc.entity_code = i.entity_code
         and fdc.scenario_code = i.scenario_code
         and fdc.CONCENTRATION = i.CONCENTRATION --浓度
         and fdc.BRAND = i.BRAND --品牌
         and fdc.PACK = i.PACK --产品包装
         and fdc.VOLUME = i.VOLUME --容量
         and fdc.SPECIFICATIONS = i.SPECIFICATIONS --规格
         and fdc.CONTAINER = i.CONTAINER --容器
         and fdc.OPERATION = i. OPERATION --操作方式            
         and fdc.product = i.product
         and fdc.project = i.project;
    end loop;
    --
    commit;
    return l_msg_data;
  exception
    when others then
      l_msg_data := '过程calc_diff_data错误,sqlcode:' || sqlcode || ';sqlerrm:' ||
                    sqlerrm;
      return l_msg_data;
  end calc_diff_data;

  /*
  *处理 3级以上汇总项目的 成本差异
  */
  function add_project_data(p_period_name varchar2) return varchar2 is
    l_msg_data varchar2(3000) := 'success';
  begin
    --成本项目--3级->2级
    insert into FACT_DM_COST_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT,
             dcp.lev2_code PROJECT,
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all,
             sum(fcs.CONSUME_DIFF) CONSUME_DIFF,
             sum(fcs.PRICE_DIFF) PRICE_DIFF,
             sum(fcs.QUANTITY_DIFF) QUANTITY_DIFF,
             sum(fcs.OTHER_DIFF) OTHER_DIFF,
             sum(fcs.NOFACTOR_DIFF) NOFACTOR_DIFF
        from FACT_DM_COST_DATA_CALC fcs, dim_dm_cost_project_lev3 dcp
       where 1 = 1
         and fcs.product = 'T'
         and fcs.period_name = p_period_name
         and fcs.project = dcp.lev3_code
         and dcp.lev3_code <> dcp.lev2_code
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                dcp.lev2_code;
    commit;
    --
  
    --成本项目--2级->1级
    insert into FACT_DM_COST_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT,
             dcp.lev1_code PROJECT,
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all,
             sum(fcs.CONSUME_DIFF) CONSUME_DIFF,
             sum(fcs.PRICE_DIFF) PRICE_DIFF,
             sum(fcs.QUANTITY_DIFF) QUANTITY_DIFF,
             sum(fcs.OTHER_DIFF) OTHER_DIFF,
             sum(fcs.NOFACTOR_DIFF) NOFACTOR_DIFF
        from FACT_DM_COST_DATA_CALC fcs, dim_dm_cost_project_lev2 dcp
       where 1 = 1
         and fcs.product = 'T'
         and fcs.period_name = p_period_name
         and fcs.project = dcp.lev2_code
         and dcp.lev2_code <> dcp.lev1_code
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                dcp.lev1_code;
    commit;
    --
  
    --成本项目--1级->0级
    insert into FACT_DM_COST_DATA_CALC
      select fcs.PERIOD_NAME,
             fcs.ENTITY_CODE,
             fcs.SCENARIO_CODE,
             fcs.CONCENTRATION, --浓度
             fcs.BRAND, --品牌
             fcs.PACK, --产品包装
             fcs.VOLUME, --容量
             fcs.SPECIFICATIONS, --规格
             fcs.CONTAINER, --容器
             fcs.OPERATION, --操作方式
             fcs.PRODUCT,
             dcp.lev0_code PROJECT,
             sum(fcs.actual_quantity) actual_quantity,
             sum(fcs.actual_quantity_all) actual_quantity_all,
             sum(fcs.actual_amount_all) actual_amount_all,
             sum(fcs.scenario_quantity) scenario_quantity,
             sum(fcs.scenario_quantity_all) scenario_quantity_all,
             sum(fcs.scenario_amount_all) scenario_amount_all,
             sum(fcs.CONSUME_DIFF) CONSUME_DIFF,
             sum(fcs.PRICE_DIFF) PRICE_DIFF,
             sum(fcs.QUANTITY_DIFF) QUANTITY_DIFF,
             sum(fcs.OTHER_DIFF) OTHER_DIFF,
             sum(fcs.NOFACTOR_DIFF) NOFACTOR_DIFF
        from FACT_DM_COST_DATA_CALC fcs, dim_dm_cost_project_lev1 dcp
       where 1 = 1
         and fcs.product = 'T'
         and fcs.period_name = p_period_name
         and fcs.project = dcp.lev1_code
         and dcp.lev0_code <> dcp.lev1_code
       group by fcs.PERIOD_NAME,
                fcs.ENTITY_CODE,
                fcs.SCENARIO_CODE,
                fcs.CONCENTRATION, --浓度
                fcs.BRAND, --品牌
                fcs.PACK, --产品包装
                fcs.VOLUME, --容量
                fcs.SPECIFICATIONS, --规格
                fcs.CONTAINER, --容器
                fcs.OPERATION, --操作方式
                fcs.PRODUCT,
                dcp.lev0_code;
    commit;
    --
    return l_msg_data;
  exception
    when others then
      l_msg_data := '过程add_project_data错误,sqlcode:' || sqlcode ||
                    ';sqlerrm:' || sqlerrm;
      return l_msg_data;
  end add_project_data;
  /*
  *将数据写入到正式表中
  */
  function load_data(p_period_name varchar2) return varchar2 is
    l_msg_data varchar2(3000) := 'success';
  begin
    --清除数据
    delete from FACT_DM_PRODUCT_DATA dcs
     where 1 = 1
       and dcs.period_name = p_period_name;
    commit;
    --
    delete from FACT_DM_COST_DATA dcs
     where 1 = 1
       and dcs.period_name = p_period_name;
    commit;
    --写入数据
    insert into FACT_DM_PRODUCT_DATA
      select * from FACT_DM_PRODUCT_DATA_CALC;
    commit;
    insert into FACT_DM_COST_DATA
      select * from FACT_DM_COST_DATA_CALC;
    commit;
    return l_msg_data;
  exception
    when others then
      l_msg_data := '过程load_data错误,sqlcode:' || sqlcode || ';sqlerrm:' ||
                    sqlerrm;
      return l_msg_data;
  end load_data;
  /*
  *检查物料属性是否完整
  */
  function check_product return varchar2 is
    l_msg_data varchar2(3000) := 'success';
  begin
    --检查品牌属性
    for i in (select dp.cost_brand,
                     '品牌代码-' || dp.center_serial_detail ||
                     '-未维护到成本品牌维度里，请信息技术部协助维护' error_msg
                from -- dm.dl_products dp
                dwstg.dl_products dp-- by dengj@besthelp 20130822 数据中心拆分
               where 1 = 1
                 and exists (select 1
                        from -- dm.dl_sale_cost_all dsc
                        dwstg.dl_sale_cost_all dsc-- by dengj@besthelp 20130822 数据中心拆分
                       where 1 = 1
                         and dsc.product_id = dp.product_id)
                 and not exists (select 1
                        from dim_dm_cost_brand dcb
                       where 1 = 1
                         and dcb.lev2_code = dp.cost_brand)
                 and dp.cost_brand is not null
              UNION
              select dp.cost_brand,
                     '品牌代码-' || dp.center_serial_detail ||
                     '-未维护到成本品牌维度里，请信息技术部协助维护' error_msg
                from -- dm.dl_products dp
                dwstg.dl_products dp
               where 1 = 1
                 and exists (select 1
                        from --hp.hp_data_tbcbys_cost hc
                        dwstg.hp_data_tbcbys_cost hc
                        -- by dengj@besthelp 20130822 数据中心拆分
                       where 1 = 1
                         and hc.product = 'P' || dp.product_code
                         and hc.material = 'M00'
                         and hc.department = 'D0103'
                         and hc.input = 'I00'
                         and hc.stage = 'ST0102'
                         and hc.spare = 'SP00'
                         and hc.account = 'A0501010000000000'
                         and hc.version = 'V02' --终稿
                            -- AND HC.PERIODS =  'Dec'
                         AND HC.SCENARIO = 'SC02'
                      --and hc.years = 'FY12'                      
                      )
                 and not exists (select 1
                        from dim_dm_cost_brand dcb
                       where 1 = 1
                         and dcb.lev2_code = dp.cost_brand)
                 and dp.cost_brand is not null) loop
      if (l_msg_data = 'success') then
        l_msg_data := i.error_msg || ';';
      else
        l_msg_data := l_msg_data || i.error_msg || ';';
      end if;
    end loop;
    --检查物料属性
    for i in (select dp.*
                from --  dm.dl_products dp
                dwstg.dl_products dp
                -- by dengj@besthelp 20130822 数据中心拆分

               where 1 = 1
                 and (dp.cost_brand is null or dp.cost_concentraiton is null or
                     dp.cost_PACK is null or dp.cost_VOLUME is null or
                     dp.cost_SPECIFICATIONS is null or
                     dp.cost_CONTAINER is null or dp.cost_OPERATION is null)
                 and exists
               (select 1
                        from -- dm.dl_sale_cost_all dsc
                        dwstg.dl_sale_cost_all dsc -- by dengj@besthelp 20130822 数据中心拆分

                       where 1 = 1
                         and dp.product_id = dsc.product_id)
              UNION
              select dp.*
                from --  dm.dl_products dp
                dwstg.dl_products dp -- by dengj@besthelp 20130822 数据中心拆分

               where 1 = 1
                 and (dp.cost_brand is null or dp.cost_concentraiton is null or
                     dp.cost_PACK is null or dp.cost_VOLUME is null or
                     dp.cost_SPECIFICATIONS is null or
                     dp.cost_CONTAINER is null or dp.cost_OPERATION is null)
                 and exists (select 1
                        from -- hp.hp_data_tbcbys_cost hc
                        dwstg.hp_data_tbcbys_cost hc -- by dengj@besthelp 20130822 数据中心拆分
                       where 1 = 1
                         and hc.product = 'P' || dp.product_code
                         and hc.material = 'M00'
                         and hc.department = 'D0103'
                         and hc.input = 'I00'
                         and hc.stage = 'ST0102'
                         and hc.spare = 'SP00'
                         and hc.account = 'A0501010000000000'
                         and hc.version = 'V02' --终稿
                            -- AND HC.PERIODS =  'Dec'
                         AND HC.SCENARIO = 'SC02'
                      --and hc.years = 'FY12'                      
                      )) loop
      if (l_msg_data = 'success') then
        l_msg_data := '错误信息：';
      end if;
      if (i.cost_brand is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code || '的品牌成本代码未维护;';
      end if;
      if (i.cost_concentraiton is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code || '的浓度成本代码未维护;';
      end if;
      if (i.cost_PACK is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code ||
                      '的外包装成本代码未维护;';
      end if;
      if (i.cost_VOLUME is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code || '的容量成本代码未维护;';
      end if;
      if (i.cost_SPECIFICATIONS is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code || '的规格成本代码未维护;';
      end if;
      if (i.cost_CONTAINER is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code || '的容器成本代码未维护;';
      end if;
      if (i.cost_OPERATION is null) then
        l_msg_data := l_msg_data || '物料' || i.product_code ||
                      '的操作方式成本代码未维护;';
      end if;
    end loop;
    return l_msg_data;
  exception
    when others then
      l_msg_data := '过程check_product错误,sqlcode:' || sqlcode || ';sqlerrm:' ||
                    sqlerrm;
      return l_msg_data;
  end check_product;

  /*
  *处理成本数据
  */
  procedure handle_period_data(p_period_name varchar2) is
    l_msg_data varchar2(3000) := 'success';
  begin
    --检查数据
    l_msg_data := check_product;
    if (l_msg_data <> 'success') then
      raise_application_error(-20001, l_msg_data);
    end if;
    --清除中间表的数据
    execute immediate 'truncate table FACT_DM_PRODUCT_QUANTITY_CALC';
    execute immediate 'truncate table FACT_DM_PRODUCT_AMOUNT_CALC';
    execute immediate 'truncate table FACT_DM_PRODUCT_DATA_CALC1';
    execute immediate 'truncate table FACT_DM_PRODUCT_DATA_CALC';
    execute immediate 'truncate table FACT_DM_COST_DATA_CALC';
    --dbms_output.put_line('1:' || to_char(sysdate, 'YYYY-MM-DD HH:MI:SS'));
    --处理的 本月产量/总数据/总金额等数据
  
    l_msg_data := calc_output_data(p_period_name);
    --dbms_output.put_line('2:' || to_char(sysdate, 'YYYY-MM-DD HH:MI:SS'));
    --处理的 计算成本差异的数据
    l_msg_data := calc_cost_data(p_period_name);
    if (l_msg_data <> 'success') then
      raise_application_error(-20001, l_msg_data);
    end if;
    --dbms_output.put_line('3:' || to_char(sysdate, 'YYYY-MM-DD HH:MI:SS'));
    --处理的 计算成本差异 
    l_msg_data := calc_diff_data(p_period_name);
    if (l_msg_data <> 'success') then
      raise_application_error(-20001, l_msg_data);
    end if;
    --dbms_output.put_line('4:' || to_char(sysdate, 'YYYY-MM-DD HH:MI:SS'));
    --处理的 将成本差异汇总 从成本项目汇总至顶层
    l_msg_data := add_project_data(p_period_name);
    if (l_msg_data <> 'success') then
      raise_application_error(-20001, l_msg_data);
    end if;
    --dbms_output.put_line('5:' || to_char(sysdate, 'YYYY-MM-DD HH:MI:SS'));
    --将数据写入到正式表
    l_msg_data := load_data(p_period_name);
    if (l_msg_data <> 'success') then
      raise_application_error(-20001, l_msg_data);
    end if;
    --dbms_output.put_line('6:' || to_char(sysdate, 'YYYY-MM-DD HH:MI:SS'));
  
    --清除中间表的数据
    execute immediate 'truncate table FACT_DM_PRODUCT_QUANTITY_CALC';
    execute immediate 'truncate table FACT_DM_PRODUCT_AMOUNT_CALC';
    execute immediate 'truncate table FACT_DM_PRODUCT_DATA_CALC1';
    execute immediate 'truncate table FACT_DM_PRODUCT_DATA_CALC';
    execute immediate 'truncate table FACT_DM_COST_DATA_CALC';
  exception
    when others then
      l_msg_data := '过程handle_period_data错误,sqlcode:' || sqlcode ||
                    ';sqlerrm:' || sqlerrm;
      raise_application_error(-20001, l_msg_data);
  end handle_period_data;

end DW_DM_SALE_COST_ETL_PKG;
/

prompt
prompt Creating package body DW_HFM_CALCULATE_ACCOUNT
prompt ==============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_hfm_calculate_account IS

  PROCEDURE insert_data(p_data       IN NUMBER,
                        p_year_id    IN NUMBER,
                        p_period_id  IN NUMBER,
                        p_entity_id  IN NUMBER,
                        p_account_id IN NUMBER) IS
  BEGIN
    INSERT INTO fact_performance_data
      (yearid, periodid, entityid, accountid, actual_ddata)
    VALUES
      (p_year_id, p_period_id, p_entity_id, p_account_id, p_data);
  END insert_data;

  FUNCTION get_fzzb1(p_fzzb1 IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF p_fzzb1 = 'FZZB101' THEN
      RETURN fzzb101;
    ELSIF p_fzzb1 = 'FZZB102' THEN
      RETURN fzzb102;
    ELSIF p_fzzb1 = 'FZZB103' THEN
      RETURN fzzb103;
    ELSIF p_fzzb1 = 'FZZB104' THEN
      RETURN fzzb104;
    ELSIF p_fzzb1 = 'FZZB105' THEN
      RETURN fzzb105;
    ELSIF p_fzzb1 = 'FZZB106' THEN
      RETURN fzzb106;
    ELSIF p_fzzb1 = 'FZZB107' THEN
      RETURN fzzb107;
    ELSIF p_fzzb1 = 'FZZB108' THEN
      RETURN fzzb108;
    ELSIF p_fzzb1 = 'FZZB109' THEN
      RETURN fzzb109;
    ELSIF p_fzzb1 = 'FZZB110' THEN
      RETURN fzzb110;
    ELSIF p_fzzb1 = 'FZZB111' THEN
      RETURN fzzb111;
    ELSIF p_fzzb1 = 'FZZB112' THEN
      RETURN fzzb112;
    ELSIF p_fzzb1 = 'FZZB113' THEN
      RETURN fzzb113;
    ELSIF p_fzzb1 = 'FZZB114' THEN
      RETURN fzzb114;
    ELSIF p_fzzb1 = 'FZZB115' THEN
      RETURN fzzb115;
    ELSIF p_fzzb1 = 'FZZB116' THEN
      RETURN fzzb116;
    ELSIF p_fzzb1 = 'FZZB117' THEN
      RETURN fzzb117;
    ELSIF p_fzzb1 = 'FZZB118' THEN
      RETURN fzzb118;
    ELSIF p_fzzb1 = 'FZZB119' THEN
      RETURN fzzb119;
    ELSIF p_fzzb1 = 'FZZB120' THEN
      RETURN fzzb120;
    END IF;
  END get_fzzb1;
  FUNCTION get_account_id(p_account_label IN VARCHAR2) RETURN NUMBER IS
    x_account_id NUMBER;
  BEGIN
    SELECT a.id
      INTO x_account_id
      FROM dim_performance_account a
     WHERE a.label = p_account_label;
    RETURN x_account_id;
  END get_account_id;

  FUNCTION get_data(p_account IN VARCHAR2,
                    p_entity  IN VARCHAR2,
                    p_year    IN VARCHAR2,
                    p_period  IN VARCHAR2) RETURN NUMBER IS
    x_result NUMBER;
  BEGIN
    SELECT f.ddata
      INTO x_result
      FROM fact_per_input_mv f
     WHERE f.account_label = p_account
       AND f.entity_label = p_entity
       AND f.year_label = p_year
       AND f.period_label = p_period;
    RETURN x_result;
  EXCEPTION
    WHEN no_data_found THEN
      x_result := NULL;
      RETURN x_result;
    WHEN too_many_rows THEN
      x_result := NULL;
      RETURN x_result;
    WHEN OTHERS THEN
      x_result := NULL;
      RETURN x_result;
  END get_data;

  FUNCTION get_temp_data(p_account IN VARCHAR2,
                         p_entity  IN VARCHAR2,
                         p_year    IN VARCHAR2,
                         p_period  IN VARCHAR2) RETURN NUMBER IS
    x_result NUMBER;
  BEGIN
    SELECT DISTINCT f.actual_ddata
      INTO x_result
      FROM fact_performance_data   f,
           dim_performance_account a,
         --  stgs.tbhfm_entity       e,
           dim_hfm_year            y,
          -- stgs.tbhfm_period       p
          dwstg.TBHFM_ENTITY e,
          dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分

     WHERE f.accountid = a.id
       AND f.entityid = e.id
       AND f.yearid = y.id
       AND f.periodid = p.id
       AND a.label = p_account
       AND e.label = p_entity
       AND y.label = p_year
       AND p.label = p_period;
    RETURN x_result;
  EXCEPTION
    WHEN no_data_found THEN
      x_result := NULL;
      RETURN x_result;
    WHEN too_many_rows THEN
      x_result := NULL;
      RETURN x_result;
    WHEN OTHERS THEN
      x_result := NULL;
      RETURN x_result;
  END get_temp_data;

  FUNCTION performance_div(p_numerator_label   IN VARCHAR2,
                           p_denominator_label IN VARCHAR2,
                           p_target_label      IN VARCHAR2,
                           p_entity_label      IN VARCHAR2,
                           p_year_label        IN VARCHAR2,
                           p_period_label      IN VARCHAR2) RETURN NUMBER IS
    l_account_id NUMBER;
    l_entity_id  NUMBER;
    l_year_id    NUMBER;
    l_period_id  NUMBER;
    l_data_temp1 NUMBER;
    l_data_temp2 NUMBER;
    l_data_temp3 NUMBER;
  BEGIN
    SELECT a.id
      INTO l_account_id
      FROM dim_performance_account a
     WHERE a.label = p_target_label;
    SELECT y.id
      INTO l_year_id
      FROM dim_hfm_year y
     WHERE y.label = p_year_label;
    SELECT p.id
      INTO l_period_id
      FROM --stgs.tbhfm_period p
        dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.label = p_period_label;
    SELECT DISTINCT e.id
      INTO l_entity_id
      FROM -- stgs.tbhfm_entity e
      dwstg.TBHFM_ENTITY e -- by dengj@besthelp 20130822 数据中心拆分
     WHERE e.label = p_entity_label;
    IF substr(p_numerator_label, 1, 5) = 'FZZB1' THEN
      --L_DATA_TEMP1 := GET_TEMP_DATA(P_numerator_LABEL,P_ENTITY_LABEL,P_YEAR_LABEL,P_PERIOD_LABEL); 
      l_data_temp1 := get_fzzb1(p_numerator_label);
    ELSE
      l_data_temp1 := get_data(p_numerator_label,
                               p_entity_label,
                               p_year_label,
                               p_period_label);
    END IF;
    IF substr(p_denominator_label, 1, 5) = 'FZZB1' THEN
      --L_DATA_TEMP2 := GET_TEMP_DATA(P_denominator_LABEL,P_ENTITY_LABEL,P_YEAR_LABEL,P_PERIOD_LABEL);
      l_data_temp2 := get_fzzb1(p_denominator_label);
    ELSE
      l_data_temp2 := get_data(p_denominator_label,
                               p_entity_label,
                               p_year_label,
                               p_period_label);
    END IF;
    IF (l_data_temp2 IS NULL OR l_data_temp2 = 0) THEN
      l_data_temp3 := NULL;
    ELSIF (l_data_temp1 IS NULL) THEN
      l_data_temp3 := 0;
    ELSE
      l_data_temp3 := l_data_temp1 / l_data_temp2;
    END IF;
    insert_data(l_data_temp3,
                l_year_id,
                l_period_id,
                l_entity_id,
                l_account_id);
    RETURN l_data_temp3;
  END performance_div;

  FUNCTION data_div(p_numerator_data   IN NUMBER,
                    p_denominator_data IN NUMBER,
                    p_year_id          IN NUMBER,
                    p_period_id        IN NUMBER,
                    p_entity_id        IN NUMBER,
                    p_account_id       IN NUMBER) RETURN NUMBER IS
    l_data_temp NUMBER;
  BEGIN
    IF (p_denominator_data IS NULL OR p_denominator_data = 0) THEN
      l_data_temp := NULL;
    ELSIF (p_numerator_data IS NULL) THEN
      l_data_temp := 0;
    ELSE
      l_data_temp := p_numerator_data / p_denominator_data;
    END IF;
    insert_data(l_data_temp,
                p_year_id,
                p_period_id,
                p_entity_id,
                p_account_id);
    RETURN l_data_temp;
  END data_div;

  --59.FZZB103=(上年末CN06000100/2+期间各月CN06000100之和+本期CN06000100/2)/期间数
  FUNCTION type59(p_source_label IN VARCHAR2,
                  p_target_label IN VARCHAR2,
                  p_year_label   IN VARCHAR2,
                  p_period_label IN VARCHAR2,
                  p_entity_label IN VARCHAR2) RETURN NUMBER IS
    l_source_account_id NUMBER;
    l_target_account_id NUMBER;
    l_entity_id         NUMBER;
    l_year_id           NUMBER;
    l_period_id         NUMBER;
    l_first_period_id   NUMBER;
    l_data_temp1        NUMBER;
    l_data_temp2        NUMBER;
    l_data_temp3        NUMBER;
    l_data_temp4        NUMBER;
    l_data_temp5        NUMBER;
    l_data_temp6        NUMBER;
  BEGIN
    SELECT a.id
      INTO l_target_account_id
      FROM dim_performance_account a
     WHERE a.label = p_target_label;
    SELECT y.id
      INTO l_year_id
      FROM dim_hfm_year y
     WHERE y.label = p_year_label;
    SELECT p.id
      INTO l_period_id
      FROM --stgs.tbhfm_period p
        dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.label = p_period_label;
    SELECT DISTINCT e.id
      INTO l_entity_id
      FROM-- stgs.tbhfm_entity e
      dwstg.TBHFM_ENTITY e -- by dengj@besthelp 20130822 数据中心拆分
     WHERE e.label = p_entity_label;
    SELECT p.id
      INTO l_first_period_id
      FROM --stgs.tbhfm_period p
        dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.label = 'Jan';
  
    IF substr(p_source_label, 1, 5) = 'FZZB1' THEN
      l_data_temp1 := get_fzzb1(p_source_label);
      l_data_temp2 := get_temp_data(p_source_label,
                                    p_entity_label,
                                    to_char(to_number(p_year_label) - 1),
                                    'Dec');
      --l_data_temp
      SELECT SUM(l.actual_ddata)
        INTO l_data_temp3
        FROM fact_performance_data l
       WHERE l.yearid = l_year_id
         AND l.entityid = l_entity_id
         AND l.accountid = l_source_account_id
         AND l.periodid >= l_first_period_id
         AND l.periodid < l_period_id
         AND l.periodid <> l_first_period_id + 6;
    ELSE
      l_data_temp1 := get_data(p_source_label,
                               p_entity_label,
                               p_year_label,
                               p_period_label);
      l_data_temp2 := get_data(p_source_label,
                               p_entity_label,
                               to_char(to_number(p_year_label) - 1),
                               'Dec');
      --TODO 判断 num   
    
      SELECT SUM(l.ddata)
        INTO l_data_temp3
        FROM fact_per_input_mv l, dim_hfm_period p
       WHERE l.year_label = p_year_label
         AND l.entity_label = p_entity_label
         AND l.account_label = p_source_label
         AND l.period_label = p.month_label
         AND p.month_id >= l_first_period_id
         AND p.month_id < l_period_id
         AND p.month_id <> l_first_period_id + 6;
    
    END IF;
    IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
       l_data_temp3 IS NULL THEN
      l_data_temp4 := NULL;
    ELSE
      l_data_temp4 := nvl(l_data_temp1, 0) / 2 + nvl(l_data_temp2, 0) / 2 +
                      nvl(l_data_temp3, 0);
    END IF;
  
    IF l_period_id - l_first_period_id > 6 THEN
      l_data_temp6 := l_period_id - l_first_period_id;
    ELSE
      l_data_temp6 := l_period_id - l_first_period_id + 1;
    END IF;
  
    IF (l_data_temp4 IS NULL) THEN
      l_data_temp5 := 0;
    ELSE
      l_data_temp5 := l_data_temp4 / l_data_temp6;
    END IF;
    insert_data(l_data_temp5,
                l_year_id,
                l_period_id,
                l_entity_id,
                l_target_account_id);
    RETURN l_data_temp5;
  END type59;
  --主函数
  PROCEDURE calculate_proc(p_year_label        IN VARCHAR2,
                           p_period_label      IN VARCHAR2,
                           p_last_period_label IN VARCHAR2) IS
    l_account_id NUMBER;
    l_year_id    NUMBER;
    l_period_id  NUMBER;
    l_data_temp1 NUMBER;
    l_data_temp2 NUMBER;
    l_data_temp3 NUMBER;
    l_data_temp4 NUMBER;
    l_data_temp5 NUMBER;
    l_data_temp6 NUMBER;
    l_data_temp7 NUMBER;
    l_data_temp8 NUMBER;
  
    l_year_label        VARCHAR2(100);
    l_period_label      VARCHAR2(100);
    l_last_period_label VARCHAR2(100);
    l_first_period_id   NUMBER;
  
    temp  NUMBER;
    temp1 VARCHAR2(100);
  BEGIN
  
    l_year_label   := p_year_label;
    l_period_label := p_period_label;
  
    l_year_id := to_number(l_year_label);
    SELECT DISTINCT p.id
      INTO l_period_id
      FROM --stgs.tbhfm_period p
        dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.label = p_period_label;
    l_last_period_label := p_last_period_label;
    --FOR Y IN (SELECT * FROM DIM_HFM_YEAR) LOOP
    --FOR P IN (SELECT * FROM stgs.TBHFM_PERIOD) LOOP
    FOR e IN (SELECT * FROM -- stgs.stg_hfm_entity_nolevel_v
                            dwstg.STG_HFM_ENTITY_NOLEVEL_ALL -- by dengj@besthelp 20130822 数据中心拆分

      ) LOOP
      temp1 := e.label;
      --1.CZNL001=CN06000200/CN06005200
      temp := performance_div('CN06000200',
                              'CN06005200',
                              'CZNL001',
                              e.label,
                              l_year_label,
                              l_period_label);
    
      --2.FZZB105=CN06000300+CN06000400+CN06000500                                                                                             
      l_account_id := get_account_id('FZZB105');
      l_data_temp1 := get_data('CN06000300',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06000400',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06000500',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0);
      END IF;
      insert_data(l_data_temp4, l_year_id, l_period_id, e.id, l_account_id);
      fzzb105 := l_data_temp4;
      --3.CZNL002=FZZB105/CN06005200
      temp := performance_div('FZZB105',
                              'CN06005200',
                              'CZNL002',
                              e.label,
                              l_year_label,
                              l_period_label);
      --4.CZNL003=CN06005200/CN06000100                   
      temp := performance_div('CN06005200',
                              'CN06000100',
                              'CZNL003',
                              e.label,
                              l_year_label,
                              l_period_label);
      --5.CZNL004=(CN07000600+FZZB016)/FZZB016
      l_account_id := get_account_id('CZNL004');
      l_data_temp1 := get_data('CN07000600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('FZZB016',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('FZZB016',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp4,
                       l_data_temp3,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --6.CZNL005=(CN06000200-CN06001100-CN06001700-CN06002000-CN06002100)/CN06005200
      l_account_id := get_account_id('CZNL005');
      l_data_temp1 := get_data('CN06000200',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06001100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('CN06002000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp5 := get_data('CN06002100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp6 := get_data('CN06005200',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL AND l_data_temp4 IS NULL AND
         l_data_temp5 IS NULL THEN
        l_data_temp7 := NULL;
      ELSE
        l_data_temp7 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) -
                        nvl(l_data_temp3, 0) - nvl(l_data_temp4, 0) -
                        nvl(l_data_temp5, 0);
      END IF;
      temp := data_div(l_data_temp7,
                       l_data_temp6,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --7.CZNL006=(FZZB105+CN06000600+CN06000700+CN06000800)/CN06005200
      l_account_id := get_account_id('CZNL006');
      l_data_temp1 := fzzb105;
      l_data_temp2 := get_data('CN06000600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06000700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('CN06000800',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp5 := get_data('CN06005200',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL AND l_data_temp4 IS NULL THEN
        l_data_temp6 := NULL;
      ELSE
        l_data_temp6 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0) + nvl(l_data_temp4, 0);
      END IF;
      temp := data_div(l_data_temp6,
                       l_data_temp5,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --8.CZNL007=(FZZB105+CN06000600)/CN06005200
      l_account_id := get_account_id('CZNL007');
      l_data_temp1 := fzzb105;
      l_data_temp2 := get_data('CN06000600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06005200',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp4,
                       l_data_temp3,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --9.CZNL008=CN06000200-CN06005200
      l_account_id := get_account_id('CZNL008');
      l_data_temp1 := get_data('CN06000200',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06005200',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
    
      --10.CZNL009=CN06005200/CN06007600   
      temp := performance_div('CN06005200',
                              'CN06007600',
                              'CZNL009',
                              e.label,
                              l_year_label,
                              l_period_label);
    
      --11.CZNL010=CN06007600/CN06000100     
      temp := performance_div('CN06007600',
                              'CN06000100',
                              'CZNL010',
                              e.label,
                              l_year_label,
                              l_period_label);
    
      --12.CZNL011=CN06005200/(CN06000100-CN06004000)
      l_account_id := get_account_id('CZNL011');
      l_data_temp1 := get_data('CN06005200',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06000100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06004000',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp2 IS NULL AND l_data_temp3 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp2, 0) - nvl(l_data_temp3, 0);
      END IF;
      temp := data_div(l_data_temp1,
                       l_data_temp4,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --13.CZNL012=CN06005200/(CN06007600-CN06004000)
      l_account_id := get_account_id('CZNL012');
      l_data_temp1 := get_data('CN06005200',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06007600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06004000',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp2 IS NULL AND l_data_temp3 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp2, 0) - nvl(l_data_temp3, 0);
      END IF;
      temp := data_div(l_data_temp1,
                       l_data_temp4,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --14.CZNL013=CN06006700/CN06007600
      temp := performance_div('CN06006700',
                              'CN06007600',
                              'CZNL013',
                              e.label,
                              l_year_label,
                              l_period_label);
      --15.KZNL001=(CN07004000-FZZB001)/FZZB001
      l_account_id := get_account_id('KZNL001');
      l_data_temp1 := get_data('CN07004000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('FZZB001',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --16.KZNL002=(CN07001000-FZZB002)/FZZB002
      l_account_id := get_account_id('KZNL002');
      l_data_temp1 := get_data('CN07001000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('FZZB002',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --29.FZZB101=CN07001700+CN07001100+CN07001800
      l_account_id := get_account_id('FZZB101');
      l_data_temp1 := get_data('CN07001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07001100',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF e.userdefined3 = 'B02' THEN
        l_data_temp3 := get_data('CN07001800',
                                 e.label,
                                 l_year_label,
                                 l_period_label);
      ELSE
        l_data_temp3 := 0;
      END IF;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0);
      END IF;
      insert_data(l_data_temp4, l_year_id, l_period_id, e.id, l_account_id);
      fzzb101 := l_data_temp4;
    
      --17.KZNL003=(FZZB101-FZZB004-FZZB005-FZZB006-FZZB007-FZZB008)/(FZZB004+FZZB005+FZZB006+FZZB007+FZZB008)
      l_account_id := get_account_id('KZNL003');
      l_data_temp1 := fzzb101;
      l_data_temp2 := get_data('FZZB004',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('FZZB005',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('FZZB006',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp5 := get_data('FZZB007',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp6 := get_data('FZZB008',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL AND l_data_temp4 IS NULL AND
         l_data_temp5 IS NULL AND l_data_temp6 IS NULL THEN
        l_data_temp7 := NULL;
      ELSE
        l_data_temp7 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) -
                        nvl(l_data_temp3, 0) - nvl(l_data_temp4, 0) -
                        nvl(l_data_temp5, 0) - nvl(l_data_temp6, 0);
      END IF;
    
      IF l_data_temp2 IS NULL AND l_data_temp3 IS NULL AND
         l_data_temp4 IS NULL AND l_data_temp5 IS NULL AND
         l_data_temp6 IS NULL THEN
        l_data_temp8 := NULL;
      ELSE
        l_data_temp8 := nvl(l_data_temp2, 0) + nvl(l_data_temp3, 0) +
                        nvl(l_data_temp4, 0) + nvl(l_data_temp5, 0) +
                        nvl(l_data_temp6, 0);
      END IF;
      temp := data_div(l_data_temp7,
                       l_data_temp8,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --18.KZNL004=(CN07000500-FZZB003)/FZZB003
      l_account_id := get_account_id('KZNL004');
      l_data_temp1 := get_data('CN07000500',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('FZZB003',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --19.XJLL001=CN03000400/(FZZB013+CN06005600) 
      l_account_id := get_account_id('XJLL001');
      l_data_temp1 := get_data('CN03000400',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('FZZB013',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('CN06005600',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp3 IS NULL AND l_data_temp4 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp3, 0) + nvl(l_data_temp4, 0);
      END IF;
      temp := data_div(l_data_temp1,
                       l_data_temp5,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --20.XJLL002=CN03000400/CN06005300
      temp := performance_div('CN03000400',
                              'CN06005300',
                              'XJLL002',
                              e.label,
                              l_year_label,
                              l_period_label);
      --21.XJLL003=CN03000400/CN06005200
      temp := performance_div('CN03000400',
                              'CN06005200',
                              'XJLL003',
                              e.label,
                              l_year_label,
                              l_period_label);
      --22.XJLL004=CN03000400/CN07001000
      temp := performance_div('CN03000400',
                              'CN07001000',
                              'XJLL004',
                              e.label,
                              l_year_label,
                              l_period_label);
      --23.XJLL005=CN03000400/CN07000500
      temp := performance_div('CN03000400',
                              'CN07000500',
                              'XJLL005',
                              e.label,
                              l_year_label,
                              l_period_label);
      --24.XJLL006=CN03000400/CN06000100
      temp := performance_div('CN03000400',
                              'CN06000100',
                              'XJLL006',
                              e.label,
                              l_year_label,
                              l_period_label);
      --25.XJLL007=CN03000400-CN03005000-CN03006900
      l_account_id := get_account_id('XJLL007');
      l_data_temp1 := get_data('CN03000400',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN03005000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN03006900',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) -
                        nvl(l_data_temp3, 0);
      END IF;
      insert_data(l_data_temp4, l_year_id, l_period_id, e.id, l_account_id);
      --26.XJLL008=CN03000400/(CN03005000-CN04001400+CN03006900)
      --将分子分母最近5年数据进行加总
      l_account_id := get_account_id('XJLL008');
      SELECT SUM(l.ddata)
        INTO l_data_temp1
        FROM fact_per_input_mv l,-- stgs.stg_hfm_period_v p
        dwstg.STG_HFM_PERIOD_ALL p-- by dengj@besthelp 20130822 数据中心拆分

       WHERE p.month_lab = l.period_label
         AND ((to_number(l.year_label) <= l_year_id - 1 AND
             to_number(l.year_label) >= l_year_id - 5 + 1) OR
             (to_number(l.year_label) = l_year_id AND
             p.month_id <= l_period_id))
         AND l.entity_label = e.label
         AND l.account_label = 'CN03000400';
      SELECT SUM(l.ddata)
        INTO l_data_temp2
        FROM fact_per_input_mv l,-- stgs.stg_hfm_period_v p
        dwstg.STG_HFM_PERIOD_ALL p-- by dengj@besthelp 20130822 数据中心拆分
       WHERE p.month_lab = l.period_label
         AND ((to_number(l.year_label) <= l_year_id - 1 AND
             to_number(l.year_label) >= l_year_id - 5 + 1) OR
             (to_number(l.year_label) = l_year_id AND
             p.month_id <= l_period_id))
         AND l.entity_label = e.label
         AND l.account_label = 'CN03005000';
      SELECT SUM(l.ddata)
        INTO l_data_temp3
        FROM fact_per_input_mv l,-- stgs.stg_hfm_period_v p
        dwstg.STG_HFM_PERIOD_ALL p-- by dengj@besthelp 20130822 数据中心拆分
       WHERE p.month_lab = l.period_label
         AND ((to_number(l.year_label) <= l_year_id - 1 AND
             to_number(l.year_label) >= l_year_id - 5 + 1) OR
             (to_number(l.year_label) = l_year_id AND
             p.month_id <= l_period_id))
         AND l.entity_label = e.label
         AND l.account_label = 'CN04001400';
      SELECT SUM(l.ddata)
        INTO l_data_temp4
        FROM fact_per_input_mv l,-- stgs.stg_hfm_period_v p
        dwstg.STG_HFM_PERIOD_ALL p-- by dengj@besthelp 20130822 数据中心拆分
       WHERE p.month_lab = l.period_label
         AND ((to_number(l.year_label) <= l_year_id - 1 AND
             to_number(l.year_label) >= l_year_id - 5 + 1) OR
             (to_number(l.year_label) = l_year_id AND
             p.month_id <= l_period_id))
         AND l.entity_label = e.label
         AND l.account_label = 'CN03006900';
      /*  l_data_temp1 := get_data('CN03000400',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN03005000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN04001400',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('CN03006900',
                               e.label,
                               l_year_label,
                               l_period_label);*/
      IF l_data_temp2 IS NULL AND l_data_temp3 IS NULL AND
         l_data_temp4 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp2, 0) - nvl(l_data_temp3, 0) +
                        nvl(l_data_temp4, 0);
      END IF;
      temp := data_div(l_data_temp1,
                       l_data_temp5,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --27.XJLL009=CN03000400/CN06006200
      temp := performance_div('CN03000400',
                              'CN06006200',
                              'XJLL009',
                              e.label,
                              l_year_label,
                              l_period_label);
      --28.XSNL001=CN07001400/CN07001000
      temp := performance_div('CN07001400',
                              'CN07001000', --add by Bruce 20110901:主营业务收入
                              'XSNL001',
                              e.label,
                              l_year_label,
                              l_period_label);
      --30.XSNL002=FZZB101/CN07001000
      temp := performance_div('FZZB101',
                              'CN07001000', --add by Bruce 20110901:主营业务收入
                              'XSNL002',
                              e.label,
                              l_year_label,
                              l_period_label);
      --31.XSNL003=CN07001800/CN07001000
      temp := performance_div('CN07001800',
                              'CN07001000', --add by Bruce 20110901:主营业务收入
                              'XSNL003',
                              e.label,
                              l_year_label,
                              l_period_label);
      --32.XSNL004=CN07001900/CN07001000
      temp := performance_div('CN07001900',
                              'CN07001000', --add by Bruce 20110901:主营业务收入
                              'XSNL004',
                              e.label,
                              l_year_label,
                              l_period_label);
      --33.XSNL005=CN07001000/CN07004000
      temp := performance_div('CN07001000', --add by Bruce 20110901:主营业务收入
                              'CN07004000',
                              'XSNL005',
                              e.label,
                              l_year_label,
                              l_period_label);
      --34.XSNL006=CN07001400/CN07004000
      temp := performance_div('CN07001400',
                              'CN07004000',
                              'XSNL006',
                              e.label,
                              l_year_label,
                              l_period_label);
      --35.XSNL007=FZZB101/CN07004000
      temp := performance_div('FZZB101',
                              'CN07004000',
                              'XSNL007',
                              e.label,
                              l_year_label,
                              l_period_label);
      --36.XSNL008=CN07001800/CN07004000
      temp := performance_div('CN07001800',
                              'CN07004000',
                              'XSNL008',
                              e.label,
                              l_year_label,
                              l_period_label);
      --37.XSNL009=CN07000600/CN07004000
      temp := performance_div('CN07000600',
                              'CN07004000',
                              'XSNL009',
                              e.label,
                              l_year_label,
                              l_period_label);
      --38.XSNL010=(本期CN07001000-去年同期CN07001000)/去年同期CN07001000
      l_account_id := get_account_id('XSNL010');
      l_data_temp1 := get_data('CN07001000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07001000',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --39.XSNL011=(本期CN06007600-去年年末CN06007600)/去年年末CN06007600
      l_account_id := get_account_id('XSNL011');
      l_data_temp1 := get_data('CN06007600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06007600',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --40.XSNL012=CN07001600/CN07004000
      temp := performance_div('CN07001600',
                              'CN07004000',
                              'XSNL012',
                              e.label,
                              l_year_label,
                              l_period_label);
      --41.FZZB102=CN07001000-CN07001600-CN07001100-CN07001400
      l_account_id := get_account_id('FZZB102');
      l_data_temp1 := get_data('CN07001000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07001600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN07001100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('CN07001400',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL AND l_data_temp4 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) -
                        nvl(l_data_temp3, 0) - nvl(l_data_temp4, 0);
      END IF;
      insert_data(l_data_temp5, l_year_id, l_period_id, e.id, l_account_id);
      fzzb102 := l_data_temp5;
      --42.XSNL013=FZZB102/CN07004000
      temp := performance_div('FZZB102',
                              'CN07004000',
                              'XSNL013',
                              e.label,
                              l_year_label,
                              l_period_label);
      --43.XSNL014=CN07001900/CN07004000
      temp := performance_div('CN07001900',
                              'CN07004000',
                              'XSNL014',
                              e.label,
                              l_year_label,
                              l_period_label);
      --44.XSNL015=CN07000500/CN07004000
      temp := performance_div('CN07000500',
                              'CN07004000',
                              'XSNL015',
                              e.label,
                              l_year_label,
                              l_period_label);
      --45.XSNL016=(本期CN06000800+本期CN06000700-上年末CN06000800-上年末CN06000700)/(上年末CN06000800+上年末CN06000700)
      l_account_id := get_account_id('XSNL016');
      l_data_temp1 := get_data('CN06000800',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06000700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06000800',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp4 := get_data('CN06000700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL AND l_data_temp4 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0) -
                        nvl(l_data_temp3, 0) - nvl(l_data_temp4, 0);
      END IF;
      IF l_data_temp3 IS NULL AND l_data_temp4 IS NULL THEN
        l_data_temp6 := NULL;
      ELSE
        l_data_temp6 := nvl(l_data_temp3, 0) + nvl(l_data_temp4, 0);
      END IF;
      temp := data_div(l_data_temp5,
                       l_data_temp6,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --46.XSNL017=(本期CN07000600-去年同期CN07000600)/去年同期CN07000600
      l_account_id := get_account_id('XSNL017');
      l_data_temp1 := get_data('CN07000600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07000600',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --47.XSNL018=(本期CN07000500-去年同期CN07000500)/去年同期CN07000500
      l_account_id := get_account_id('XSNL018');
      l_data_temp1 := get_data('CN07000500',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07000500',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --48.XSNL019=(本期CN06003200-上年末CN06003200)/上年末CN06003200
      l_account_id := get_account_id('XSNL019');
      l_data_temp1 := get_data('CN06003200',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06003200',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --49.XSNL020=(上年末CN06003300+本期CN06003300)/(上年末CN06003400+本期CN06003400)
      l_account_id := get_account_id('XSNL020');
      l_data_temp1 := get_data('CN06003300',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp2 := get_data('CN06003300',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN06003400',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp4 := get_data('CN06003400',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0);
      END IF;
    
      IF l_data_temp3 IS NULL AND l_data_temp4 IS NULL THEN
        l_data_temp6 := NULL;
      ELSE
        l_data_temp6 := nvl(l_data_temp3, 0) + nvl(l_data_temp4, 0);
      END IF;
      temp := data_div(l_data_temp5,
                       l_data_temp6,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
    
      --50.XSNL021=(本期CN06000100-上年末CN06000100)/上年末CN06000100
      l_account_id := get_account_id('XSNL021');
      l_data_temp1 := get_data('CN06000100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN06000100',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --51.XSNL022=(本期CN07004100-去年同期CN07004100)/去年同期CN07004100
      l_account_id := get_account_id('XSNL022');
      l_data_temp1 := get_data('CN07004100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07004100',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_period_label);
    
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      temp := data_div(l_data_temp3,
                       l_data_temp2,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --52.YLNL001=FZZB102/CN07001000
      temp := performance_div('FZZB102',
                              'CN07001000',
                              'YLNL001',
                              e.label,
                              l_year_label,
                              l_period_label);
      --53.YLNL002=CN07000600/CN07001000
      temp := performance_div('CN07000600',
                              'CN07001000',
                              'YLNL002',
                              e.label,
                              l_year_label,
                              l_period_label);
      --54.FZZB120=(上年末CN06007600/2+期间各月CN06007600之和+本期CN06007600/2)/期间数
      IF e.label = 'E0302' THEN
        temp := 0;
      END IF;
      FZZB120 := type59('CN06007600',
                        'FZZB120',
                        l_year_label,
                        l_period_label,
                        e.label);
      --55.YLNL003=CN07000400/FZZB120
      --净资产收益率
      temp := performance_div('CN07000400',
                              'FZZB120',
                              'YLNL003',
                              e.label,
                              l_year_label,
                              l_period_label);
      --56.YLNL004=CN07000500/CN07001000
      temp := performance_div('CN07000500',
                              'CN07001000',
                              'YLNL004',
                              e.label,
                              l_year_label,
                              l_period_label);
      --57.YLNL005=CN07000600/FZZB101
      temp := performance_div('CN07000600',
                              'FZZB101',
                              'YLNL005',
                              e.label,
                              l_year_label,
                              l_period_label);
      --58.YLNL006=CN07000600/(CN07001400+CN07001100+CN07001600+CN07001700+CN07001800+CN07001900)
      l_account_id := get_account_id('YLNL006');
      l_data_temp1 := get_data('CN07000600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('CN07001400',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp3 := get_data('CN07001100',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := get_data('CN07001600',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp5 := get_data('CN07001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp6 := get_data('CN07001800',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp7 := get_data('CN07001900',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp2 IS NULL AND l_data_temp3 IS NULL AND
         l_data_temp4 IS NULL AND l_data_temp5 IS NULL AND
         l_data_temp6 IS NULL AND l_data_temp6 IS NULL THEN
        l_data_temp8 := NULL;
      ELSE
        l_data_temp8 := nvl(l_data_temp2, 0) + nvl(l_data_temp3, 0) +
                        nvl(l_data_temp4, 0) + nvl(l_data_temp5, 0) +
                        nvl(l_data_temp6, 0) + nvl(l_data_temp7, 0);
      END IF;
      temp := data_div(l_data_temp1,
                       l_data_temp8,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --59.FZZB103=(上年末CN06000100/2+期间各月CN06000100之和+本期CN06000100/2)/期间数
      fzzb103 := type59('CN06000100',
                        'FZZB103',
                        l_year_label,
                        l_period_label,
                        e.label);
      --60.YLNL007=CN07000600/FZZB103
      temp := performance_div('CN07000600',
                              'FZZB103',
                              'YLNL007',
                              e.label,
                              l_year_label,
                              l_period_label);
      --61.YLNL008=CN07000500/FZZB103
      temp := performance_div('CN07000500',
                              'FZZB103',
                              'YLNL008',
                              e.label,
                              l_year_label,
                              l_period_label);
      --62.YLNL009=CN07000700/CN07000600
      temp := performance_div('CN07000700',
                              'CN07000600',
                              'YLNL009',
                              e.label,
                              l_year_label,
                              l_period_label);
      --63.FZZB104=(上年末FZZB105/2+期间各月FZZB105之和+本期FZZB105/2)/期间数
      fzzb104 := type59('FZZB105',
                        'FZZB104',
                        l_year_label,
                        l_period_label,
                        e.label);
      --64.YYNL001=360/(CN07001000/FZZB104)
      l_account_id := get_account_id('YYNL001');
      l_data_temp1 := get_data('CN07001000',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := fzzb104;
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp3 := NULL;
      ELSIF (l_data_temp2 IS NULL) THEN
        l_data_temp3 := 0;
      ELSE
        l_data_temp3 := 360 * l_data_temp2 / l_data_temp1;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      --65.FZZB106=FZZB009-FZZB011
      l_account_id := get_account_id('FZZB106');
      l_data_temp1 := get_data('FZZB009',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('FZZB011',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      fzzb106 := l_data_temp3;
      --66.FZZB107=FZZB010-FZZB012
      l_account_id := get_account_id('FZZB107');
      l_data_temp1 := get_data('FZZB010',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp2 := get_data('FZZB012',
                               e.label,
                               l_year_label,
                               l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0);
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      fzzb107 := l_data_temp3;
      --67.FZZB108=(上年末CN06000800/2+期间各月CN06000800之和+本期CN06000800/2)/期间数
      fzzb108 := type59('CN06000800',
                        'FZZB108',
                        l_year_label,
                        l_period_label,
                        e.label);
      --68.FZZB109=(上年末FZZB106/2+期间各月FZZB106之和+本期FZZB106/2)/期间数
      fzzb109 := type59('FZZB106',
                        'FZZB109',
                        l_year_label,
                        l_period_label,
                        e.label);
      --69.FZZB110=(上年末FZZB107/2+期间各月FZZB107之和+本期FZZB107/2)/期间数
      fzzb110 := type59('FZZB107',
                        'FZZB110',
                        l_year_label,
                        l_period_label,
                        e.label);
      --70.FZZB111=CN07001000/期数*12
      l_account_id := get_account_id('FZZB111');
      SELECT p.id
        INTO l_first_period_id
        FROM --stgs.tbhfm_period p
          dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
       WHERE p.label = 'Jan';
    
      l_data_temp1 := get_data('CN07001000',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_period_id - l_first_period_id > 6 THEN
        l_data_temp2 := l_period_id - l_first_period_id;
      ELSE
        l_data_temp2 := l_period_id - l_first_period_id + 1;
      END IF;
    
      IF (l_data_temp1 IS NULL) THEN
        l_data_temp3 := 0;
      ELSIF (l_data_temp2 IS NULL OR l_data_temp2 = 0) THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := l_data_temp1 / l_data_temp2 * 12;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      fzzb111 := l_data_temp3;
      --71.YYNL002=360/(FZZB111/FZZB108)
      l_account_id := get_account_id('YYNL002');
      l_data_temp1 := fzzb111;
      l_data_temp2 := fzzb108;
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp3 := NULL;
      ELSIF (l_data_temp2 IS NULL) THEN
        l_data_temp3 := 0;
      ELSE
        l_data_temp3 := 360 * l_data_temp2 / l_data_temp1;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      --72.YYNL003=360/(FZZB111/FZZB109)
      l_account_id := get_account_id('YYNL003');
      l_data_temp1 := fzzb111;
      l_data_temp2 := fzzb109;
      IF (l_data_temp1 IS NULL) THEN
        l_data_temp3 := NULL;
      ELSIF (l_data_temp2 IS NULL OR l_data_temp1 IS NULL OR
            l_data_temp1 = 0) THEN
        l_data_temp3 := 0;
      ELSE
        l_data_temp3 := 360 * l_data_temp2 / l_data_temp1;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      --73.YYNL004=360/(FZZB111/FZZB110)
      l_account_id := get_account_id('YYNL004');
      l_data_temp1 := fzzb111;
      l_data_temp2 := fzzb110;
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp3 := NULL;
      ELSIF (l_data_temp2 IS NULL) THEN
        l_data_temp3 := 0;
      ELSE
        l_data_temp3 := 360 * l_data_temp2 / l_data_temp1;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      --74.FZZB112=CN07001400/期数*12
      l_account_id := get_account_id('FZZB112');
      SELECT p.id
        INTO l_first_period_id
        FROM --stgs.tbhfm_period p
          dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
       WHERE p.label = 'Jan';
    
      l_data_temp1 := get_data('CN07001400',
                               e.label,
                               l_year_label,
                               l_period_label);
    
      IF l_period_id - l_first_period_id > 6 THEN
        l_data_temp2 := l_period_id - l_first_period_id;
      ELSE
        l_data_temp2 := l_period_id - l_first_period_id + 1;
      END IF;
    
      IF (l_data_temp1 IS NULL) THEN
        l_data_temp3 := 0;
      ELSIF l_data_temp2 IS NULL OR l_data_temp2 = 0 THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := l_data_temp1 / l_data_temp2 * 12;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      fzzb112 := l_data_temp3;
      --75.FZZB113=(上年末CN06001700/2+期间各月CN06001700之和+本期CN06001700/2)/期间数
      fzzb113 := type59('CN06001700',
                        'FZZB113',
                        l_year_label,
                        l_period_label,
                        e.label);
      --76.YYNL005=360/(FZZB112/FZZB113)
      l_account_id := get_account_id('YYNL005');
      l_data_temp1 := fzzb112;
      l_data_temp2 := fzzb113;
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp3 := NULL;
      ELSIF (l_data_temp2 IS NULL) THEN
        l_data_temp3 := 0;
      ELSE
        l_data_temp3 := 360 * l_data_temp2 / l_data_temp1;
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      --77.FZZB114=(上年末CN06000200/2+期间各月CN06000200之和+本期CN06000200/2)/期间数
      fzzb114 := type59('CN06000200',
                        'FZZB114',
                        l_year_label,
                        l_period_label,
                        e.label);
      --78.FZZB115=(上年末CN06003200/2+期间各月CN06003200之和+本期CN06003200/2)/期间数
      fzzb115 := type59('CN06003200',
                        'FZZB115',
                        l_year_label,
                        l_period_label,
                        e.label);
      --79.FZZB116=(上年末CN06000100/2+期间各月CN06000100之和+本期CN06000100/2)/期间数
      fzzb116 := type59('CN06000100',
                        'FZZB116',
                        l_year_label,
                        l_period_label,
                        e.label);
      --80.YYNL006=FZZB111/FZZB114
      temp := performance_div('FZZB111',
                              'FZZB114',
                              'YYNL006',
                              e.label,
                              l_year_label,
                              l_period_label);
      --81.YYNL007=FZZB111/FZZB115
      temp := performance_div('FZZB111',
                              'FZZB115',
                              'YYNL007',
                              e.label,
                              l_year_label,
                              l_period_label);
      --82.YYNL008=FZZB111/FZZB116
      temp := performance_div('FZZB111',
                              'FZZB116',
                              'YYNL008',
                              e.label,
                              l_year_label,
                              l_period_label);
      --83.FZZB117=(上年末CN06005700/2+期间各月CN06005700之和+本期CN06005700/2)/期间数
      fzzb117 := type59('CN06005700',
                        'FZZB117',
                        l_year_label,
                        l_period_label,
                        e.label);
      --84.FZZB118=(上年末FZZB014/2+期间各月FZZB014之和+本期FZZB014/2)/期间数
      fzzb118 := type59('FZZB014',
                        'FZZB118',
                        l_year_label,
                        l_period_label,
                        e.label);
      --85.FZZB119=(上年末FZZB015/2+期间各月FZZB015之和+本期FZZB015/2)/期间数
      fzzb119 := type59('FZZB015',
                        'FZZB119',
                        l_year_label,
                        l_period_label,
                        e.label);
      --86.YYNL009=360/[(FZZB112-上年末CN06001700+本期CN06001700)/FZZB117]
      l_account_id := get_account_id('YYNL009');
      l_data_temp1 := fzzb112;
      l_data_temp2 := get_data('CN06001700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := fzzb117;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := (nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0)) / 360;
      END IF;
      temp := data_div(l_data_temp4,
                       l_data_temp5,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --87.YYNL010=360/[(FZZB112-上年末CN06001700+本期CN06001700)/FZZB118]
      l_account_id := get_account_id('YYNL010');
      l_data_temp1 := fzzb112;
      l_data_temp2 := get_data('CN06001700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := fzzb118;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := (nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0)) / 360;
      END IF;
      temp := data_div(l_data_temp4,
                       l_data_temp5,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --88.YYNL011=360/[(FZZB112-上年末CN06001700+本期CN06001700)/FZZB119]
      l_account_id := get_account_id('YYNL011');
      l_data_temp1 := fzzb112;
      l_data_temp2 := get_data('CN06001700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := fzzb119;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := (nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0)) / 360;
      END IF;
      temp := data_div(l_data_temp4,
                       l_data_temp5,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --89.YYNL012=360/YYNL006
      l_account_id := get_account_id('YYNL012');
      l_data_temp1 := get_temp_data('YYNL006',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp2 := NULL;
      ELSE
        l_data_temp2 := 360 / l_data_temp1;
      END IF;
      insert_data(l_data_temp2, l_year_id, l_period_id, e.id, l_account_id);
      --90.YYNL013=360/YYNL007
      l_account_id := get_account_id('YYNL013');
      l_data_temp1 := get_temp_data('YYNL007',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp2 := NULL;
      ELSE
        l_data_temp2 := 360 / l_data_temp1;
      END IF;
      insert_data(l_data_temp2, l_year_id, l_period_id, e.id, l_account_id);
      --91.YYNL014=360/YYNL008
      l_account_id := get_account_id('YYNL014');
      l_data_temp1 := get_temp_data('YYNL008',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      IF (l_data_temp1 IS NULL OR l_data_temp1 = 0) THEN
        l_data_temp2 := NULL;
      ELSE
        l_data_temp2 := 360 / l_data_temp1;
      END IF;
      insert_data(l_data_temp2, l_year_id, l_period_id, e.id, l_account_id);
      --92.YYNL015=FZZB111/FZZB104
      temp := performance_div('FZZB111',
                              'FZZB104',
                              'YYNL015',
                              e.label,
                              l_year_label,
                              l_period_label);
      --93.YYNL016=FZZB111/FZZB108
      temp := performance_div('FZZB111',
                              'FZZB108',
                              'YYNL016',
                              e.label,
                              l_year_label,
                              l_period_label);
      --94.YYNL017=FZZB111/FZZB109
      temp := performance_div('FZZB111',
                              'FZZB109',
                              'YYNL017',
                              e.label,
                              l_year_label,
                              l_period_label);
      --95.YYNL018=FZZB111/FZZB110
      temp := performance_div('FZZB111',
                              'FZZB110',
                              'YYNL018',
                              e.label,
                              l_year_label,
                              l_period_label);
      --96.YYNL019=FZZB112/FZZB113
      temp := performance_div('FZZB112',
                              'FZZB113',
                              'YYNL019',
                              e.label,
                              l_year_label,
                              l_period_label);
      --97.YYNL020=(FZZB112-上年末CN06001700+本期CN06001700)/FZZB117
      l_account_id := get_account_id('YYNL020');
      l_data_temp1 := fzzb112;
      l_data_temp2 := get_data('CN06001700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := fzzb117;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0);
      END IF;
      temp := data_div(l_data_temp5,
                       l_data_temp4,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --98.YYNL021=(FZZB112+上年末CN06001700-本期CN06001700)/FZZB118
      l_account_id := get_account_id('YYNL021');
      l_data_temp1 := fzzb112;
      l_data_temp2 := get_data('CN06001700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := fzzb118;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0);
      END IF;
      temp := data_div(l_data_temp5,
                       l_data_temp4,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --99.YYNL022=(FZZB112+上年末CN06001700-本期CN06001700)/FZZB119
      l_account_id := get_account_id('YYNL022');
      l_data_temp1 := fzzb112;
      l_data_temp2 := get_data('CN06001700',
                               e.label,
                               to_char(to_number(l_year_label) - 1),
                               l_last_period_label);
      l_data_temp3 := get_data('CN06001700',
                               e.label,
                               l_year_label,
                               l_period_label);
      l_data_temp4 := fzzb119;
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp5 := NULL;
      ELSE
        l_data_temp5 := nvl(l_data_temp1, 0) - nvl(l_data_temp2, 0) +
                        nvl(l_data_temp3, 0);
      END IF;
      temp := data_div(l_data_temp5,
                       l_data_temp4,
                       l_year_id,
                       l_period_id,
                       e.id,
                       l_account_id);
      --100.YYNL023=YYNL005+YYNL002
      l_account_id := get_account_id('YYNL023');
      l_data_temp1 := get_temp_data('YYNL005',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      l_data_temp2 := get_temp_data('YYNL002',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL THEN
        l_data_temp3 := NULL;
      ELSE
        l_data_temp3 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0);
      END IF;
      insert_data(l_data_temp3, l_year_id, l_period_id, e.id, l_account_id);
      --101.YYNL024=YYNL005+YYNL002-YYNL009
      l_account_id := get_account_id('YYNL024');
      l_data_temp1 := get_temp_data('YYNL005',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      l_data_temp2 := get_temp_data('YYNL002',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      l_data_temp3 := get_temp_data('YYNL009',
                                    e.label,
                                    l_year_label,
                                    l_period_label);
      IF l_data_temp1 IS NULL AND l_data_temp2 IS NULL AND
         l_data_temp3 IS NULL THEN
        l_data_temp4 := NULL;
      ELSE
        l_data_temp4 := nvl(l_data_temp1, 0) + nvl(l_data_temp2, 0) -
                        nvl(l_data_temp3, 0);
      END IF;
      insert_data(l_data_temp4, l_year_id, l_period_id, e.id, l_account_id);
    
    END LOOP;
    COMMIT;
    --END LOOP;
    --END LOOP;
  
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END calculate_proc;

  PROCEDURE drop_period_data(p_year_label   IN VARCHAR2,
                             p_period_label IN VARCHAR2) IS
    l_year_id   NUMBER;
    l_period_id NUMBER;
  BEGIN
    SELECT y.id
      INTO l_year_id
      FROM -- stgs.tbhfm_year y
      dwstg.TBHFM_YEAR y -- by dengj@besthelp 20130822 数据中心拆分

     WHERE y.label = p_year_label;
  
    SELECT p.id
      INTO l_period_id
      FROM --stgs.tbhfm_period p
        dwstg.TBHFM_PERIOD p 
          -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.label = p_period_label;
  
    DELETE FROM fact_performance_data l
     WHERE l.yearid = l_year_id
       AND l.periodid = l_period_id;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END drop_period_data;

  PROCEDURE main(p_year_label IN VARCHAR2, p_period_label IN VARCHAR2) IS
  BEGIN
    drop_period_data(p_year_label, p_period_label);
    calculate_proc(p_year_label, p_period_label, 'Dec');
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END main;
END dw_hfm_calculate_account;
/

prompt
prompt Creating package body DW_HFM_CALCULATE_ALL
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_hfm_calculate_all IS
  PROCEDURE main IS
    l_year_label   VARCHAR2(100);
    l_period_label VARCHAR2(100);
    l_yearid       NUMBER;
    l_periodid     NUMBER;
    l_count        NUMBER;
  BEGIN
    SELECT t.yearid, t.monthid
      INTO l_yearid, l_periodid
      FROM -- stgs.tbhfm_usage_track t
      dwstg.TBHFM_USAGE_TRACK t
      -- by dengj@besthelp 20130822 数据中心拆分

     WHERE rownum = 1
     ORDER BY t.id DESC;
  
    SELECT COUNT(1)
      INTO l_count
      FROM -- stgs.tbhfm_period p
      dwstg.TBHFM_PERIOD p
  -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.id = l_periodid
       AND p.label = 'Adj2';
    IF l_count = 1 THEN
      l_periodid := l_periodid - 1;
    END IF;
  
    SELECT y.label
      INTO l_year_label
      FROM -- stgs.tbhfm_year y
      dwstg.tbhfm_year y -- by dengj@besthelp 20130822 数据中心拆分
     WHERE y.id = l_yearid;
  
    SELECT p.label
      INTO l_period_label
      FROM -- stgs.tbhfm_period p
       dwstg.tbhfm_period p -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.id = l_periodid;
  
    dw_hfm_calculate_account.main(l_year_label, l_period_label);
    dw_hfm_calculate_score.main(l_year_label, l_period_label);
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END main;
  --按期间计算数据
  Procedure calc_period(p_year varchar2, p_period varchar2) is
    l_year   varchar2(240);
    l_period varchar2(240);
  begin
    l_year := p_year;
    if (p_period = 'Adj2') then
      l_period := 'Dec';
    else
      l_period := p_period;
    end if;    
    dw_hfm_calculate_account.main(l_year, l_period);
    dw_hfm_calculate_score.main(l_year, l_period);
  exception
    when others then
      raise_application_error(-20001, SQLERRM);
  end calc_period;
END dw_hfm_calculate_all;
/

prompt
prompt Creating package body DW_HFM_CALCULATE_SCORE
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_hfm_calculate_score IS
  PROCEDURE calculate_entity_score(p_year_label   IN VARCHAR2,
                                   p_period_label IN VARCHAR2,
                                   p_entty_label  IN VARCHAR2) IS
    l_period_id       NUMBER;
    l_entity_id       NUMBER;
    l_point1          NUMBER;
    l_point2          NUMBER;
    l_point3          NUMBER;
    l_point4          NUMBER;
    l_point5          NUMBER;
    l_target_weight   NUMBER;
    l_point_type      VARCHAR2(100);
    l_score           NUMBER;
    l_score_adj       NUMBER;
    l_total_score     NUMBER := 0;
    l_first_period_id NUMBER;
    l_period_num      NUMBER;
    l_date            VARCHAR2(100);
    l_count           NUMBER;
  BEGIN
    SELECT p.id
      INTO l_period_id
      FROM --hfm.tbhfm_period p
      dwstg.HFM_TBHFM_PERIOD p
      -- by dengj@besthelp 20130822 数据中心拆分

     WHERE p.label = p_period_label;
  
    SELECT DISTINCT e.id
      INTO l_entity_id
      FROM-- hfm.tbhfm_entity e
      dwstg.HFM_TBHFM_ENTITY e
       -- by dengj@besthelp 20130822 数据中心拆分
     WHERE e.label = p_entty_label;
  
    SELECT p.id
      INTO l_first_period_id
      FROM-- hfm.tbhfm_period p
       dwstg.HFM_TBHFM_PERIOD p
      -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.label = 'Jan';
  
    FOR s IN (SELECT *
                FROM fact_performance_data l
               WHERE l.yearid = to_number(p_year_label)
                 AND l.periodid = l_period_id
                 AND l.entityid = l_entity_id
                 AND l.actual_ddata IS NOT NULL
                 AND l.actual_ddata <> 0) LOOP
    
      IF l_period_id - l_first_period_id > 6 THEN
        l_period_num := l_period_id - l_first_period_id;
      ELSE
        l_period_num := l_period_id - l_first_period_id + 1;
      END IF;
      l_date := p_year_label || to_char(l_period_num);
      SELECT COUNT(1)
        INTO l_count
        FROM -- dm.dl_target_sets             ts,
        dwstg.DL_TARGET_SETS ts,-- by dengj@besthelp 20130822 数据中心拆分 
             dim_performance_account       a,
            -- stgs.stg_hfm_entity_nolevel_v e
            dwstg.STG_HFM_ENTITY_NOLEVEL_ALL e
            -- by dengj@besthelp 20130822 数据中心拆分

       WHERE a.label = ts.target_code
         AND a.id = s.accountid
         AND s.entityid = e.id
         AND e.userdefined3 = ts.entity_type
         AND to_date(l_date, 'YYYYMM') >= ts.start_date
         AND to_date(l_date, 'YYYYMM') <= ts.end_date;
      IF l_count = 1 THEN
        SELECT ts.point1,
               ts.point2,
               ts.point3,
               ts.point4,
               ts.point5,
               ts.point_type,
               ts.target_weight
          INTO l_point1,
               l_point2,
               l_point3,
               l_point4,
               l_point5,
               l_point_type,
               l_target_weight
          FROM-- dm.dl_target_sets             ts,
          dwstg.DL_TARGET_SETS ts,-- by dengj@besthelp 20130822 数据中心拆分 
               dim_performance_account       a,
               --stgs.stg_hfm_entity_nolevel_v e
               dwstg.STG_HFM_ENTITY_NOLEVEL_ALL e -- by dengj@besthelp 20130822 数据中心拆分 
         WHERE a.label = ts.target_code
           AND a.id = s.accountid
           AND to_date(l_date, 'YYYYMM') >= ts.start_date
           AND to_date(l_date, 'YYYYMM') <= ts.end_date
           AND e.label = p_entty_label
           AND e.userdefined3 = ts.entity_type;
      
        IF l_point_type = 'DL_FORWARD' THEN
          IF s.actual_ddata >= l_point1 THEN
            l_score := 1;
          ELSIF s.actual_ddata >= l_point2 THEN
            l_score     := 0.8;
            l_score_adj := (s.actual_ddata - l_point2) /
                           (l_point1 - l_point2) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata >= l_point3 THEN
            l_score     := 0.6;
            l_score_adj := (s.actual_ddata - l_point3) /
                           (l_point2 - l_point3) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata >= l_point4 THEN
            l_score     := 0.4;
            l_score_adj := (s.actual_ddata - l_point4) /
                           (l_point3 - l_point4) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata >= l_point5 THEN
            l_score     := 0.2;
            l_score_adj := (s.actual_ddata - l_point5) /
                           (l_point4 - l_point5) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata < l_point5 THEN
            l_score := 0;
          END IF;
        ELSIF l_point_type = 'DL_REVERSE' THEN
          IF s.actual_ddata <= l_point1 THEN
            l_score := 1;
          ELSIF s.actual_ddata <= l_point2 THEN
            l_score     := 0.8;
            l_score_adj := (s.actual_ddata - l_point2) /
                           (l_point1 - l_point2) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata <= l_point3 THEN
            l_score     := 0.6;
            l_score_adj := (s.actual_ddata - l_point3) /
                           (l_point2 - l_point3) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata <= l_point4 THEN
            l_score     := 0.4;
            l_score_adj := (s.actual_ddata - l_point4) /
                           (l_point3 - l_point4) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata <= l_point5 THEN
            l_score     := 0.2;
            l_score_adj := (s.actual_ddata - l_point5) /
                           (l_point4 - l_point5) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata > l_point5 THEN
            l_score := 0;
          END IF;
        END IF;
        l_total_score := l_total_score + l_score * l_target_weight;
        UPDATE fact_performance_data l
           SET l.actual_score = l_score * l_target_weight
         WHERE l.yearid = to_number(p_year_label)
           AND l.periodid = l_period_id
           AND l.entityid = l_entity_id
           AND l.accountid = s.accountid;
      END IF;
      --全局公司
      SELECT COUNT(1)
        INTO l_count
        FROM-- dm.dl_target_sets             ts,
        dwstg.DL_TARGET_SETS ts,-- by dengj@besthelp 20130822 数据中心拆分 
             dim_performance_account       a,
           --  stgs.stg_hfm_entity_nolevel_v e
           dwstg.STG_HFM_ENTITY_NOLEVEL_ALL e -- by dengj@besthelp 20130822 数据中心拆分 
       WHERE a.label = ts.target_code
         AND a.id = s.accountid
         AND s.entityid = e.id
         AND e.userdefined3 IS NOT NULL
         AND to_date(l_date, 'YYYYMM') >= ts.start_date
         AND to_date(l_date, 'YYYYMM') <= ts.end_date
         AND ts.entity_type = 'B01';
    
      IF l_count = 1 THEN
        SELECT ts.point1,
               ts.point2,
               ts.point3,
               ts.point4,
               ts.point5,
               ts.point_type,
               ts.target_weight
          INTO l_point1,
               l_point2,
               l_point3,
               l_point4,
               l_point5,
               l_point_type,
               l_target_weight
          FROM-- dm.dl_target_sets             ts,
          dwstg.DL_TARGET_SETS ts,-- by dengj@besthelp 20130822 数据中心拆分 
               dim_performance_account       a,
              -- stgs.stg_hfm_entity_nolevel_v e
              dwstg.STG_HFM_ENTITY_NOLEVEL_ALL e -- by dengj@besthelp 20130822 数据中心拆分 
         WHERE a.label = ts.target_code
           AND a.id = s.accountid
           AND to_date(l_date, 'YYYYMM') >= ts.start_date
           AND to_date(l_date, 'YYYYMM') <= ts.end_date
           AND e.label = p_entty_label
           AND ts.entity_type = 'B01'
           AND e.userdefined3 IS NOT NULL;
      
        IF l_point_type = 'DL_FORWARD' THEN
          IF s.actual_ddata >= l_point1 THEN
            l_score := 1;
          ELSIF s.actual_ddata >= l_point2 THEN
            l_score     := 0.8;
            l_score_adj := (s.actual_ddata - l_point2) /
                           (l_point1 - l_point2) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata >= l_point3 THEN
            l_score     := 0.6;
            l_score_adj := (s.actual_ddata - l_point3) /
                           (l_point2 - l_point3) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata >= l_point4 THEN
            l_score     := 0.4;
            l_score_adj := (s.actual_ddata - l_point4) /
                           (l_point3 - l_point4) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata >= l_point5 THEN
            l_score     := 0.2;
            l_score_adj := (s.actual_ddata - l_point5) /
                           (l_point4 - l_point5) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata < l_point5 THEN
            l_score := 0;
          END IF;
        ELSIF l_point_type = 'DL_REVERSE' THEN
          IF s.actual_ddata <= l_point1 THEN
            l_score := 1;
          ELSIF s.actual_ddata <= l_point2 THEN
            l_score     := 0.8;
            l_score_adj := (s.actual_ddata - l_point2) /
                           (l_point1 - l_point2) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata <= l_point3 THEN
            l_score     := 0.6;
            l_score_adj := (s.actual_ddata - l_point3) /
                           (l_point2 - l_point3) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata <= l_point4 THEN
            l_score     := 0.4;
            l_score_adj := (s.actual_ddata - l_point4) /
                           (l_point3 - l_point4) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata <= l_point5 THEN
            l_score     := 0.2;
            l_score_adj := (s.actual_ddata - l_point5) /
                           (l_point4 - l_point5) * (0.2);
            l_score     := l_score + l_score_adj;
          ELSIF s.actual_ddata > l_point5 THEN
            l_score := 0;
          END IF;
        END IF;
        l_total_score := l_total_score + l_score * l_target_weight;
        UPDATE fact_performance_data l
           SET l.actual_score = l_score * l_target_weight
         WHERE l.yearid = to_number(p_year_label)
           AND l.periodid = l_period_id
           AND l.entityid = l_entity_id
           AND l.accountid = s.accountid;
      END IF;
    END LOOP;
    INSERT INTO fact_performance_data
      (yearid, periodid, entityid, accountid, actual_score)
    VALUES
      (to_number(p_year_label),
       l_period_id,
       l_entity_id,
       109,
       l_total_score);
  
  EXCEPTION
    WHEN no_data_found THEN
      l_total_score := NULL;
    WHEN too_many_rows THEN
      l_total_score := NULL;
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END calculate_entity_score;

  PROCEDURE calculate_score_rank(p_year_label   IN VARCHAR2,
                                 p_period_label IN VARCHAR2) IS
    l_year_id   NUMBER;
    l_period_id NUMBER;
    l_count     NUMBER;
  BEGIN
    SELECT y.id
      INTO l_year_id
      FROM -- stgs.tbhfm_year y
      dwstg.TBHFM_YEAR y -- by dengj@besthelp 20130822 数据中心拆分 

     WHERE y.label = p_year_label;
  
    SELECT p.id
      INTO l_period_id
      FROM -- stgs.tbhfm_period p
      dwstg.tbhfm_period p -- by dengj@besthelp 20130822 数据中心拆分 
     WHERE p.label = p_period_label;
  
    /*FOR e IN (SELECT DISTINCT i.label FROM stgs.tbhfm_entity i) LOOP
      SELECT *
        FROM 
    END LOOP;*/
  
    FOR a IN (SELECT * FROM dim_performance_account a) LOOP
      l_count := 1;
      FOR f IN (SELECT *
                  FROM fact_performance_data d,
                     --  stgs.stg_hfm_entity_nolevel_v e
                     dwstg.STG_HFM_ENTITY_NOLEVEL_ALL e -- by dengj@besthelp 20130822 数据中心拆分 
                 WHERE d.yearid = l_year_id
                   AND d.periodid = l_period_id
                   AND d.accountid = a.id
                   AND d.entityid =e.id
                   AND e.userdefined3 IS NOT NULL
                 ORDER BY nvl(d.actual_score, -1) DESC) LOOP
        UPDATE fact_performance_data d
           SET d.score_rank = l_count
         WHERE d.yearid = l_year_id
           AND d.periodid = l_period_id
           AND d.accountid = a.id
           AND d.entityid = f.entityid;
        l_count := l_count + 1;
      END LOOP;
    END LOOP;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END calculate_score_rank;

  PROCEDURE drop_period_data(p_year_label   IN VARCHAR2,
                             p_period_label IN VARCHAR2) IS
    l_year_id   NUMBER;
    l_period_id NUMBER;
  BEGIN
    SELECT y.id
      INTO l_year_id
      FROM-- stgs.tbhfm_year y
      dwstg.TBHFM_YEAR y -- by dengj@besthelp 20130822 数据中心拆分 
     WHERE y.label = p_year_label;
  
    SELECT p.id
      INTO l_period_id
      FROM --stgs.tbhfm_period p
       dwstg.tbhfm_period p -- by dengj@besthelp 20130822 数据中心拆分 
     WHERE p.label = p_period_label;
  
    DELETE FROM fact_performance_data l
     WHERE l.yearid = l_year_id
       AND l.periodid = l_period_id
       AND l.accountid = 109;
  
    UPDATE fact_performance_data l
       SET l.actual_score = NULL,
           l.score_rank = NULL
     WHERE l.yearid = l_year_id
       AND l.periodid = l_period_id;
       
    
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END drop_period_data;

  PROCEDURE main(p_year_label IN VARCHAR2, p_period_label IN VARCHAR2) IS
    l_year_label   VARCHAR2(100);
    l_period_label VARCHAR2(100);
  BEGIN
    l_year_label   := p_year_label;
    l_period_label := p_period_label;
    drop_period_data(l_year_label, l_period_label);
    FOR e IN (SELECT DISTINCT i.label FROM --stgs.tbhfm_entity i
      dwstg.TBHFM_ENTITY i-- by dengj@besthelp 20130822 数据中心拆分
      ) LOOP
      calculate_entity_score(l_year_label, l_period_label, e.label);
      COMMIT;
    END LOOP;
    
    calculate_score_rank(l_year_label, l_period_label);
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END main;

END dw_hfm_calculate_score;
/

prompt
prompt Creating package body DW_HFM_DELETE_DIM_FACT
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_hfm_delete_dim_fact IS
  PROCEDURE main IS
    l_yearid     NUMBER;
    l_periodid   NUMBER;
    l_count      NUMBER;
    l_dec_id     NUMBER;
  BEGIN
    DELETE FROM DIM_HFM_ACCOUNT;
    DELETE FROM DIM_HFM_CUSTOM1;
    DELETE FROM DIM_HFM_CUSTOM2;
    DELETE FROM DIM_HFM_CUSTOM3;
    DELETE FROM DIM_HFM_CUSTOM4;
    DELETE FROM DIM_HFM_ICP;
    DELETE FROM DIM_HFM_PERIOD;
    DELETE FROM DIM_HFM_SCENARIO;
    DELETE FROM DIM_HFM_VALUE;
    DELETE FROM DIM_HFM_VIEW;
    DELETE FROM DIM_HFM_YEAR;
    
    SELECT t.yearid,t.monthid
      INTO l_yearid,l_periodid
      FROM -- stgs.tbhfm_usage_track t
      dwstg.TBHFM_USAGE_TRACK t -- by dengj@besthelp 20130822 数据中心拆分
     WHERE rownum = 1
     ORDER BY t.id DESC;
     
     
    SELECT COUNT(1)
      INTO l_count
      FROM -- stgs.tbhfm_period p
      dwstg.tbhfm_period p -- by dengj@besthelp 20130822 数据中心拆分
     WHERE p.id = l_periodid
       AND p.label = 'Adj2';
       
    SELECT p.id
        INTO l_dec_id
        FROM-- hfm.tbhfm_period p
           dwstg.hfm_tbhfm_period p -- by dengj@besthelp 20130822 数据中心拆分
       WHERE p.label = 'Dec';
    IF l_count = 1 THEN
      DELETE FROM FACT_HFM_DATA_NOLEVEL l
      WHERE l.yearid = l_yearid AND l.periodid = l_dec_id;  
    ELSE
      DELETE FROM FACT_HFM_DATA_NOLEVEL l
      WHERE l.yearid = l_yearid AND l.periodid = l_periodid;     
    END IF;
    COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END main;
END dw_hfm_delete_dim_fact;
/

prompt
prompt Creating package body DW_HFM_HANDLE_DATA_PKG
prompt ============================================
prompt
create or replace package body tbdw.dw_hfm_handle_data_pkg is
  --处理HFM的实际数据
  procedure handle_data is
  begin
  --写入数据
    insert into TBDW.FACT_HFM_DATA_NOLEVEL T
      (SCENARIOID,
       YEARID,
       PERIODID,
       VIEWID,
       ENTITYID,
       PARENTID,
       VALUEID,
       ACCOUNTID,
       ICPID,
       CUSTOM1ID,
       CUSTOM2ID,
       CUSTOM3ID,
       CUSTOM4ID,
       DDATA)
      select SCENARIOID,
             YEARID,
             PERIODID,
             VIEWID,
             ENTITYID,
             PARENTID,
             VALUEID,
             ACCOUNTID,
             ICPID,
             CUSTOM1ID,
             CUSTOM2ID,
             CUSTOM3ID,
             CUSTOM4ID,
             DDATA      
        from --STGS.STG_HFM_DATA_V
        dwstg.STG_HFM_DATA_ALL -- by dengj@besthelp 20130822 数据中心拆分
        ;
    commit;
  end;
end dw_hfm_handle_data_pkg;
/

prompt
prompt Creating package body DW_HFM_UTILITY
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_hfm_utility IS
  --entity
  PROCEDURE calc_entity_child(p_parent_id IN NUMBER, p_level IN NUMBER) IS
    l_dispay_order NUMBER;
  BEGIN
    FOR r IN (SELECT *
                FROM --stgs.tbhfm_entity l
                dwstg.tbhfm_entity l -- by dengj@besthelp 20130822 数据中心拆分
               WHERE l.parentid = p_parent_id
               ORDER BY l.id) LOOP
      l_dispay_order := display_order;
      UPDATE tbdw.dim_hfm_entity_nolevel a
         SET a.display_order = l_dispay_order
       WHERE a.display_order IS NULL
         AND a.id = r.id;
      display_order := l_dispay_order + 1;
      COMMIT;
      IF r.id < 10000 THEN
        calc_entity_child(r.id, p_level + 1);
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END calc_entity_child;
  --account
  PROCEDURE calc_account_child(p_parent_id IN NUMBER, p_level IN NUMBER) IS
    l_dispay_order NUMBER;
  BEGIN
    FOR r IN (SELECT *
                FROM -- stgs.tbhfm_account l
            dwstg.tbhfm_account l    -- by dengj@besthelp 20130822 数据中心拆分
               WHERE l.parentid = p_parent_id
               ORDER BY l.id) LOOP
      l_dispay_order := display_order;
      UPDATE tbdw.dim_hfm_account a
         SET a.display_order = l_dispay_order
       WHERE a.display_order IS NULL
         AND a.id = r.id;
      display_order := l_dispay_order + 1;
      COMMIT;
      IF r.id < 10000 THEN
        calc_account_child(r.id, p_level + 1);
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END calc_account_child;
  --custom1   
  PROCEDURE calc_custom1_child(p_parent_id IN NUMBER, p_level IN NUMBER) IS
    l_dispay_order NUMBER;
  BEGIN
    FOR r IN (SELECT *
                FROM --stgs.tbhfm_custom1 l
                dwstg.tbhfm_custom1 l-- by dengj@besthelp 20130822 数据中心拆分

               WHERE l.parentid = p_parent_id
               ORDER BY l.id) LOOP
      l_dispay_order := display_order;
      UPDATE tbdw.dim_hfm_custom1 a
         SET a.display_order = l_dispay_order
       WHERE a.display_order IS NULL
         AND a.id = r.id;
      display_order := l_dispay_order + 1;
      COMMIT;
      IF r.id < 10000 THEN
        calc_custom1_child(r.id, p_level + 1);
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END calc_custom1_child;
  /*--custom2  
    PROCEDURE calc_custom2_child(p_parent_id IN NUMBER, p_level IN NUMBER) IS
      l_dispay_order NUMBER;
    BEGIN
      FOR r IN (SELECT *
                  FROM stgs.tbhfm_custom2 l
                 WHERE l.parentid = p_parent_id
                 ORDER BY l.id) LOOP
        l_dispay_order := display_order;
        UPDATE tbdw.dim_hfm_custom2 a
           SET a.display_order = l_dispay_order
         WHERE a.display_order IS NULL
           AND a.id = r.id;
        display_order := l_dispay_order + 1;
        COMMIT;
        IF r.id < 10000 THEN
          calc_custom2_child(r.id, p_level + 1);
        END IF;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        raise_application_error(-20001, SQLERRM);
        dbms_output.put_line(SQLERRM);
    END calc_custom2_child;
  --custom3    
    PROCEDURE calc_custom3_child(p_parent_id IN NUMBER, p_level IN NUMBER) IS
      l_dispay_order NUMBER;
    BEGIN
      FOR r IN (SELECT *
                  FROM stgs.tbhfm_custom3 l
                 WHERE l.parentid = p_parent_id
                 ORDER BY l.id) LOOP
        l_dispay_order := display_order;
        UPDATE tbdw.dim_hfm_custom3 a
           SET a.display_order = l_dispay_order
         WHERE a.display_order IS NULL
           AND a.id = r.id;
        display_order := l_dispay_order + 1;
        COMMIT;
        IF r.id < 10000 THEN
          calc_custom3_child(r.id, p_level + 1);
        END IF;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        raise_application_error(-20001, SQLERRM);
        dbms_output.put_line(SQLERRM);
    END calc_custom3_child;
  --custom4    
    PROCEDURE calc_custom4_child(p_parent_id IN NUMBER, p_level IN NUMBER) IS
      l_dispay_order NUMBER;
    BEGIN
      FOR r IN (SELECT *
                  FROM hfm.tbhfm_custom4 l
                 WHERE l.parentid = p_parent_id
                 ORDER BY l.id) LOOP
        l_dispay_order := display_order;
        UPDATE tbdw.dim_hfm_custom4 a
           SET a.display_order = l_dispay_order
         WHERE a.display_order IS NULL
           AND a.id = r.id;
        display_order := l_dispay_order + 1;
        COMMIT;
        IF r.id < 10000 THEN
          calc_custom4_child(r.id, p_level + 1);
        END IF;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        raise_application_error(-20001, SQLERRM);
        dbms_output.put_line(SQLERRM);
    END calc_custom4_child;*/
  


  PROCEDURE main IS
  BEGIN
    UPDATE tbdw.dim_hfm_entity_nolevel a SET a.display_order = NULL;
    UPDATE tbdw.dim_hfm_account a SET a.display_order = NULL;
    UPDATE tbdw.dim_hfm_custom1 a SET a.display_order = NULL;

    display_order := 1;
    calc_account_child(-1, 1);
    display_order := 1;
    calc_custom1_child(-1, 1);
    display_order := 1;
    calc_entity_child(-1, 1);
    
   /* calc_opening_balance;
    calc_ob_all_period;*/

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END main;
END dw_hfm_utility;
/

prompt
prompt Creating package body DW_HP_METEDATA_PKG
prompt ========================================
prompt
create or replace package body tbdw.DW_HP_METEDATA_PKG IS

  --处理购货单位维
  PROCEDURE TBCWYS_PRODUCTR_BUYER IS
    buyer_table DIM_HP_BUYER%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_BUYER';
    FOR i IN ( --1.一般情况:以内部公司合计下面展开，同时把省区省办提上来做成平级。
              SELECT 'B0000' code1,
                      '购货单位汇总' name1,
                      'BNBHJ' code2,
                      '内部公司合计' name2,
                      t.membername code3,
                      t.alias name3
                FROM -- hp.TBCWYS_PRODUCTR_BUYER t
                dwstg.TBCWYS_PRODUCTR_BUYER t-- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t.parentname = 'BNBHJ'
                 AND t.membername <> 'BQBHZ'
                  OR t.parentname = 'BQBHZ'
              --2.特殊情况 单独放在汇总下面，如果以后新增成员，则添加: 不分购货单位，外部客户 
              UNION
              SELECT 'B0000' code1,
                     '购货单位汇总' name1,
                     t.membername code2,
                     decode(t.alias, '不分购货单位', '购货单位_缺省', t.alias) name2,
                     t.membername code3,
                     decode(t.alias, '不分购货单位', '购货单位_缺省', t.alias) name3
                FROM --hp.TBCWYS_PRODUCTR_BUYER t
                dwstg.TBCWYS_PRODUCTR_BUYER t-- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t.membername IN ('B0001', 'BWBKH')) LOOP
      buyer_table.level1_code := i.code1;
      buyer_table.level1_name := i.name1;
      buyer_table.level2_code := i.code2;
      buyer_table.level2_name := i.name2;
      buyer_table.level3_code := i.code3;
      buyer_table.level3_name := i.name3;
      insert into DIM_HP_BUYER values buyer_table;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_BUYER;

  --处理机构
  PROCEDURE TBCWYS_PRODUCTR_DEPARTMENT IS
    department_table DIM_HP_DEPARTMENT%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_DEPARTMENT';
    FOR i IN ( --1.一般情况
              SELECT 'Dp00' code1,
                      '机构汇总' name1,
                      t1.membername code2,
                      t1.alias name2,
                      t2.membername code3,
                      t2.alias name3,
                      t3.membername code4,
                      t3.alias name4,
                      t4.membername code5,
                      t4.alias name5,
                      t4.province province --省份
                FROM /*hp.TBCWYS_PRODUCTR_DEPARTMENT t1,
                      hp.TBCWYS_PRODUCTR_DEPARTMENT t2,
                      hp.TBCWYS_PRODUCTR_DEPARTMENT t3,
                      hp.TBCWYS_PRODUCTR_DEPARTMENT t4*/
                      dwstg.TBCWYS_PRODUCTR_DEPARTMENT t1,
                      dwstg.TBCWYS_PRODUCTR_DEPARTMENT t2,
                      dwstg.TBCWYS_PRODUCTR_DEPARTMENT t3,
                      dwstg.TBCWYS_PRODUCTR_DEPARTMENT t4
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.parentname = 'DpYXHZ'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
              --2.特殊情况 和buyer一样处理: 不分机构，工厂自销 
              UNION
              SELECT 'Dp00' code1,
                     '机构汇总' name1,
                     t1.membername code2,
                     t1.alias name2,
                     t1.membername code3,
                     t1.alias name3,
                     t1.membername code4,
                     t1.alias name4,
                     t1.membername code5,
                     t1.alias name5,
                     t1.province province
                FROM --hp.TBCWYS_PRODUCTR_DEPARTMENT t1
                dwstg.TBCWYS_PRODUCTR_DEPARTMENT t1 
                      
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.membername IN ('Dp001', 'DpGCZX')) LOOP
      department_table.level1_code := i.code1;
      department_table.level1_name := i.name1;
      department_table.level2_code := i.code2;
      department_table.level2_name := i.name2;
      department_table.level3_code := i.code3;
      department_table.level3_name := i.name3;
      department_table.level4_code := i.code4;
      department_table.level4_name := i.name4;
      department_table.level5_code := i.code5;
      department_table.level5_name := i.name5;
      department_table.province    := substr(i.province,
                                             3,
                                             LENGTH(i.province));
      if (i.code5 is not null) then
        insert into Dim_Hp_Department values department_table;
      end if;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_DEPARTMENT;

  --处理实体
  PROCEDURE TBCWYS_PRODUCTR_ENTITY IS
    entity_table DIM_HP_ENTITY%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_ENTITY';
    FOR i IN ( --1.一般情况
              SELECT 'EGFHB' code1,
                      '股份合并' name1,
                      t1.membername code2,
                      t1.alias name2,
                      t2.membername code3,
                      t2.alias name3,
                      decode(t3.membername, NULL, t2.membername, t3.membername) code4,
                      decode(t3.alias, NULL, t2.alias, t3.alias) name4,
                      (CASE
                        WHEN t4.membername IS NOT NULL THEN
                         t4.membername
                        WHEN t4.membername IS NULL AND
                             t3.membername IS NOT NULL THEN
                         t3.membername
                        WHEN t4.membername IS NULL AND t3.membername IS NULL AND
                             t2.membername IS NOT NULL THEN
                         t2.membername
                      END) code5,
                      (CASE
                        WHEN t4.alias IS NOT NULL THEN
                         t4.alias
                        WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                         t3.alias
                        WHEN t4.alias IS NULL AND t3.alias IS NULL AND
                             t2.alias IS NOT NULL THEN
                         t2.alias
                      END) name5
                FROM /*hp.TBCWYS_PRODUCTR_ENTITY t1,
                      hp.TBCWYS_PRODUCTR_ENTITY t2,
                      hp.TBCWYS_PRODUCTR_ENTITY t3,
                      hp.TBCWYS_PRODUCTR_ENTITY t4*/
                      dwstg.TBCWYS_PRODUCTR_ENTITY t1,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t2,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t3,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t4
                      -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t1.membername IN ('EZXHB', 'EQTDW')
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
              --2.特殊情况，同上处理 :  青啤本部 
              UNION
              SELECT 'EGFHB' code1,
                     '股份合并' name1,
                     'EQTDW' code2,
                     '其他非经营性公司' name2,
                     t1.membername code3,
                     t1.alias name3,
                     t1.membername code4,
                     t1.alias name4,
                     t1.membername code5,
                     t1.alias name5
                FROM-- hp.TBCWYS_PRODUCTR_ENTITY t1
                dwstg.TBCWYS_PRODUCTR_ENTITY t1
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.membername IN ('E0100')
              --3.特殊情况，去掉龙东汇总 ，替换成密山、兴凯湖 
              UNION
              SELECT 'EGFHB' code1,
                     '股份合并' name1,
                     'EZXHB' code2,
                     '两大中心合并' name2,
                     'EZZHB' code3,
                     '制造中心合并' name3,
                     'EDBQY' code4,
                     '东北区域' name4,
                     t1.membername code5,
                     t1.alias name5
                FROM-- hp.TBCWYS_PRODUCTR_ENTITY t1
                dwstg.TBCWYS_PRODUCTR_ENTITY t1
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.membername IN ('E0401', 'E0403')
              --4.银麦合并不用，要它下面的孩子
              --ADD BY HAND 20121214
              UNION
              SELECT 'EGFHB' code1,
                     '股份合并' name1,
                     t1.membername code2,
                     t1.alias name2,
                     t2.membername code3,
                     t2.alias name3,
                     t3.membername code4,
                     t3.alias name4,
                     t5.membername code5,
                     t5.alias name5
                FROM/* hp.TBCWYS_PRODUCTR_ENTITY t1,
                     hp.TBCWYS_PRODUCTR_ENTITY t2,
                     hp.TBCWYS_PRODUCTR_ENTITY t3,
                     hp.TBCWYS_PRODUCTR_ENTITY t4,
                     hp.TBCWYS_PRODUCTR_ENTITY t5*/
                     dwstg.TBCWYS_PRODUCTR_ENTITY t1,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t2,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t3,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t4,
                      dwstg.TBCWYS_PRODUCTR_ENTITY t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.membername IN ('EZXHB', 'EQTDW')
                 AND t2.parentname = t1.membername
                 AND t3.parentname = t2.membername
                 AND t4.parentname = t3.membername
                 AND t4.membername = 'YMHB'
                 AND t5.parentname = t4.membername) LOOP
      entity_table.level1_code := i.code1;
      entity_table.level1_name := i.name1;
      entity_table.level2_code := i.code2;
      entity_table.level2_name := i.name2;
      entity_table.level3_code := i.code3;
      entity_table.level3_name := i.name3;
      entity_table.level4_code := i.code4;
      entity_table.level4_name := i.name4;
      entity_table.level5_code := i.code5;
      entity_table.level5_name := i.name5;
      insert into DIM_HP_ENTITY values entity_table;
    end loop;
    --ADD BY HAND 20121214不要银麦合并
    delete from DIM_HP_ENTITY dhe
     where 1 = 1
       and dhe.level5_code = 'YMHB';
    COMMIT;
  END TBCWYS_PRODUCTR_ENTITY;

  --处理对接维
  PROCEDURE TBCWYS_PRODUCTR_JOINT IS
    joint_table DIM_HP_JOINT%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_JOINT';
    FOR i IN (SELECT t1.membername code1, t1.alias name1
                FROM --hp.TBCWYS_PRODUCTR_JOINT t1
                dwstg.TBCWYS_PRODUCTR_JOINT t1
                -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t1.parentname = 'J00') LOOP
      joint_table.joint_code := i.code1;
      joint_table.joint_name := i.name1;
    
      insert into DIM_HP_JOINT values joint_table;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_JOINT;

  --处理物流方式
  PROCEDURE TBCWYS_PRODUCTR_LOGISTIC IS
    logistic_table DIM_HP_LOGISTIC%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_LOGISTIC';
    FOR i IN (SELECT 'L00' code1,
                     '物流方式汇总' name1,
                     t1.membername code2,
                     decode(t1.alias,
                            '不分物流方式',
                            '物流方式_缺省',
                            t1.alias) name2
                FROM -- hp.TBCWYS_PRODUCTR_LOGISTIC t1
                dwstg.TBCWYS_PRODUCTR_LOGISTIC t1
                -- by dengj@besthelp 20130822 数据中心拆分
 
               WHERE 1 = 1
                 AND t1.parentname = 'L002'
                  OR t1.membername = 'L001') LOOP
      logistic_table.level1_code := i.code1;
      logistic_table.level1_name := i.name1;
      logistic_table.level2_code := i.code2;
      logistic_table.level2_name := i.name2;
      insert into DIM_HP_LOGISTIC values logistic_table;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_LOGISTIC;

  --处理期间
  PROCEDURE TBCWYS_PRODUCTR_PERIOD IS
    period_table DIM_HP_PERIOD%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_PERIOD';
    --新增period_id,year_id, quarter_id, month_id ,last_period_id        
    FOR i IN (SELECT t.alias || (CASE
                       WHEN t2.alias = '1月' THEN
                        '01'
                       WHEN t2.alias = '2月' THEN
                        '02'
                       WHEN t2.alias = '3月' THEN
                        '03'
                       WHEN t2.alias = '4月' THEN
                        '04'
                       WHEN t2.alias = '5月' THEN
                        '05'
                       WHEN t2.alias = '6月' THEN
                        '06'
                       WHEN t2.alias = '7月' THEN
                        '07'
                       WHEN t2.alias = '8月' THEN
                        '08'
                       WHEN t2.alias = '9月' THEN
                        '09'
                       WHEN t2.alias = '10月' THEN
                        '10'
                       WHEN t2.alias = '11月' THEN
                        '11'
                       WHEN t2.alias = '12月' THEN
                        '12'
                     END) PERIOD_ID,
                     (CASE
                       WHEN t2.alias = '1月' THEN
                        to_number(t.alias) - 1 || '12'
                       WHEN t2.alias = '2月' THEN
                        t.alias || '01'
                       WHEN t2.alias = '3月' THEN
                        t.alias || '02'
                       WHEN t2.alias = '4月' THEN
                        t.alias || '03'
                       WHEN t2.alias = '5月' THEN
                        t.alias || '04'
                       WHEN t2.alias = '6月' THEN
                        t.alias || '05'
                       WHEN t2.alias = '7月' THEN
                        t.alias || '06'
                       WHEN t2.alias = '8月' THEN
                        t.alias || '07'
                       WHEN t2.alias = '9月' THEN
                        t.alias || '08'
                       WHEN t2.alias = '10月' THEN
                        t.alias || '09'
                       WHEN t2.alias = '11月' THEN
                        t.alias || '10'
                       WHEN t2.alias = '12月' THEN
                        t.alias || '11'
                     END) last_period_id,
                     t.alias id1,
                     t.membername code1, --年
                     t.alias name1,
                     t.alias || decode(t1.membername,
                                       'Q1',
                                       '01',
                                       'Q2',
                                       '02',
                                       'Q3',
                                       '03',
                                       'Q4',
                                       '04',
                                       '00') id2,
                     t1.membername code2, --季度
                     t1.alias name2,
                     (CASE
                       WHEN t2.alias = '1月' THEN
                        01
                       WHEN t2.alias = '2月' THEN
                        02
                       WHEN t2.alias = '3月' THEN
                        03
                       WHEN t2.alias = '4月' THEN
                        04
                       WHEN t2.alias = '5月' THEN
                        05
                       WHEN t2.alias = '6月' THEN
                        06
                       WHEN t2.alias = '7月' THEN
                        07
                       WHEN t2.alias = '8月' THEN
                        08
                       WHEN t2.alias = '9月' THEN
                        09
                       WHEN t2.alias = '10月' THEN
                        10
                       WHEN t2.alias = '11月' THEN
                        11
                       WHEN t2.alias = '12月' THEN
                        12
                     END) id3,
                     t2.membername code3, --月
                     (CASE
                       WHEN t2.alias = '1月' THEN
                        '01月'
                       WHEN t2.alias = '2月' THEN
                        '02月'
                       WHEN t2.alias = '3月' THEN
                        '03月'
                       WHEN t2.alias = '4月' THEN
                        '04月'
                       WHEN t2.alias = '5月' THEN
                        '05月'
                       WHEN t2.alias = '6月' THEN
                        '06月'
                       WHEN t2.alias = '7月' THEN
                        '07月'
                       WHEN t2.alias = '8月' THEN
                        '08月'
                       WHEN t2.alias = '9月' THEN
                        '09月'
                       WHEN t2.alias = '10月' THEN
                        '10月'
                       WHEN t2.alias = '11月' THEN
                        '11月'
                       WHEN t2.alias = '12月' THEN
                        '12月'
                     END) name3
                FROM /*hp.TBCWYS_PRODUCTR_YEARS   t,
                     hp.TBCWYS_PRODUCTR_PERIODS t1,
                     hp.TBCWYS_PRODUCTR_PERIODS t2*/
                     dwstg.TBCWYS_PRODUCTR_YEARS   t,
                     dwstg.TBCWYS_PRODUCTR_PERIODS t1,
                     dwstg.TBCWYS_PRODUCTR_PERIODS t2
                     -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t.parentname = 'Years'
                 AND t1.parentname = 'YearTotal'
                 AND t2.parentname = t1.membername) LOOP
      period_table.period_id      := i.PERIOD_ID;
      period_table.last_period_id := i.last_period_id;
      period_table.year_id        := i.id1;
      period_table.year_code      := i.code1;
      period_table.year_name      := i.name1;
      period_table.quarter_id     := i.id2;
      period_table.quarter_code   := i.code2;
      period_table.quarter_name   := i.name2;
      period_table.month_id       := i.id3;
      period_table.month_code     := i.code3;
      period_table.month_name     := i.name3;
      insert into DIM_HP_PERIOD values period_table;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_PERIOD;

  --处理场景
  PROCEDURE TBCWYS_PRODUCTR_SCENARIO IS
    scenario_table DIM_HP_SCENARIO%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_SCENARIO';
    --新增场景：同期、上月实际,累计、全年预算
    FOR i IN (SELECT t1.membername scenario_code,
                     decode(t1.alias, '实际数', '当期实际', t1.alias) scenario_name
                FROM --hp.TBCWYS_PRODUCTR_SCENARIO t1
                dwstg.TBCWYS_PRODUCTR_SCENARIO t1 -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.parentname = 'SC0'
              UNION
              SELECT t1.membername || '_YTD' scenario_code,
                     '累计' || decode(t1.alias, '实际数', '当期实际', t1.alias) scenario_name
                FROM-- hp.TBCWYS_PRODUCTR_SCENARIO t1
                dwstg.TBCWYS_PRODUCTR_SCENARIO t1 -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t1.parentname = 'SC0'
              UNION
              SELECT 'SCTQ' code1, '同期实际' name1
                FROM dual t1
               where 1 = 1
              UNION
              SELECT 'SCTQ_YTD' code1, '累计同期实际' name1
                FROM dual t1
               where 1 = 1
              union
              select 'SCLP' SCENARIO_CODE, '上月实际' SCENARIO_NAME
                from DUAL DHS
               where 1 = 1
              UNION
              SELECT t1.membername || '_YT' scenario_code,
                     '全年' || t1.alias scenario_name
                FROM-- hp.TBCWYS_PRODUCTR_SCENARIO t1
                dwstg.TBCWYS_PRODUCTR_SCENARIO t1 -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t1.parentname = 'SC0'
                 AND T1.MEMBERNAME IN ('SC01', 'SC02')) LOOP
      scenario_table.scenario_code := i.scenario_code;
      scenario_table.scenario_name := i.scenario_name;
      insert into DIM_HP_SCENARIO values scenario_table;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_SCENARIO;

  --处理来源单位
  PROCEDURE TBCWYS_PRODUCTR_SOURCE IS
    source_table DIM_HP_SOURCE%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_SOURCE';
    FOR i IN (SELECT 'S0000' code1,
                     '来源单位汇总' name1,
                     t1.membername code2,
                     decode(t1.alias,
                            '不分来源单位',
                            '来源单位_缺省',
                            t1.alias) name2
                FROM --hp.TBCWYS_PRODUCTR_SOURCE t1
                dwstg.TBCWYS_PRODUCTR_SOURCE t1
                -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t1.parentname IN ('S0002', 'SMTGC')
                 AND t1.membername <> 'SMTGC'
                  OR t1.membername IN ('S0001')) LOOP
      source_table.level1_code := i.code1;
      source_table.level1_name := i.name1;
      source_table.level2_code := i.code2;
      source_table.level2_name := i.name2;
      insert into DIM_HP_SOURCE values source_table;
    end loop;
    COMMIT;
  END TBCWYS_PRODUCTR_SOURCE;

  -- TBCWYS_NONPRODU 科目维
  PROCEDURE TBCWYS_NONPRODU_ACCOUNT IS
    account_table DIM_HP_ACCOUNT%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_ACCOUNT';
    FOR i IN ( --1.间接费用一级、二级、三级
              SELECT t1.membername code1,
                      t1.alias      name1,
                      t2.membername code2,
                      t2.alias      name2,
                      t3.membername code3,
                      t3.alias      name3,
                      t3.membername code4,
                      t3.alias      name4,
                      t3.membername code5,
                      t3.alias      name5
                FROM/* hp.Tbcwys_Nonprodu_Account t1,
                      hp.Tbcwys_Nonprodu_Account t2,
                      hp.Tbcwys_Nonprodu_Account t3*/
                      dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3
                      -- by dengj@besthelp 20130822 数据中心拆分

               WHERE t1.membername = 'A3100000000000000'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
              --2.品牌费用一级、二级、三级、四级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code5,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A1201000000000000'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
              --3.运行费用一级、二级、三级、四级、五级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t5.membername IS NULL AND
                            t4.membername IS NOT NULL THEN
                        t4.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NULL THEN
                        t2.membername
                       WHEN t5.membername IS NOT NULL THEN
                        t5.membername
                     END) code5,
                     (CASE
                       WHEN t5.alias IS NULL AND t4.alias IS NOT NULL THEN
                        t4.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NULL THEN
                        t2.alias
                       WHEN t5.alias IS NOT NULL THEN
                        t5.alias
                     END) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4,
                     hp.Tbcwys_Nonprodu_Account t5*/
                      dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4,
                     dwstg.Tbcwys_Nonprodu_Account t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A1202000000000000'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
                 AND t5.parentname(+) = t4.membername
              UNION
              --4.财务费用一级、二级、三级
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code4,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name4,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code5,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3  
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A1205000000000000'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
              --5.营业外及其他一级、二级、三级、四级、五级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t5.membername IS NULL AND
                            t4.membername IS NOT NULL THEN
                        t4.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NULL THEN
                        t2.membername
                       WHEN t5.membername IS NOT NULL THEN
                        t5.membername
                     END) code5,
                     (CASE
                       WHEN t5.alias IS NULL AND t4.alias IS NOT NULL THEN
                        t4.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NULL THEN
                        t2.alias
                       WHEN t5.alias IS NOT NULL THEN
                        t5.alias
                     END) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4,
                     hp.Tbcwys_Nonprodu_Account t5*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4,
                     dwstg.Tbcwys_Nonprodu_Account t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A1207000000000000'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
                 AND t5.parentname(+) = t4.membername
              --6.管理费用一级、二级、三级、四级、五级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t5.membername IS NULL AND
                            t4.membername IS NOT NULL THEN
                        t4.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NULL THEN
                        t2.membername
                       WHEN t5.membername IS NOT NULL THEN
                        t5.membername
                     END) code5,
                     (CASE
                       WHEN t5.alias IS NULL AND t4.alias IS NOT NULL THEN
                        t4.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NULL THEN
                        t2.alias
                       WHEN t5.alias IS NOT NULL THEN
                        t5.alias
                     END) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4,
                     hp.Tbcwys_Nonprodu_Account t5*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4,
                     dwstg.Tbcwys_Nonprodu_Account t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A1203000000000000' --管理费用
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
                 AND t5.parentname(+) = t4.membername
              UNION
              --7.减值准备一级、二级、三级
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code4,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name4,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code5,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A1206000000000000' --减值准备
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
              --8.职工薪酬一级、二级、三级、四级、五级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername, NULL, t2.membername, t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t5.membername IS NULL AND
                            t4.membername IS NOT NULL THEN
                        t4.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NULL THEN
                        t2.membername
                       WHEN t5.membername IS NOT NULL THEN
                        t5.membername
                     END) code5,
                     (CASE
                       WHEN t5.alias IS NULL AND t4.alias IS NOT NULL THEN
                        t4.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NULL THEN
                        t2.alias
                       WHEN t5.alias IS NOT NULL THEN
                        t5.alias
                     END) name5
                FROM/* hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4,
                     hp.Tbcwys_Nonprodu_Account t5*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4,
                     dwstg.Tbcwys_Nonprodu_Account t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'A2010000000000000' --职工薪酬合计
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
                 AND t5.parentname(+) = t4.membername
              --9.直接人工薪酬合计一级、二级、三级、四级、五级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     NVL(t3.membername, t2.membername) code3,
                     NVL(t3.alias, t2.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t5.membername IS NULL AND
                            t4.membername IS NOT NULL THEN
                        t4.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NULL THEN
                        t2.membername
                       WHEN t5.membername IS NOT NULL THEN
                        t5.membername
                     END) code5,
                     (CASE
                       WHEN t5.alias IS NULL AND t4.alias IS NOT NULL THEN
                        t4.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NULL THEN
                        t2.alias
                       WHEN t5.alias IS NOT NULL THEN
                        t5.alias
                     END) name5
                FROM /*hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4,
                     hp.Tbcwys_Nonprodu_Account t5*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4,
                     dwstg.Tbcwys_Nonprodu_Account t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.alias = '直接人工薪酬合计' --直接人工薪酬合计
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
                 AND t5.parentname(+) = t4.membername
              --10.制造费用合计一级、二级、三级、四级、五级
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     NVL(t3.membername, t2.membername) code3,
                     NVL(t3.alias, t2.alias) name3,
                     (CASE
                       WHEN t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t4.membername IS NULL AND t3.membername IS NULL THEN
                        t2.membername
                       WHEN t4.membername IS NOT NULL THEN
                        t4.membername
                     END) code4,
                     (CASE
                       WHEN t4.alias IS NULL AND t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t4.alias IS NULL AND t3.alias IS NULL THEN
                        t2.alias
                       WHEN t4.alias IS NOT NULL THEN
                        t4.alias
                     END) name4,
                     (CASE
                       WHEN t5.membername IS NULL AND
                            t4.membername IS NOT NULL THEN
                        t4.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NOT NULL THEN
                        t3.membername
                       WHEN t5.membername IS NULL AND t4.membername IS NULL AND
                            t3.membername IS NULL THEN
                        t2.membername
                       WHEN t5.membername IS NOT NULL THEN
                        t5.membername
                     END) code5,
                     (CASE
                       WHEN t5.alias IS NULL AND t4.alias IS NOT NULL THEN
                        t4.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NOT NULL THEN
                        t3.alias
                       WHEN t5.alias IS NULL AND t4.alias IS NULL AND
                            t3.alias IS NULL THEN
                        t2.alias
                       WHEN t5.alias IS NOT NULL THEN
                        t5.alias
                     END) name5
                FROM/* hp.Tbcwys_Nonprodu_Account t1,
                     hp.Tbcwys_Nonprodu_Account t2,
                     hp.Tbcwys_Nonprodu_Account t3,
                     hp.Tbcwys_Nonprodu_Account t4,
                     hp.Tbcwys_Nonprodu_Account t5*/
                     dwstg.Tbcwys_Nonprodu_Account t1,
                      dwstg.Tbcwys_Nonprodu_Account t2,
                      dwstg.Tbcwys_Nonprodu_Account t3 ,
                     dwstg.Tbcwys_Nonprodu_Account t4,
                     dwstg.Tbcwys_Nonprodu_Account t5
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.alias = '制造费用合计' --制造费用合计
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
                 AND t5.parentname(+) = t4.membername) LOOP
      account_table.level1_code := i.code1;
      account_table.level1_name := i.name1;
      account_table.level2_code := i.code2;
      account_table.level2_name := i.name2;
      account_table.level3_code := i.code3;
      account_table.level3_name := i.name3;
      account_table.level4_code := i.code4;
      account_table.level4_name := i.name4;
      account_table.level5_code := i.code5;
      account_table.level5_name := i.name5;
      insert into DIM_HP_ACCOUNT values account_table;
    end loop;
    COMMIT;
  END TBCWYS_NONPRODU_ACCOUNT;

  -- TBCWYS_NONPRODU 不分层级科目维
  PROCEDURE TBCWYS_NONPRODU_ACCOUNT_NON IS
    account_table DIM_HP_ACCOUNT_NONLEVEL%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_ACCOUNT_NONLEVEL';
    FOR i IN (SELECT t1.membername code1, t1.alias name1
                FROM /*hp.Tbcwys_Nonprodu_Account t1*/
                dwstg.Tbcwys_Nonprodu_Account t1
                -- by dengj@besthelp 20130822 数据中心拆分

               WHERE 1 = 1
                 AND t1.membername <> 'Account'
                 AND t1.datastorage IS NOT NULL) LOOP
      account_table.account_code := i.code1;
      account_table.account_name := i.name1;
      insert into DIM_HP_ACCOUNT_NONLEVEL values account_table;
    end loop;
    COMMIT;
  
    FOR i IN (SELECT t1.membername code1, t1.alias name1
                FROM-- hp.tbcwys_report_account t1
                dwstg.TBCWYS_REPORT_ACCOUNT t1  -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.membername <> 'Account'
                 AND t1.alias LIKE 'G%') LOOP
      account_table.account_code := i.code1;
      account_table.account_name := i.name1;
      insert into DIM_HP_ACCOUNT_NONLEVEL values account_table;
    end loop;
    COMMIT;
  
    FOR i IN (SELECT t1.membername code1, t1.alias name1
                FROM --hp.Tbcwys_Productr_Account t1
                dwstg.TBCWYS_PRODUCTR_ACCOUNT t1 -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND t1.membername <> 'Account'
                 AND t1.datastorage IS NOT NULL) LOOP
      account_table.account_code := i.code1;
      account_table.account_name := i.name1;
      insert into DIM_HP_ACCOUNT_NONLEVEL values account_table;
    end loop;
    COMMIT;
  
    --插入运输费用
    INSERT INTO DIM_HP_ACCOUNT_NONLEVEL
      SELECT 'A1115000000000000' account_code, '运输费用' account_name
        FROM dual
       WHERE 1 = 1;
    commit;
  
  END TBCWYS_NONPRODU_ACCOUNT_NON;

  --处理TBXHYB CATEGORY维
  PROCEDURE TBXHYB_CONSUMPT_CATEGORY IS
    l_table Dim_Hp_Xh_Category%rowtype;
  BEGIN
    execute immediate 'truncate table Dim_Hp_Xh_Category';
    FOR i IN ( --品牌大类汇总,啤酒品牌汇总,啤酒品类汇总
              SELECT t1.membername code1,
                      t1.alias name1,
                      t2.membername code2,
                      t2.alias name2,
                      nvl(t3.membername, t2.membername) code3,
                      nvl(t3.alias, t2.alias) name3,
                      nvl(t4.membername, nvl(t3.membername, t2.membername)) code4,
                      nvl(t4.alias, nvl(t3.alias, t2.alias)) name4
                FROM /*hp.tbxhyb_consumpt_category t1,
                      hp.tbxhyb_consumpt_category t2,
                      hp.tbxhyb_consumpt_category t3,
                      hp.tbxhyb_consumpt_category t4*/
                      dwstg.tbxhyb_consumpt_category t1,
                      dwstg.tbxhyb_consumpt_category t2,
                      dwstg.tbxhyb_consumpt_category t3,
                      dwstg.tbxhyb_consumpt_category t4
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.alias IN ('品牌大类汇总', '啤酒品牌汇总', '啤酒品类汇总')
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
              UNION
              SELECT 'C0001' code1,
                     '不分品牌品类' name1,
                     'C0001' code2,
                     '不分品牌品类' name2,
                     'C0001' code3,
                     '不分品牌品类' name3,
                     'C0001' code4,
                     '不分品牌品类' name4
                FROM -- hp.tbxhyb_consumpt_category t1
                dwstg.tbxhyb_consumpt_category t1
                      -- by dengj@besthelp 20130822 数据中心拆分
              UNION
              SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     t3.membername code3,
                     t3.alias name3,
                     DECODE(t4.membername, NULL, t3.membername, t4.membername) code4,
                     decode(t4.alias, NULL, t3.alias, t4.alias) name4
                FROM /*hp.tbxhyb_consumpt_category t1,
                     hp.tbxhyb_consumpt_category t2,
                     hp.tbxhyb_consumpt_category t3,
                     hp.tbxhyb_consumpt_category t4*/
                     dwstg.tbxhyb_consumpt_category t1,
                      dwstg.tbxhyb_consumpt_category t2,
                      dwstg.tbxhyb_consumpt_category t3,
                      dwstg.tbxhyb_consumpt_category t4
                      -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.alias IN ('粮耗_品牌汇总')
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername) LOOP
      l_table.level1_code := i.code1;
      l_table.level1_name := i.name1;
      l_table.level2_code := i.code2;
      l_table.level2_name := i.name2;
      l_table.level3_code := i.code3;
      l_table.level3_name := i.name3;
      l_table.level4_code := i.code4;
      l_table.level4_name := i.name4;
      insert into Dim_Hp_Xh_Category values l_table;
    end loop;
    COMMIT;
  END TBXHYB_CONSUMPT_CATEGORY;

  --处理TBXHYB DEPARTMENT维
  PROCEDURE TBXHYB_CONSUMPT_DEPARTMENT IS
    l_table   Dim_Hp_Xh_Department%rowtype;
    l_table_n Dim_Hp_Xh_Department_Nolevel%rowtype;
  BEGIN
    --Dim_Hp_Xh_Department
    execute immediate 'truncate table Dim_Hp_Xh_Department';
    FOR i IN (SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     t3.membername code3,
                     t3.alias name3,
                     DECODE(t4.membername,
                            NULL,
                            T3.MEMBERNAME,
                            t4.membername) code4,
                     DECODE(t4.alias, NULL, T3.alias, t4.alias) name4,
                     DECODE(t4.dmodel, NULL, t3.dmodel, t4.dmodel) model,
                     DECODE(t4.dtype, NULL, t3.dtype, t4.dtype) type,
                     DECODE(t4.dcapacity, NULL, t3.dcapacity, t4.dcapacity) capacity
                FROM /*hp.tbxhyb_consumpt_department t1,
                     hp.tbxhyb_consumpt_department t2,
                     hp.tbxhyb_consumpt_department t3,
                     hp.tbxhyb_consumpt_department t4*/
                     dwstg.tbxhyb_consumpt_department t1,
                     dwstg.tbxhyb_consumpt_department t2,
                     dwstg.tbxhyb_consumpt_department t3,
                     dwstg.tbxhyb_consumpt_department t4
                     -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'D0103'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername
              UNION
              SELECT 'D00' code1,
                     'D缺省' name1,
                     'D00' code2,
                     'D缺省' name2,
                     'D00' code3,
                     'D缺省' name3,
                     'D00' code4,
                     'D缺省' name4,
                     '' model,
                     '' TYPE,
                     '' capacity
                FROM --hp.tbxhyb_consumpt_department t1
                dwstg.tbxhyb_consumpt_department t1 -- by dengj@besthelp 20130822 数据中心拆分
                ) LOOP
      l_table.level1_code := i.code1;
      l_table.level1_name := i.name1;
      l_table.level2_code := i.code2;
      l_table.level2_name := i.name2;
      l_table.level3_code := i.code3;
      l_table.level3_name := i.name3;
      l_table.level4_code := i.code4;
      l_table.level4_name := i.name4;
      l_table.model       := i.model;
      l_table.type        := i.type;
      l_table.capacity    := i.capacity;
      insert into Dim_Hp_Xh_Department values l_table;
    end loop;
    COMMIT;
  
    --Dim_Hp_Xh_Department_Nonlevel
    execute immediate 'truncate table Dim_Hp_Xh_Department_Nolevel';
    FOR i IN (SELECT t1.membername code1,
                     t1.alias      name1,
                     t1.dmodel     model,
                     t1.dtype      type,
                     t1.dcapacity  capacity
                FROM -- hp.tbxhyb_consumpt_department t1
                      dwstg.tbxhyb_consumpt_department t1 -- by dengj@besthelp 20130822 数据中心拆分
                                ) LOOP
      l_table_n.department_code := i.code1;
      l_table_n.department_name := i.name1;
      l_table_n.model           := i.model;
      l_table_n.type            := i.type;
      l_table_n.capacity        := i.capacity;
      insert into Dim_Hp_Xh_Department_Nolevel values l_table_n;
    end loop;
    COMMIT;
  END TBXHYB_CONSUMPT_DEPARTMENT;

  --处理TBXHYB ENTITY维
  PROCEDURE TBXHYB_CONSUMPT_ENTITY IS
    l_table DIM_HP_XH_ENTITY%rowtype;
  BEGIN
    execute immediate 'truncate table DIM_HP_XH_ENTITY';
    FOR i IN (SELECT t1.membername code1,
                     t1.alias      name1,
                     t2.membername code2,
                     t2.alias      name2,
                     t3.membername code3,
                     t3.alias      name3,
                     t4.membername code4,
                     t4.alias      name4
                FROM /*hp.tbxhyb_consumpt_entity t1,
                     hp.tbxhyb_consumpt_entity t2,
                     hp.tbxhyb_consumpt_entity t3,
                     hp.tbxhyb_consumpt_entity t4*/
                     dwstg.tbxhyb_consumpt_entity t1,
                     dwstg.tbxhyb_consumpt_entity t2,
                     dwstg.tbxhyb_consumpt_entity t3,
                     dwstg.tbxhyb_consumpt_entity t4
                     -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.membername = 'E0003'
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
                 AND t4.parentname(+) = t3.membername) LOOP
      l_table.level1_code := i.code1;
      l_table.level1_name := i.name1;
      l_table.level2_code := i.code2;
      l_table.level2_name := i.name2;
      l_table.level3_code := i.code3;
      l_table.level3_name := i.name3;
      l_table.level4_code := i.code4;
      l_table.level4_name := i.name4;
      l_table.entity_id   := substr(i.code4, 2, length(i.code4));
      insert into DIM_HP_XH_ENTITY values l_table;
    end loop;
    COMMIT;
  END TBXHYB_CONSUMPT_ENTITY;

  --处理TBXHYB PACKAGE维
  PROCEDURE TBXHYB_CONSUMPT_PACKAGE IS
    l_table Dim_Hp_Xh_Package%rowtype;
  BEGIN
    execute immediate 'truncate table Dim_Hp_Xh_Package';
    FOR i IN (SELECT t1.membername code1,
                     t1.alias name1,
                     t2.membername code2,
                     t2.alias name2,
                     decode(t3.membername,
                            NULL,
                            t2.membername,
                            t3.membername) code3,
                     decode(t3.alias, NULL, t2.alias, t3.alias) name3
                FROM /*hp.tbxhyb_consumpt_package t1,
                     hp.tbxhyb_consumpt_package t2,
                     hp.tbxhyb_consumpt_package t3*/
                     dwstg.tbxhyb_consumpt_package t1,
                     dwstg.tbxhyb_consumpt_package t2,
                     dwstg.tbxhyb_consumpt_package t3
                     -- by dengj@besthelp 20130822 数据中心拆分
               WHERE t1.alias IN ('瓶型汇总', '盖型汇总', '罐型汇总', '标型汇总', '箱型汇总',
                      '主表包装汇总', '附表包装汇总')
                 AND t2.parentname(+) = t1.membername
                 AND t3.parentname(+) = t2.membername
              UNION
              SELECT 'P0001' code1,
                     '不分包装' name1,
                     'P0001' code2,
                     '不分包装' name2,
                     'P0001' code3,
                     '不分包装' name3
                FROM-- hp.tbxhyb_consumpt_package t1
                dwstg.tbxhyb_consumpt_package t1 -- by dengj@besthelp 20130822 数据中心拆分
                ) LOOP
      l_table.level1_code := i.code1;
      l_table.level1_name := i.name1;
      l_table.level2_code := i.code2;
      l_table.level2_name := i.name2;
      l_table.level3_code := i.code3;
      l_table.level3_name := i.name3;
      insert into Dim_Hp_Xh_Package values l_table;
    end loop;
    COMMIT;
  END TBXHYB_CONSUMPT_PACKAGE;

  --处理成本预算的实体维度
  PROCEDURE TBCBYS_COST_ENTITY IS
  BEGIN
    execute immediate 'truncate table DIM_HP_CB_ENTITY';
    INSERT INTO DIM_HP_CB_ENTITY
      SELECT T.LEVEL0_CODE,
             T.LEVEL0_NAME,
             T.LEVEL1_CODE,
             T.LEVEL1_NAME,
             T.LEVEL2_CODE,
             T.LEVEL2_NAME,
             ROWNUM ORDERBY
        FROM (SELECT TE0.MEMBERNAME LEVEL0_CODE,
                     TE0.ALIAS      LEVEL0_NAME,
                     TE1.MEMBERNAME LEVEL1_CODE,
                     TE1.ALIAS      LEVEL1_NAME,
                     TE2.MEMBERNAME LEVEL2_CODE,
                     TE2.ALIAS      LEVEL2_NAME
                FROM/* HP.TBCBYS_COST_ENTITY TE0,
                     HP.TBCBYS_COST_ENTITY TE1,
                     HP.TBCBYS_COST_ENTITY TE2*/
                      dwstg.TBCBYS_COST_ENTITY TE0,
                     dwstg.TBCBYS_COST_ENTITY TE1,
                     dwstg.TBCBYS_COST_ENTITY TE2
                     -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND TE2.PARENTNAME = TE1.MEMBERNAME
                 AND TE1.PARENTNAME = TE0.MEMBERNAME
                 AND TE0.MEMBERNAME = 'EZZHB'
               ORDER BY 1,
                        (case
                          when TE1.ALIAS = '山东区域' then
                           '01'
                          when TE1.ALIAS = '华北区域' then
                           '02'
                          when TE1.ALIAS = '陕西区域' then
                           '03'
                          when TE1.ALIAS = '甘肃区域' then
                           '04'
                          when TE1.ALIAS = '华南区域' then
                           '05'
                          when TE1.ALIAS = '西南区域' then
                           '06'
                          when TE1.ALIAS = '东北区域' then
                           '07'
                          when TE1.ALIAS = '华东区域' then
                           '08'
                          when TE1.ALIAS = '东南区域' then
                           '09'
                          else
                           '99'
                        end),
                        5) T;
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END TBCBYS_COST_ENTITY;
  --处理成本预算的部门维度
  PROCEDURE TBCBYS_COST_DEPARTMENT IS
  BEGIN
    execute immediate 'truncate table DIM_HP_CB_DEPARTMENT';
    INSERT INTO DIM_HP_CB_DEPARTMENT
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS LEVEL0_NAME,
             TD1.MEMBERNAME LEVEL1_CODE,
             TD1.ALIAS LEVEL1_NAME,
             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME) LEVEL2_CODE,
             NVL(TD2.ALIAS, TD1.ALIAS) LEVEL2_NAME,
             --NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)) LEVEL3_CODE,
             --NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)) LEVEL3_NAME,
             NVL(TD4.MEMBERNAME,
                 NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))) LEVEL3_CODE,
             NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))) LEVEL3_NAME,
             TD4.PACK_TYPE,
             TD4.BAND_TYPE,
             TD4.CAPACITY
        FROM /*HP.TBCBYS_COST_DEPARTMENT TD0,
             HP.TBCBYS_COST_DEPARTMENT TD1,
             HP.TBCBYS_COST_DEPARTMENT TD2,
             HP.TBCBYS_COST_DEPARTMENT TD3,
             HP.TBCBYS_COST_DEPARTMENT TD4*/
             dwstg.TBCBYS_COST_DEPARTMENT TD0,
             dwstg.TBCBYS_COST_DEPARTMENT TD1,
             dwstg.TBCBYS_COST_DEPARTMENT TD2,
             dwstg.TBCBYS_COST_DEPARTMENT TD3,
             dwstg.TBCBYS_COST_DEPARTMENT TD4
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD4.PARENTNAME(+) = TD3.MEMBERNAME
         AND TD3.PARENTNAME(+) = TD2.MEMBERNAME
         AND TD2.PARENTNAME(+) = TD1.MEMBERNAME
         AND TD1.MEMBERNAME <> 'D02'
         AND TD1.PARENTNAME = TD0.MEMBERNAME
         AND TD0.MEMBERNAME = 'D0'
       ORDER BY 1, 3, 5, 7;
    --写入一条动力跟踪的数据
    INSERT INTO DIM_HP_CB_DEPARTMENT
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS LEVEL0_NAME,
             'D01GZ' LEVEL1_CODE,
             '总动力跟踪' LEVEL1_NAME,
             'D01GZ' LEVEL2_CODE,
             '总动力跟踪' LEVEL2_NAME,
             'D01GZ' LEVEL3_CODE,
             '总动力跟踪' LEVEL3_NAME,
             '' PACK_TYPE,
             '' BAND_TYPE,
             '' CAPACITY
        FROM/* HP.TBCBYS_COST_DEPARTMENT TD0*/
        dwstg.TBCBYS_COST_DEPARTMENT TD0
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD0.MEMBERNAME = 'D0'
       ORDER BY 1, 3, 5, 7;
    --写入一条动力跟踪(全年单价)的数据
    INSERT INTO DIM_HP_CB_DEPARTMENT
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS LEVEL0_NAME,
             'D01GZQNDJ' LEVEL1_CODE,
             '总动力跟踪(全年单价)' LEVEL1_NAME,
             'D01GZQNDJ' LEVEL2_CODE,
             '总动力跟踪(全年单价)' LEVEL2_NAME,
             'D01GZQNDJ' LEVEL3_CODE,
             '总动力跟踪(全年单价)' LEVEL3_NAME,
             '' PACK_TYPE,
             '' BAND_TYPE,
             '' CAPACITY
        FROM /*HP.TBCBYS_COST_DEPARTMENT TD0*/
        dwstg.TBCBYS_COST_DEPARTMENT TD0
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD0.MEMBERNAME = 'D0'
       ORDER BY 1, 3, 5, 7;
    commit;
    --写入无层级物料
    execute immediate 'truncate table DIM_HP_CB_DEPARTMENT_NOLEVEL';
    INSERT INTO DIM_HP_CB_DEPARTMENT_NOLEVEL
      SELECT TD.MEMBERNAME DEPARTMENT,
             TD.ALIAS DEPARTMENT_NAME,
             TD.PACK_TYPE,
             TD.BAND_TYPE,
             TD.CAPACITY
        FROM/* HP.TBCBYS_COST_DEPARTMENT TD*/
        dwstg.TBCBYS_COST_DEPARTMENT TD
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
            --AND TD.MEMBERNAME<>'D02'
         AND TD.PARENTNAME NOT IN ('D02', 'D0103')
      UNION
      SELECT TD.MEMBERNAME DEPARTMENT,
             TD.ALIAS DEPARTMENT_NAME,
             TD.PACK_TYPE,
             TD.BAND_TYPE,
             TD.CAPACITY
        FROM /*HP.TBCBYS_COST_DEPARTMENT TD*/
        dwstg.TBCBYS_COST_DEPARTMENT TD 
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD.MEMBERNAME = 'D010356'
      UNION
      SELECT 'D01GZ' DEPARTMENT,
             '总动力跟踪' DEPARTMENT_NAME,
             '' PACK_TYPE,
             '' BAND_TYPE,
             '' CAPACITY
        FROM DUAL TD
       WHERE 1 = 1
      UNION
      SELECT 'D01GZQNDJ' DEPARTMENT,
             '总动力跟踪(全年单价)' DEPARTMENT_NAME,
             '' PACK_TYPE,
             '' BAND_TYPE,
             '' CAPACITY
        FROM DUAL TD
       WHERE 1 = 1
       ORDER BY 1;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END TBCBYS_COST_DEPARTMENT;
  --处理成本预算的 物料
  PROCEDURE TBCBYS_COST_MATERIAL IS
  BEGIN
    --处理动力的物料维度
    execute immediate 'truncate table DIM_HP_CB_DL_ITEM';
    INSERT INTO DIM_HP_CB_DL_ITEM
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS      LEVEL0_NAME,
             TD1.MEMBERNAME LEVEL1_CODE,
             TD1.ALIAS      LEVEL1_NAME
        FROM /*HP.TBCBYS_COST_MATERIAL TD0, 
             HP.TBCBYS_COST_MATERIAL TD1*/
             dwstg.TBCBYS_COST_MATERIAL TD0, 
             dwstg.TBCBYS_COST_MATERIAL TD1
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD1.PARENTNAME = TD0.MEMBERNAME
         AND TD0.MEMBERNAME = 'M03'
       ORDER BY 1, 3;
    commit;
    --处理麦芽物料 排序
    execute immediate 'truncate table DIM_HP_CB_MY_MATERIAL_NOLEVEL';
    INSERT INTO DIM_HP_CB_MY_MATERIAL_NOLEVEL
      SELECT T1.MATERIAL, T1.MATERIAL_NAME, ROWNUM + T3.ORDER_NUM ORDER_NUM
        FROM (SELECT TD.MEMBERNAME MATERIAL,
                     TD.ALIAS MATERIAL_NAME,
                     TD.PARENTNAME
                FROM /*HP.TBCBYS_COST_MATERIAL TD*/
                 dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND TD.PARENTNAME like 'M02%'
                 AND TD.MEMBERNAME NOT LIKE 'M02%'
                 AND TD.MEMBERNAME NOT IN ('M0102', 'M0103')
               ORDER BY 1) T1,
             (SELECT T2.MATERIAL, T2.MATERIAL_NAME, ROWNUM * 100 ORDER_NUM
                FROM (SELECT TD.MEMBERNAME MATERIAL, TD.ALIAS MATERIAL_NAME
                        FROM /*HP.TBCBYS_COST_MATERIAL TD*/
                         dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
                       WHERE 1 = 1
                         AND TD.MEMBERNAME like 'M02%'
                       ORDER BY 1) T2) T3
       WHERE 1 = 1
         AND T1.PARENTNAME = T3.MATERIAL
      UNION ALL
      SELECT T2.MATERIAL, T2.MATERIAL_NAME, ROWNUM * 100 ORDER_NUM
        FROM (SELECT TD.MEMBERNAME MATERIAL, TD.ALIAS MATERIAL_NAME
                FROM /*HP.TBCBYS_COST_MATERIAL TD*/
                 dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND TD.MEMBERNAME like 'M02%'
               ORDER BY 1) T2
      UNION ALL
      SELECT TD.MEMBERNAME MATERIAL,
             TD.ALIAS MATERIAL_NAME,
             ROWNUM * 10000 ORDER_NUM
        FROM /*HP.TBCBYS_COST_MATERIAL TD*/
         dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD.PARENTNAME like 'M02%'
         AND TD.MEMBERNAME IN ('M0102', 'M0103')
       ORDER BY 3;
    commit;
    --处理麦芽物料，有层级
    execute immediate 'truncate table DIM_HP_CB_MY_MATERIAL_LEVEL';
    INSERT INTO DIM_HP_CB_MY_MATERIAL_LEVEL
      (LEVEL0_CODE,
       LEVEL0_NAME,
       LEVEL1_CODE,
       LEVEL1_NAME,
       LEVEL2_CODE,
       LEVEL2_NAME,
       LEVEL3_CODE,
       LEVEL3_NAME,
       LEVEL4_CODE,
       LEVEL4_NAME,
       LEVEL5_CODE,
       LEVEL5_NAME,
       LEVEL6_CODE,
       LEVEL6_NAME)
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS LEVEL0_NAME,
             TD1.MEMBERNAME LEVEL1_CODE,
             TD1.ALIAS LEVEL1_NAME,
             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME) LEVEL2_CODE,
             NVL(TD2.ALIAS, TD1.ALIAS) LEVEL2_NAME,
             NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)) LEVEL3_CODE,
             NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)) LEVEL3_NAME,
             NVL(TD4.MEMBERNAME,
                 NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))) LEVEL4_CODE,
             NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))) LEVEL4_NAME,
             NVL(TD5.MEMBERNAME,
                 NVL(TD4.MEMBERNAME,
                     NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)))) LEVEL5_CODE,
             NVL(TD5.ALIAS,
                 NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)))) LEVEL5_NAME,
             NVL(TD6.MEMBERNAME,
                 NVL(TD5.MEMBERNAME,
                     NVL(TD4.MEMBERNAME,
                         NVL(TD3.MEMBERNAME,
                             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))))) LEVEL6_CODE,
             NVL(TD6.ALIAS,
                 NVL(TD5.ALIAS,
                     NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))))) LEVEL6_NAME
        FROM /*HP.TBCBYS_COST_MATERIAL TD0,
             HP.TBCBYS_COST_MATERIAL TD1,
             HP.TBCBYS_COST_MATERIAL TD2,
             HP.TBCBYS_COST_MATERIAL TD3,
             HP.TBCBYS_COST_MATERIAL TD4,
             HP.TBCBYS_COST_MATERIAL TD5,
             HP.TBCBYS_COST_MATERIAL TD6*/
             dwstg.TBCBYS_COST_MATERIAL TD0,
             dwstg.TBCBYS_COST_MATERIAL TD1,
             dwstg.TBCBYS_COST_MATERIAL TD2,
             dwstg.TBCBYS_COST_MATERIAL TD3,
             dwstg.TBCBYS_COST_MATERIAL TD4,
             dwstg.TBCBYS_COST_MATERIAL TD5,
             dwstg.TBCBYS_COST_MATERIAL TD6
             -- by dengj@besthelp 20130822 数据中心拆分

       WHERE 1 = 1
         AND TD6.PARENTNAME(+) = TD5.MEMBERNAME
         AND TD5.PARENTNAME(+) = TD4.MEMBERNAME
         AND TD4.PARENTNAME(+) = TD3.MEMBERNAME
         AND TD3.PARENTNAME(+) = TD2.MEMBERNAME
         AND TD2.PARENTNAME(+) = TD1.MEMBERNAME
         AND TD1.PARENTNAME = TD0.MEMBERNAME
         AND TD0.MEMBERNAME = 'M02';
    COMMIT;
    --处理产品物料，无层级    
    execute immediate 'truncate table DIM_HP_CB_CP_MATERIAL_NOLEVEL';
    INSERT INTO DIM_HP_CB_CP_MATERIAL_NOLEVEL
      SELECT T1.MATERIAL, T1.MATERIAL_NAME, ROWNUM + T3.ORDER_NUM ORDER_NUM
        FROM (SELECT DISTINCT TD.MEMBERNAME MATERIAL,
                              TD.ALIAS MATERIAL_NAME,
                              TD.PARENTNAME
                FROM /*HP.TBCBYS_COST_MATERIAL TD*/
                dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND TD.PARENTNAME like 'M01%'
                 AND TD.MEMBERNAME NOT LIKE 'M01%'
               ORDER BY 1) T1,
             (SELECT T2.MATERIAL, T2.MATERIAL_NAME, ROWNUM * 10000 ORDER_NUM
                FROM (SELECT DISTINCT TD.MEMBERNAME MATERIAL,
                                      TD.ALIAS      MATERIAL_NAME
                        FROM /*HP.TBCBYS_COST_MATERIAL TD*/
                        dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
                       WHERE 1 = 1
                         AND TD.MEMBERNAME like 'M01%'
                       ORDER BY 1) T2) T3
       WHERE 1 = 1
         AND T1.PARENTNAME = T3.MATERIAL
      UNION ALL
      SELECT T2.MATERIAL, T2.MATERIAL_NAME, ROWNUM * 10000 ORDER_NUM
        FROM (SELECT DISTINCT TD.MEMBERNAME MATERIAL, TD.ALIAS MATERIAL_NAME
                FROM/* HP.TBCBYS_COST_MATERIAL TD*/
                dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
               WHERE 1 = 1
                 AND TD.MEMBERNAME like 'M01%'
               ORDER BY 1) T2
      UNION ALL
      SELECT DISTINCT TD.MEMBERNAME MATERIAL,
                      TD.ALIAS MATERIAL_NAME,
                      ROWNUM + 10000000 ORDER_NUM
        FROM /*HP.TBCBYS_COST_MATERIAL TD*/
        dwstg.TBCBYS_COST_MATERIAL TD
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD.MEMBERNAME like 'M04%'
       ORDER BY 1;
  
    commit;
    --处理产品物料，有层级
    execute immediate 'truncate table DIM_HP_CB_CP_MATERIAL_LEVEL';
    INSERT INTO DIM_HP_CB_CP_MATERIAL_LEVEL
      (LEVEL0_CODE,
       LEVEL0_NAME,
       LEVEL1_CODE,
       LEVEL1_NAME,
       LEVEL2_CODE,
       LEVEL2_NAME,
       LEVEL3_CODE,
       LEVEL3_NAME,
       LEVEL4_CODE,
       LEVEL4_NAME,
       LEVEL5_CODE,
       LEVEL5_NAME,
       LEVEL6_CODE,
       LEVEL6_NAME)
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS LEVEL0_NAME,
             TD1.MEMBERNAME LEVEL1_CODE,
             TD1.ALIAS LEVEL1_NAME,
             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME) LEVEL2_CODE,
             NVL(TD2.ALIAS, TD1.ALIAS) LEVEL2_NAME,
             NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)) LEVEL3_CODE,
             NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)) LEVEL3_NAME,
             NVL(TD4.MEMBERNAME,
                 NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))) LEVEL4_CODE,
             NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))) LEVEL4_NAME,
             NVL(TD5.MEMBERNAME,
                 NVL(TD4.MEMBERNAME,
                     NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)))) LEVEL5_CODE,
             NVL(TD5.ALIAS,
                 NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)))) LEVEL5_NAME,
             NVL(TD6.MEMBERNAME,
                 NVL(TD5.MEMBERNAME,
                     NVL(TD4.MEMBERNAME,
                         NVL(TD3.MEMBERNAME,
                             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))))) LEVEL6_CODE,
             NVL(TD6.ALIAS,
                 NVL(TD5.ALIAS,
                     NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))))) LEVEL6_NAME
        FROM /*HP.TBCBYS_COST_MATERIAL TD0,
             HP.TBCBYS_COST_MATERIAL TD1,
             HP.TBCBYS_COST_MATERIAL TD2,
             HP.TBCBYS_COST_MATERIAL TD3,
             HP.TBCBYS_COST_MATERIAL TD4,
             HP.TBCBYS_COST_MATERIAL TD5,
             HP.TBCBYS_COST_MATERIAL TD6*/
             dwstg.TBCBYS_COST_MATERIAL TD0,
             dwstg.TBCBYS_COST_MATERIAL TD1,
             dwstg.TBCBYS_COST_MATERIAL TD2,
             dwstg.TBCBYS_COST_MATERIAL TD3,
             dwstg.TBCBYS_COST_MATERIAL TD4,
             dwstg.TBCBYS_COST_MATERIAL TD5,
             dwstg.TBCBYS_COST_MATERIAL TD6
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD6.PARENTNAME(+) = TD5.MEMBERNAME
         AND TD5.PARENTNAME(+) = TD4.MEMBERNAME
         AND TD4.PARENTNAME(+) = TD3.MEMBERNAME
         AND TD3.PARENTNAME(+) = TD2.MEMBERNAME
         AND TD2.PARENTNAME(+) = TD1.MEMBERNAME
         AND TD1.PARENTNAME = TD0.MEMBERNAME
         AND TD0.MEMBERNAME = 'M01';
    COMMIT;
    INSERT INTO DIM_HP_CB_CP_MATERIAL_LEVEL
      (LEVEL0_CODE,
       LEVEL0_NAME,
       LEVEL1_CODE,
       LEVEL1_NAME,
       LEVEL2_CODE,
       LEVEL2_NAME,
       LEVEL3_CODE,
       LEVEL3_NAME,
       LEVEL4_CODE,
       LEVEL4_NAME,
       LEVEL5_CODE,
       LEVEL5_NAME,
       LEVEL6_CODE,
       LEVEL6_NAME)
      SELECT TD0.MEMBERNAME LEVEL0_CODE,
             TD0.ALIAS LEVEL0_NAME,
             TD1.MEMBERNAME LEVEL1_CODE,
             TD1.ALIAS LEVEL1_NAME,
             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME) LEVEL2_CODE,
             NVL(TD2.ALIAS, TD1.ALIAS) LEVEL2_NAME,
             NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)) LEVEL3_CODE,
             NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)) || '(粮食虚拟)' LEVEL3_NAME,
             NVL(TD4.MEMBERNAME,
                 NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))) LEVEL4_CODE,
             NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))) ||
             '(粮食虚拟)' LEVEL4_NAME,
             NVL(TD5.MEMBERNAME,
                 NVL(TD4.MEMBERNAME,
                     NVL(TD3.MEMBERNAME, NVL(TD2.MEMBERNAME, TD1.MEMBERNAME)))) LEVEL5_CODE,
             NVL(TD5.ALIAS,
                 NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS)))) ||
             '(粮食虚拟)' LEVEL5_NAME,
             NVL(TD6.MEMBERNAME,
                 NVL(TD5.MEMBERNAME,
                     NVL(TD4.MEMBERNAME,
                         NVL(TD3.MEMBERNAME,
                             NVL(TD2.MEMBERNAME, TD1.MEMBERNAME))))) LEVEL6_CODE,
             NVL(TD6.ALIAS,
                 NVL(TD5.ALIAS,
                     NVL(TD4.ALIAS, NVL(TD3.ALIAS, NVL(TD2.ALIAS, TD1.ALIAS))))) ||
             '(粮食虚拟)' LEVEL6_NAME
        FROM /*HP.TBCBYS_COST_MATERIAL TD0,
             HP.TBCBYS_COST_MATERIAL TD1,
             HP.TBCBYS_COST_MATERIAL TD2,
             HP.TBCBYS_COST_MATERIAL TD3,
             HP.TBCBYS_COST_MATERIAL TD4,
             HP.TBCBYS_COST_MATERIAL TD5,
             HP.TBCBYS_COST_MATERIAL TD6*/
             dwstg.TBCBYS_COST_MATERIAL TD0,
             dwstg.TBCBYS_COST_MATERIAL TD1,
             dwstg.TBCBYS_COST_MATERIAL TD2,
             dwstg.TBCBYS_COST_MATERIAL TD3,
             dwstg.TBCBYS_COST_MATERIAL TD4,
             dwstg.TBCBYS_COST_MATERIAL TD5,
             dwstg.TBCBYS_COST_MATERIAL TD6
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TD6.PARENTNAME(+) = TD5.MEMBERNAME
         AND TD5.PARENTNAME(+) = TD4.MEMBERNAME
         AND TD4.PARENTNAME(+) = TD3.MEMBERNAME
         AND TD3.PARENTNAME(+) = TD2.MEMBERNAME
         AND TD2.PARENTNAME(+) = TD1.MEMBERNAME
         AND TD1.PARENTNAME = TD0.MEMBERNAME
         AND TD0.MEMBERNAME = 'M04';
    COMMIT;
    --
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END TBCBYS_COST_MATERIAL;
  --处理成本预算的包装维度
  PROCEDURE TBCBYS_COST_PACKAGE IS
  BEGIN
    execute immediate 'truncate table DIM_HP_CB_PACKAGE';
    INSERT INTO DIM_HP_CB_PACKAGE
      SELECT TP1.MEMBERNAME LEVEL1_CODE,
             TP1.ALIAS      LEVEL1_NAME,
             TP2.MEMBERNAME LEVEL2_CODE,
             TP2.ALIAS      LEVEL2_NAME
        FROM /*HP.TBCBYS_COST_PACKAGE TP1,
             HP.TBCBYS_COST_PACKAGE TP2*/
             dwstg.TBCBYS_COST_PACKAGE TP1,
             dwstg.TBCBYS_COST_PACKAGE TP2
             -- by dengj@besthelp 20130822 数据中心拆分

       WHERE 1 = 1
         AND TP2.PARENTNAME = TP1.MEMBERNAME
         AND TP1.MEMBERNAME = 'PK01';
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END TBCBYS_COST_PACKAGE;
  --处理成本预算的 科目维度
  PROCEDURE TBCBYS_EXPENSE_ACCOUNT IS
  BEGIN
    execute immediate 'truncate table DIM_HP_CB_BZ_ACCOUNT_NOLEVEL';
    execute immediate 'truncate table DIM_HP_CB_BZ_ACCOUNT_LEVEL';
    INSERT INTO DIM_HP_CB_BZ_ACCOUNT_NOLEVEL
      SELECT TEA.MEMBERNAME ACCOUNT_CODE, TEA.ALIAS ACCOUNT_NAME
        FROM/* HP.TBCBYS_EXPENSE_ACCOUNT TEA*/
        dwstg.TBCBYS_EXPENSE_ACCOUNT TEA
        -- by dengj@besthelp 20130822 数据中心拆分

       WHERE 1 = 1
         AND TEA.MEMBERNAME LIKE 'A0504%';
    commit;
    INSERT INTO DIM_HP_CB_BZ_ACCOUNT_LEVEL
      SELECT TEA0.MEMBERNAME LEVEL0_CODE,
             TEA0.ALIAS LEVEL0_NAME,
             TEA1.MEMBERNAME LEVEL1_CODE,
             TEA1.ALIAS LEVEL1_NAME,
             TEA2.MEMBERNAME LEVEL2_CODE,
             TEA2.ALIAS LEVEL2_NAME,
             NVL(TEA3.MEMBERNAME, TEA2.MEMBERNAME) LEVEL3_CODE,
             NVL(TEA3.ALIAS, TEA2.ALIAS) LEVEL3_NAME,
             NVL(TEA4.MEMBERNAME, NVL(TEA3.MEMBERNAME, TEA2.MEMBERNAME)) LEVEL4_CODE,
             NVL(TEA4.ALIAS, NVL(TEA3.ALIAS, TEA2.ALIAS)) LEVEL4_NAME
        FROM /*HP.TBCBYS_EXPENSE_ACCOUNT TEA0,
             HP.TBCBYS_EXPENSE_ACCOUNT TEA1,
             HP.TBCBYS_EXPENSE_ACCOUNT TEA2,
             HP.TBCBYS_EXPENSE_ACCOUNT TEA3,
             HP.TBCBYS_EXPENSE_ACCOUNT TEA4*/
             dwstg.TBCBYS_EXPENSE_ACCOUNT TEA0,
             dwstg.TBCBYS_EXPENSE_ACCOUNT TEA1,
             dwstg.TBCBYS_EXPENSE_ACCOUNT TEA2,
             dwstg.TBCBYS_EXPENSE_ACCOUNT TEA3,
             dwstg.TBCBYS_EXPENSE_ACCOUNT TEA4
             -- by dengj@besthelp 20130822 数据中心拆分
       WHERE 1 = 1
         AND TEA4.PARENTNAME(+) = TEA3.MEMBERNAME
         AND TEA3.PARENTNAME(+) = TEA2.MEMBERNAME
         AND TEA2.PARENTNAME(+) = TEA1.MEMBERNAME
         AND TEA1.PARENTNAME = TEA0.MEMBERNAME
         AND TEA0.MEMBERNAME = 'A0504000000000000';
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END TBCBYS_EXPENSE_ACCOUNT;
  --处理所有的元数据
  PROCEDURE main IS
  BEGIN
    --处理TBCWYS维度
    TBCWYS_PRODUCTR_BUYER;
    TBCWYS_PRODUCTR_DEPARTMENT;
    TBCWYS_PRODUCTR_ENTITY;
    TBCWYS_PRODUCTR_JOINT;
    TBCWYS_PRODUCTR_LOGISTIC;
    TBCWYS_PRODUCTR_PERIOD;
    TBCWYS_PRODUCTR_SCENARIO;
    TBCWYS_PRODUCTR_SOURCE;
    TBCWYS_NONPRODU_ACCOUNT;
    TBCWYS_NONPRODU_ACCOUNT_NON;
    --处理TBCBYS的维度   
    TBCBYS_COST_ENTITY; --实体维度
    TBCBYS_COST_DEPARTMENT; --部门维度
    TBCBYS_COST_MATERIAL; --物料
    TBCBYS_COST_PACKAGE; --包装维度
    TBCBYS_EXPENSE_ACCOUNT; --科目维度
  
    --处理消耗维度
    TBXHYB_CONSUMPT_CATEGORY;
    TBXHYB_CONSUMPT_DEPARTMENT;
    TBXHYB_CONSUMPT_ENTITY;
    TBXHYB_CONSUMPT_PACKAGE;
  END main;

end DW_HP_METEDATA_PKG;
/

prompt
prompt Creating package body DW_HP_TBCBYS_PKG
prompt ======================================
prompt
create or replace package body tbdw.DW_HP_TBCBYS_PKG is

  --CONSUME_DIFF  '消耗差异';
  FUNCTION CONSUME_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                        P_A_C_QUANTITY NUMBER, --实际消耗
                        P_A_C_AMOUNT   NUMBER, --实际成本
                        P_S_QUANTITY   NUMBER, --场景产量
                        P_S_C_QUANTITY NUMBER, --场景消耗
                        P_S_C_AMOUNT   NUMBER --场景成本
                        ) RETURN NUMBER IS
    L_AMOUNT NUMBER := 0;
    --
    L_ACTUAL_UC   NUMBER := 0; --实际单耗
    L_ACTUAL_UP   NUMBER := 0; --实际单价
    L_SCENARIO_UC NUMBER := 0; --场景单耗
    L_SCENARIO_UP NUMBER := 0; --场景单价
    L_UC_DIFF     NUMBER := 0; --单耗差异
    L_UP_DIFF     NUMBER := 0; --单价差异
  BEGIN
    IF (NVL(P_A_QUANTITY, 0) <> 0) THEN
      L_ACTUAL_UC := P_A_C_QUANTITY / P_A_QUANTITY; --实际单耗      
    ELSE
      L_ACTUAL_UC := 0; --实际单耗
    END IF;
    --
    IF (NVL(P_A_C_QUANTITY, 0) <> 0) THEN
      L_ACTUAL_UP := P_A_C_AMOUNT / P_A_C_QUANTITY; --实际单价      
    ELSE
      L_ACTUAL_UP := 0; --实际单价
    END IF;
    --    
    IF (NVL(P_S_QUANTITY, 0) <> 0) THEN
      L_SCENARIO_UC := P_S_C_QUANTITY / P_S_QUANTITY; --场景单耗      
    ELSE
      L_SCENARIO_UC := 0; --场景单耗
    END IF;
    --
    IF (NVL(P_S_C_QUANTITY, 0) <> 0) THEN
      L_SCENARIO_UP := P_S_C_AMOUNT / P_S_C_QUANTITY; --场景单价      
    ELSE
      L_SCENARIO_UP := 0; --场景单价
    END IF;
    L_UC_DIFF := NVL(L_ACTUAL_UC, 0) - NVL(L_SCENARIO_UC, 0); --单耗差异
    L_UP_DIFF := NVL(L_ACTUAL_UP, 0) - NVL(L_SCENARIO_UP, 0); --单价差异
    --消耗差异
    IF (NVL(P_A_C_AMOUNT, 0) <> 0 AND NVL(P_S_C_AMOUNT, 0) <> 0) THEN
      L_AMOUNT := L_UC_DIFF * P_A_QUANTITY * L_SCENARIO_UP;
    ELSE
      L_AMOUNT := 0;
    END IF;
    RETURN L_AMOUNT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END CONSUME_DIFF;
  --PRICE_DIFF  '价格差异';
  FUNCTION PRICE_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                      P_A_C_QUANTITY NUMBER, --实际消耗
                      P_A_C_AMOUNT   NUMBER, --实际成本
                      P_S_QUANTITY   NUMBER, --场景产量
                      P_S_C_QUANTITY NUMBER, --场景消耗
                      P_S_C_AMOUNT   NUMBER --场景成本
                      ) RETURN NUMBER IS
    L_AMOUNT NUMBER := 0;
    --
    L_ACTUAL_UC   NUMBER := 0; --实际单耗
    L_ACTUAL_UP   NUMBER := 0; --实际单价
    L_SCENARIO_UC NUMBER := 0; --场景单耗
    L_SCENARIO_UP NUMBER := 0; --场景单价
    L_UC_DIFF     NUMBER := 0; --单耗差异
    L_UP_DIFF     NUMBER := 0; --单价差异
  BEGIN
    IF (NVL(P_A_QUANTITY, 0) <> 0) THEN
      L_ACTUAL_UC := P_A_C_QUANTITY / P_A_QUANTITY; --实际单耗      
    ELSE
      L_ACTUAL_UC := 0; --实际单耗
    END IF;
    --
    IF (NVL(P_A_C_QUANTITY, 0) <> 0) THEN
      L_ACTUAL_UP := P_A_C_AMOUNT / P_A_C_QUANTITY; --实际单价      
    ELSE
      L_ACTUAL_UP := 0; --实际单价
    END IF;
    --    
    IF (NVL(P_S_QUANTITY, 0) <> 0) THEN
      L_SCENARIO_UC := P_S_C_QUANTITY / P_S_QUANTITY; --场景单耗      
    ELSE
      L_SCENARIO_UC := 0; --场景单耗
    END IF;
    --
    IF (NVL(P_S_C_QUANTITY, 0) <> 0) THEN
      L_SCENARIO_UP := P_S_C_AMOUNT / P_S_C_QUANTITY; --场景单价      
    ELSE
      L_SCENARIO_UP := 0; --场景单价
    END IF;
    L_UC_DIFF := NVL(L_ACTUAL_UC, 0) - NVL(L_SCENARIO_UC, 0); --单耗差异
    L_UP_DIFF := NVL(L_ACTUAL_UP, 0) - NVL(L_SCENARIO_UP, 0); --单价差异
    --单价差异
    IF (NVL(P_A_C_AMOUNT, 0) <> 0 AND NVL(P_S_C_AMOUNT, 0) <> 0) THEN
      L_AMOUNT := L_UP_DIFF * P_A_QUANTITY * L_ACTUAL_UC;
    ELSE
      L_AMOUNT := 0;
    END IF;
    RETURN L_AMOUNT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END PRICE_DIFF;
  --QUANTITY_DIFF  '产量差异';
  FUNCTION QUANTITY_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                         P_A_C_QUANTITY NUMBER, --实际消耗
                         P_A_C_AMOUNT   NUMBER, --实际成本
                         P_S_QUANTITY   NUMBER, --场景产量
                         P_S_C_QUANTITY NUMBER, --场景消耗
                         P_S_C_AMOUNT   NUMBER --场景成本
                         ) RETURN NUMBER IS
    L_AMOUNT NUMBER := 0;
    --
    L_ACTUAL_UC   NUMBER := 0; --实际单耗
    L_ACTUAL_UP   NUMBER := 0; --实际单价
    L_SCENARIO_UC NUMBER := 0; --场景单耗
    L_SCENARIO_UP NUMBER := 0; --场景单价
    L_UC_DIFF     NUMBER := 0; --单耗差异
    L_UP_DIFF     NUMBER := 0; --单价差异
  BEGIN
    IF (NVL(P_A_QUANTITY, 0) <> 0) THEN
      L_ACTUAL_UC := P_A_C_QUANTITY / P_A_QUANTITY; --实际单耗      
    ELSE
      L_ACTUAL_UC := 0; --实际单耗
    END IF;
    --
    IF (NVL(P_A_C_QUANTITY, 0) <> 0) THEN
      L_ACTUAL_UP := P_A_C_AMOUNT / P_A_C_QUANTITY; --实际单价      
    ELSE
      L_ACTUAL_UP := 0; --实际单价
    END IF;
    --    
    IF (NVL(P_S_QUANTITY, 0) <> 0) THEN
      L_SCENARIO_UC := P_S_C_QUANTITY / P_S_QUANTITY; --场景单耗      
    ELSE
      L_SCENARIO_UC := 0; --场景单耗
    END IF;
    --
    IF (NVL(P_S_C_QUANTITY, 0) <> 0) THEN
      L_SCENARIO_UP := P_S_C_AMOUNT / P_S_C_QUANTITY; --场景单价      
    ELSE
      L_SCENARIO_UP := 0; --场景单价
    END IF;
    L_UC_DIFF := NVL(L_ACTUAL_UC, 0) - NVL(L_SCENARIO_UC, 0); --单耗差异
    L_UP_DIFF := NVL(L_ACTUAL_UP, 0) - NVL(L_SCENARIO_UP, 0); --单价差异
    --产量差异    
    IF (NVL(P_A_C_AMOUNT, 0) <> 0 AND NVL(P_S_C_AMOUNT, 0) <> 0) THEN
      L_AMOUNT := (NVL(P_A_QUANTITY, 0) - NVL(P_S_QUANTITY, 0)) *
                  L_SCENARIO_UC * L_SCENARIO_UP;
    ELSE
      L_AMOUNT := 0;
    END IF;
    RETURN L_AMOUNT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END QUANTITY_DIFF;
  --OTHER_DIFF  '其它差异';
  FUNCTION OTHER_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                      P_A_C_QUANTITY NUMBER, --实际消耗
                      P_A_C_AMOUNT   NUMBER, --实际成本
                      P_S_QUANTITY   NUMBER, --场景产量
                      P_S_C_QUANTITY NUMBER, --场景消耗
                      P_S_C_AMOUNT   NUMBER --场景成本
                      ) RETURN NUMBER IS
    L_AMOUNT NUMBER := 0;
  BEGIN
  
    --其他差异
    IF (NVL(P_A_C_AMOUNT, 0) <> 0 AND NVL(P_S_C_AMOUNT, 0) <> 0 AND
       NVL(P_A_C_QUANTITY, 0) = 0 AND NVL(P_S_C_QUANTITY, 0) = 0) THEN
    
      L_AMOUNT := NVL(P_A_C_AMOUNT, 0) - NVL(P_S_C_AMOUNT, 0);
    ELSE
      L_AMOUNT := 0;
    END IF;
    RETURN L_AMOUNT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END OTHER_DIFF;
  --NOFACTOR_DIFF  '不可比因素';
  FUNCTION NOFACTOR_DIFF(P_A_QUANTITY   NUMBER, --实际产量
                         P_A_C_QUANTITY NUMBER, --实际消耗
                         P_A_C_AMOUNT   NUMBER, --实际成本
                         P_S_QUANTITY   NUMBER, --场景产量
                         P_S_C_QUANTITY NUMBER, --场景消耗
                         P_S_C_AMOUNT   NUMBER --场景成本
                         ) RETURN NUMBER IS
    L_AMOUNT NUMBER := 0;
  BEGIN
    --不可比因素
    IF (NVL(P_A_C_AMOUNT, 0) = 0 OR NVL(P_S_C_AMOUNT, 0) = 0) THEN
    
      L_AMOUNT := NVL(P_A_C_AMOUNT, 0) - NVL(P_S_C_AMOUNT, 0);
    ELSE
      L_AMOUNT := 0;
    end if;
    RETURN L_AMOUNT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END NOFACTOR_DIFF;

  --处理动力的实际数据
  PROCEDURE COST_DL_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DATA_DL FC
     WHERE 1 = 1
       AND FC.SCENARIO = 'SC03'
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --插入数据
    INSERT INTO FACT_CB_DATA_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.MATERIAL,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY --总耗
        FROM /*HP.HP_DATA_TBCBYS_COST HT*/
            dwstg.HP_DATA_TBCBYS_COST  HT-- by dengj@besthelp 20130822 数据中心拆分        
        , DIM_CB_PERIOD_V DC
       WHERE 1 = 1
         AND HT.ACCOUNT IN
             ('A0501010000000000', 'A0503010000000000', 'A0502020000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.PRODUCT = 'P00'
         AND HT.SCENARIO = 'SC03'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.MATERIAL;
  
    COMMIT;
    --处理 总动力跟踪 的数据
    --总动力跟踪 的消耗和成本=总动力 - 外供 - 制麦
    INSERT INTO FACT_CB_DATA_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.MATERIAL,
             SUM(T.QUANTITY) QUANTITY,
             SUM(T.COST_AMOUNT) COST_AMOUNT,
             SUM(T.COST_QUANTITY) COST_QUANTITY
        FROM (SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZ' DEPARTMENT,
                     FD.MATERIAL,
                     FD.QUANTITY,
                     FD.COST_AMOUNT,
                     FD.COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT = 'D01'
                 AND FD.SCENARIO = 'SC03'
                 AND DC.PERIOD_ID = FD.PERIOD_ID
                 AND DC.MONTH_CODE = P_MONTH
                 AND DC.YEAR_CODE = P_YEAR
              UNION ALL
              SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZ' DEPARTMENT,
                     FD.MATERIAL,
                     0 QUANTITY,
                     -FD.COST_AMOUNT COST_AMOUNT,
                     -FD.COST_QUANTITY COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT IN ('D0101', 'D0112')
                 AND FD.SCENARIO = 'SC03'
                 AND DC.PERIOD_ID = FD.PERIOD_ID
                 AND DC.MONTH_CODE = P_MONTH
                 AND DC.YEAR_CODE = P_YEAR) T
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT, T.MATERIAL;
    COMMIT;
    --处理 总动力跟踪(全年单价) 的数据
    --总动力跟踪 的消耗和成本=总动力 - 外供 - 制麦
    INSERT INTO FACT_CB_DATA_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.MATERIAL,
             SUM(T.QUANTITY) QUANTITY,
             SUM(T.COST_AMOUNT) COST_AMOUNT,
             SUM(T.COST_QUANTITY) COST_QUANTITY
        FROM (SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZQNDJ' DEPARTMENT,
                     FD.MATERIAL,
                     FD.QUANTITY,
                     FD.COST_AMOUNT,
                     FD.COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT = 'D01'
                 AND FD.SCENARIO = 'SC03'
                 AND DC.PERIOD_ID = FD.PERIOD_ID
                 AND DC.MONTH_CODE = P_MONTH
                 AND DC.YEAR_CODE = P_YEAR
              UNION ALL
              SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZQNDJ' DEPARTMENT,
                     FD.MATERIAL,
                     0 QUANTITY,
                     -FD.COST_AMOUNT COST_AMOUNT,
                     -FD.COST_QUANTITY COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT IN ('D0101', 'D0112')
                 AND FD.SCENARIO = 'SC03'
                 AND DC.PERIOD_ID = FD.PERIOD_ID
                 AND DC.MONTH_CODE = P_MONTH
                 AND DC.YEAR_CODE = P_YEAR) T
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT, T.MATERIAL;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_DL_A;

  --处理动力的预算数据
  PROCEDURE COST_DL_B(P_YEAR VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DATA_DL FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC01', 'SC02')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --插入数据
    INSERT INTO FACT_CB_DATA_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.MATERIAL,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY --总耗
        FROM /*HP.HP_DATA_TBCBYS_COST HT*/
            dwstg.HP_DATA_TBCBYS_COST  HT-- by dengj@besthelp 20130822 数据中心拆分
          , DIM_CB_PERIOD_V DC
       WHERE 1 = 1
         AND HT.ACCOUNT IN
             ('A0501010000000000', 'A0503010000000000', 'A0502020000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.PRODUCT = 'P00'
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.MATERIAL;
  
    COMMIT;
    --处理 总动力跟踪 的数据
    --总动力跟踪 的消耗和成本=总动力 - 外供 - 制麦
    INSERT INTO FACT_CB_DATA_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.MATERIAL,
             SUM(T.QUANTITY) QUANTITY,
             SUM(T.COST_AMOUNT) COST_AMOUNT,
             SUM(T.COST_QUANTITY) COST_QUANTITY
        FROM (SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZ' DEPARTMENT,
                     FD.MATERIAL,
                     FD.QUANTITY,
                     FD.COST_AMOUNT,
                     FD.COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT = 'D01'
                 AND FD.SCENARIO IN ('SC01', 'SC02')
                 AND FD.PERIOD_ID = DC.PERIOD_ID
                 AND DC.YEAR_CODE = P_YEAR
              UNION ALL
              SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZ' DEPARTMENT,
                     FD.MATERIAL,
                     0 QUANTITY,
                     -FD.COST_AMOUNT COST_AMOUNT,
                     -FD.COST_QUANTITY COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT IN ('D0101', 'D0112')
                 AND FD.SCENARIO IN ('SC01', 'SC02')
                 AND FD.PERIOD_ID = DC.PERIOD_ID
                 AND DC.YEAR_CODE = P_YEAR) T
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT, T.MATERIAL;
    COMMIT;
    --处理 总动力跟踪(全年单价) 的数据
    --总动力跟踪 的消耗和成本=总动力 - 外供 - 制麦
    INSERT INTO FACT_CB_DATA_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.MATERIAL,
             SUM(T.QUANTITY) QUANTITY,
             SUM(T.COST_AMOUNT) COST_AMOUNT,
             SUM(T.COST_QUANTITY) COST_QUANTITY
        FROM (SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZQNDJ' DEPARTMENT,
                     FD.MATERIAL,
                     FD.QUANTITY,
                     FD.COST_AMOUNT,
                     FD.COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT = 'D01'
                 AND FD.SCENARIO IN ('SC01', 'SC02')
                 AND FD.PERIOD_ID = DC.PERIOD_ID
                 AND DC.YEAR_CODE = P_YEAR
              UNION ALL
              SELECT DC.PERIOD_ID,
                     FD.ENTITY,
                     FD.SCENARIO,
                     'D01GZQNDJ' DEPARTMENT,
                     FD.MATERIAL,
                     0 QUANTITY,
                     -FD.COST_AMOUNT COST_AMOUNT,
                     -FD.COST_QUANTITY COST_QUANTITY
                FROM FACT_CB_DATA_DL FD, DIM_CB_PERIOD_V DC
               WHERE 1 = 1
                 AND FD.DEPARTMENT IN ('D0101', 'D0112')
                 AND FD.SCENARIO IN ('SC01', 'SC02')
                 AND FD.PERIOD_ID = DC.PERIOD_ID
                 AND DC.YEAR_CODE = P_YEAR) T
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT, T.MATERIAL;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_DL_B;

  --D01GZQNDJ_DIFF  '全年单价对应的差异';
  PROCEDURE D01GZQNDJ_DIFF IS
    L_AMOUNT NUMBER := 0;
    --
    L_ACTUAL_UC NUMBER := 0; --实际单耗
    --L_ACTUAL_UP   NUMBER := 0; --实际单价
    L_SCENARIO_UC            NUMBER := 0; --场景单耗
    L_LASTYEAR_COST_AMOUNT   NUMBER := 0; --同期成本
    L_LASTYEAR_COST_QUANTITY NUMBER := 0; --同期消耗
    L_SCENARIO_UP            NUMBER := 0; --场景单价
    L_UC_DIFF                NUMBER := 0; --单耗差异
    --L_UP_DIFF     NUMBER := 0; --单价差异
  BEGIN
    FOR I IN (select * from FACT_CB_DIFF_CALC FD) LOOP
      IF (NVL(I.ACTUAL_QUANTITY, 0) <> 0) THEN
        L_ACTUAL_UC := I.ACTUAL_COST_QUANTITY / I.ACTUAL_QUANTITY; --实际单耗      
      ELSE
        L_ACTUAL_UC := 0; --实际单耗
      END IF;
      --
      /*      IF (NVL(I.ACTUAL_COST_QUANTITY, 0) <> 0) THEN
        L_ACTUAL_UP := I.ACTUAL_COST_AMOUNT / I.ACTUAL_COST_QUANTITY; --实际单价      
      ELSE
        L_ACTUAL_UP := 0; --实际单价
      END IF;*/
      --    
      IF (NVL(I.SCENARIO_QUANTITY, 0) <> 0) THEN
        L_SCENARIO_UC := I.SCENARIO_COST_QUANTITY / I.SCENARIO_QUANTITY; --场景单耗      
      ELSE
        L_SCENARIO_UC := 0; --场景单耗
      END IF;
      --
      BEGIN
        select NVL(SUM(FCD.COST_AMOUNT), 0) COST_AMOUNT,
               NVL(SUM(FCD.COST_QUANTITY), 0) COST_QUANTITY
          INTO L_LASTYEAR_COST_AMOUNT, L_LASTYEAR_COST_QUANTITY
          from FACT_CB_DATA_DL FCD,
               DIM_CB_PERIOD_V DP1,
               DIM_CB_PERIOD_V DP2
         WHERE 1 = 1
           AND FCD.MATERIAL = I.MATERIAL
           AND FCD.DEPARTMENT = I.ENTITY
           AND FCD.SCENARIO = 'SC03'
           AND FCD.ENTITY = I.ENTITY
           AND FCD.PERIOD_ID = DP1.PERIOD_ID
           AND DP1.YEAR_ID = DP2.YEAR_ID - 1
           AND DP2.PERIOD_ID = I.PERIOD_ID;
      EXCEPTION
        WHEN OTHERS THEN
          L_LASTYEAR_COST_AMOUNT   := 0;
          L_LASTYEAR_COST_QUANTITY := 0;
      END;
      IF (NVL(L_LASTYEAR_COST_QUANTITY, 0) <> 0) THEN
        L_SCENARIO_UP := L_LASTYEAR_COST_AMOUNT / L_LASTYEAR_COST_QUANTITY; --场景单价      
      ELSE
        L_SCENARIO_UP := 0; --场景单价
      END IF;
      L_UC_DIFF := NVL(L_ACTUAL_UC, 0) - NVL(L_SCENARIO_UC, 0); --单耗差异
      --L_UP_DIFF := NVL(L_ACTUAL_UP, 0) - NVL(L_SCENARIO_UP, 0); --单价差异
      --消耗差异
      IF (NVL(I.ACTUAL_COST_AMOUNT, 0) <> 0 AND
         NVL(L_LASTYEAR_COST_AMOUNT, 0) <> 0) THEN
        L_AMOUNT := L_UC_DIFF * I.ACTUAL_QUANTITY * L_SCENARIO_UP;
      ELSE
        L_AMOUNT := 0;
      END IF;
      --插入数据
      INSERT INTO FACT_CB_DIFF_DL
        (PERIOD_ID,
         ENTITY,
         SCENARIO,
         DEPARTMENT,
         MATERIAL,
         ALL_DIFF,
         CONSUME_DIFF,
         PRICE_DIFF,
         QUANTITY_DIFF,
         OTHER_DIFF,
         NOFACTOR_DIFF)
        SELECT I.PERIOD_ID,
               I.ENTITY,
               I.SCENARIO,
               I.DEPARTMENT,
               I.MATERIAL,
               NVL(I.ACTUAL_COST_AMOUNT, 0) -
               NVL(I.SCENARIO_COST_AMOUNT, 0) ALL_DIFF,
               L_AMOUNT CONSUME_DIFF,
               dw_hp_tbcbys_pkg.PRICE_DIFF(I.ACTUAL_QUANTITY,
                                           I.ACTUAL_COST_QUANTITY,
                                           I.ACTUAL_COST_AMOUNT,
                                           I.SCENARIO_QUANTITY,
                                           I.SCENARIO_COST_QUANTITY,
                                           I.SCENARIO_COST_AMOUNT) PRICE_DIFF,
               dw_hp_tbcbys_pkg.QUANTITY_DIFF(I.ACTUAL_QUANTITY,
                                              I.ACTUAL_COST_QUANTITY,
                                              I.ACTUAL_COST_AMOUNT,
                                              I.SCENARIO_QUANTITY,
                                              I.SCENARIO_COST_QUANTITY,
                                              I.SCENARIO_COST_AMOUNT) QUANTITY_DIFF,
               dw_hp_tbcbys_pkg.OTHER_DIFF(I.ACTUAL_QUANTITY,
                                           I.ACTUAL_COST_QUANTITY,
                                           I.ACTUAL_COST_AMOUNT,
                                           I.SCENARIO_QUANTITY,
                                           I.SCENARIO_COST_QUANTITY,
                                           I.SCENARIO_COST_AMOUNT) OTHER_DIFF,
               dw_hp_tbcbys_pkg.NOFACTOR_DIFF(I.ACTUAL_QUANTITY,
                                              I.ACTUAL_COST_QUANTITY,
                                              I.ACTUAL_COST_AMOUNT,
                                              I.SCENARIO_QUANTITY,
                                              I.SCENARIO_COST_QUANTITY,
                                              I.SCENARIO_COST_AMOUNT) NOFACTOR_DIFF
          FROM DUAL;
      COMMIT;
    END LOOP;
  END D01GZQNDJ_DIFF;
  --写入动力的差异数据
  PROCEDURE INSERT_DL_DIFF IS
  BEGIN
    --插入数据
    INSERT INTO FACT_CB_DIFF_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FDC.PERIOD_ID,
             FDC.ENTITY,
             FDC.SCENARIO,
             FDC.DEPARTMENT,
             FDC.MATERIAL,
             NVL(FDC.ACTUAL_COST_AMOUNT, 0) -
             NVL(FDC.SCENARIO_COST_AMOUNT, 0) ALL_DIFF,
             dw_hp_tbcbys_pkg.consume_diff(FDC.ACTUAL_QUANTITY,
                                           FDC.ACTUAL_COST_QUANTITY,
                                           FDC.ACTUAL_COST_AMOUNT,
                                           FDC.SCENARIO_QUANTITY,
                                           FDC.SCENARIO_COST_QUANTITY,
                                           FDC.SCENARIO_COST_AMOUNT) CONSUME_DIFF,
             dw_hp_tbcbys_pkg.PRICE_DIFF(FDC.ACTUAL_QUANTITY,
                                         FDC.ACTUAL_COST_QUANTITY,
                                         FDC.ACTUAL_COST_AMOUNT,
                                         FDC.SCENARIO_QUANTITY,
                                         FDC.SCENARIO_COST_QUANTITY,
                                         FDC.SCENARIO_COST_AMOUNT) PRICE_DIFF,
             dw_hp_tbcbys_pkg.QUANTITY_DIFF(FDC.ACTUAL_QUANTITY,
                                            FDC.ACTUAL_COST_QUANTITY,
                                            FDC.ACTUAL_COST_AMOUNT,
                                            FDC.SCENARIO_QUANTITY,
                                            FDC.SCENARIO_COST_QUANTITY,
                                            FDC.SCENARIO_COST_AMOUNT) QUANTITY_DIFF,
             dw_hp_tbcbys_pkg.OTHER_DIFF(FDC.ACTUAL_QUANTITY,
                                         FDC.ACTUAL_COST_QUANTITY,
                                         FDC.ACTUAL_COST_AMOUNT,
                                         FDC.SCENARIO_QUANTITY,
                                         FDC.SCENARIO_COST_QUANTITY,
                                         FDC.SCENARIO_COST_AMOUNT) OTHER_DIFF,
             dw_hp_tbcbys_pkg.NOFACTOR_DIFF(FDC.ACTUAL_QUANTITY,
                                            FDC.ACTUAL_COST_QUANTITY,
                                            FDC.ACTUAL_COST_AMOUNT,
                                            FDC.SCENARIO_QUANTITY,
                                            FDC.SCENARIO_COST_QUANTITY,
                                            FDC.SCENARIO_COST_AMOUNT) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CALC FDC;
    COMMIT;
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END INSERT_DL_DIFF;
  --处理动力的差异数据
  PROCEDURE COST_DL_DIFF(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DIFF_DL FC
     WHERE 1 = 1
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --计算数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --预算差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from fact_cb_data_dl_v fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and ds.SCENARIO_CODE in ('SC01', 'SC02')
                 and fdc.SCENARIO = 'SC03'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from fact_cb_data_dl_v fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and fdc.SCENARIO in ('SC01', 'SC02')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_DL_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计预算差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and ds.SCENARIO_CODE in ('SC01_YTD', 'SC02_YTD')
                 and fdc.SCENARIO = 'SC03_YTD'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and fdc.SCENARIO in ('SC01_YTD', 'SC02_YTD')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_DL_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DL_V fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and ds.SCENARIO_CODE in ('SCTQ')
                 and fdc.SCENARIO = 'SC03'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLTQ_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and fdc.SCENARIO in ('SCTQ')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
         AND T.DEPARTMENT <> 'D01GZQNDJ'
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_DL_DIFF;
    --处理动力跟踪(全年单价) 差异
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DL_V fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and ds.SCENARIO_CODE in ('SCTQ')
                 and fdc.SCENARIO = 'SC03'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLTQ_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and fdc.SCENARIO in ('SCTQ')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
         AND T.DEPARTMENT = 'D01GZQNDJ'
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --写入差异数据
    D01GZQNDJ_DIFF;
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and ds.SCENARIO_CODE in ('SCTQ_YTD')
                 and fdc.SCENARIO = 'SC03_YTD'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLTQYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and fdc.SCENARIO in ('SCTQ_YTD')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
         AND T.DEPARTMENT <> 'D01GZQNDJ'
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_DL_DIFF;
    --处理动力跟踪(全年单价) 差异
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and ds.SCENARIO_CODE in ('SCTQ_YTD')
                 and fdc.SCENARIO = 'SC03_YTD'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     fdc.DEPARTMENT,
                     'T' PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_DLTQYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.MATERIAL <> 'M03' --直接动力的差异直接相加
                 and fdc.SCENARIO in ('SCTQ_YTD')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
         AND T.DEPARTMENT = 'D01GZQNDJ'
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --写入差异数据
    D01GZQNDJ_DIFF;
    --'M03'--直接动力的差异直接相加
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_DL
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       MATERIAL,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             'M03' MATERIAL,
             SUM(T.ALL_DIFF) ALL_DIFF,
             SUM(T.CONSUME_DIFF) CONSUME_DIFF,
             SUM(T.PRICE_DIFF) PRICE_DIFF,
             SUM(T.QUANTITY_DIFF) QUANTITY_DIFF,
             SUM(T.OTHER_DIFF) OTHER_DIFF,
             SUM(T.NOFACTOR_DIFF) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_DL T, dim_cb_period_v dc
       WHERE 1 = 1
         AND t.material<>'M0306' --总动力 去除 标煤
         and dc.PERIOD_ID = t.period_id
         and dc.MONTH_CODE = P_MONTH
         and dc.YEAR_CODE = P_YEAR
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT;
  
    COMMIT;
    --
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_DL_DIFF;
  --处理麦芽的实际数据
  PROCEDURE COST_MY_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DATA_MY FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC03')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    
    --删除麦芽产量数据
    DELETE FROM FACT_CB_QUANTITY_MY FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC03')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT; 
    
    --计算销量数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_QUANTITY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0501020000000000', HT.DATA, 0)) DIS_QUANTITY --折标产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_MY_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000', 'A0501020000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --计算消耗数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY, --总耗
             SUM(DECODE(HT.ACCOUNT, 'A0502260000000000', HT.DATA, 0)) COST_STD_AMOUNT, --总耗
             0 COST_STANDARD,
             0 COST_DISCOUNT
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_MY_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN
             ('A0503010000000000', 'A0502020000000000', 'A0502260000000000 ')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL <> 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --插入数据
    INSERT INTO FACT_CB_DATA_MY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       QUANTITY,
       DIS_QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.PRODUCT,
             T.MATERIAL,
             SUM(T.QUANTITY) QUANTITY, --产量
             SUM(T.DIS_QUANTITY) DIS_QUANTITY, --折标产量
             SUM(T.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(T.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(T.COST_STD_AMOUNT) COST_STD_AMOUNT --标准量乘产量
        FROM (SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     0 QUANTITY, --产量
                     0 DIS_QUANTITY, --折标产量
                     FA.COST_AMOUNT, --总成本
                     FA.COST_QUANTITY, --总耗
                     FA.COST_STD_AMOUNT --标准量乘产量
                FROM FACT_CB_DATA_AMOUNT FA
              UNION ALL
              SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     FQ.QUANTITY, --产量
                     FQ.DIS_QUANTITY, --折标产量
                     0 COST_AMOUNT, --总成本
                     0 COST_QUANTITY, --总耗
                     0 COST_STD_AMOUNT --标准量乘产量
                FROM FACT_CB_DATA_AMOUNT FA, FACT_CB_DATA_QUANTITY FQ
               WHERE 1 = 1
                 AND FA.PERIOD_ID = FQ.PERIOD_ID
                 AND FA.ENTITY = FQ.ENTITY
                 AND FA.SCENARIO = FQ.SCENARIO
                 AND FA.DEPARTMENT = FQ.DEPARTMENT
                 AND FA.PRODUCT = FQ.PRODUCT
                    --AND     FA.MATERIAL=FQ.MATERIAL
                 AND FA.PACKAGE = FQ.PACKAGE) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.PRODUCT, T.MATERIAL;
    COMMIT;
    
    --查看麦芽产量数据     
    INSERT INTO FACT_CB_QUANTITY_MY
      (PERIOD_ID, ENTITY, SCENARIO, PRODUCT, QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.PRODUCT,
             SUM(NVL(HT.DATA, 0)) QUANTITY --产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_MY_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT = 'A0501010000000000'
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'--
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.SCENARIO IN ('SC03')
         AND HT.PACKAGE ='PK00'
         AND HT.PRODUCT = DI.PRODUCT
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.PRODUCT;
    commit;
    
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_MY_A;

  --处理麦芽的预算数据
  PROCEDURE COST_MY_B(P_YEAR VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DATA_MY FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC01', 'SC02')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    
    --删除麦芽产量数据
    DELETE FROM FACT_CB_QUANTITY_MY FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC01', 'SC02')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT; 
  
    --计算销量数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_QUANTITY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0501020000000000', HT.DATA, 0)) DIS_QUANTITY --折标产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_MY_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000', 'A0501020000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --计算消耗数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY, --总耗
             SUM(DECODE(HT.ACCOUNT, 'A0502260000000000', HT.DATA, 0)) COST_STD_AMOUNT, --标准量乘产量
             0 COST_STANDARD,
             0 COST_DISCOUNT
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_MY_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN
             ('A0503010000000000', 'A0502020000000000', 'A0502260000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL <> 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --插入数据
    INSERT INTO FACT_CB_DATA_MY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       QUANTITY,
       DIS_QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.PRODUCT,
             T.MATERIAL,
             SUM(T.QUANTITY) QUANTITY, --产量
             SUM(T.DIS_QUANTITY) DIS_QUANTITY, --折标产量
             SUM(T.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(T.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(T.COST_STD_AMOUNT) COST_STD_AMOUNT --标准量乘产量
        FROM (SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     0 QUANTITY, --产量
                     0 DIS_QUANTITY, --折标产量
                     FA.COST_AMOUNT, --总成本
                     FA.COST_QUANTITY, --总耗
                     FA.COST_STD_AMOUNT --标准量乘产量
                FROM FACT_CB_DATA_AMOUNT FA
              UNION ALL
              SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     FQ.QUANTITY, --产量
                     FQ.DIS_QUANTITY, --折标产量
                     0 COST_AMOUNT, --总成本
                     0 COST_QUANTITY, --总耗
                     0 COST_STD_AMOUNT --标准量乘产量
                FROM FACT_CB_DATA_AMOUNT FA, FACT_CB_DATA_QUANTITY FQ
               WHERE 1 = 1
                 AND FA.PERIOD_ID = FQ.PERIOD_ID
                 AND FA.ENTITY = FQ.ENTITY
                 AND FA.SCENARIO = FQ.SCENARIO
                 AND FA.DEPARTMENT = FQ.DEPARTMENT
                 AND FA.PRODUCT = FQ.PRODUCT
                    --AND     FA.MATERIAL=FQ.MATERIAL
                 AND FA.PACKAGE = FQ.PACKAGE) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.PRODUCT, T.MATERIAL;
    COMMIT;
    
    --查看麦芽产量数据     
    INSERT INTO FACT_CB_QUANTITY_MY
      (PERIOD_ID, ENTITY, SCENARIO, PRODUCT, QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.PRODUCT,
             SUM(NVL(HT.DATA, 0)) QUANTITY --产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_MY_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT = 'A0501010000000000'
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'--
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.SCENARIO IN ('SC01','SC02')
         AND HT.PACKAGE ='PK00'
         AND HT.PRODUCT = DI.PRODUCT
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.PRODUCT;
    commit;
    
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_MY_B;

  --写入动力的差异数据
  PROCEDURE INSERT_MY_DIFF IS
  BEGIN
    --插入数据
    INSERT INTO FACT_CB_DIFF_MY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FDC.PERIOD_ID,
             FDC.ENTITY,
             FDC.SCENARIO,
             FDC.PRODUCT,
             FDC.MATERIAL,
             NVL(FDC.ACTUAL_COST_AMOUNT, 0) -
             NVL(FDC.SCENARIO_COST_AMOUNT, 0) ALL_DIFF,
             dw_hp_tbcbys_pkg.consume_diff(FDC.ACTUAL_QUANTITY,
                                           FDC.ACTUAL_COST_QUANTITY,
                                           FDC.ACTUAL_COST_AMOUNT,
                                           FDC.SCENARIO_QUANTITY,
                                           FDC.SCENARIO_COST_QUANTITY,
                                           FDC.SCENARIO_COST_AMOUNT) CONSUME_DIFF,
             dw_hp_tbcbys_pkg.PRICE_DIFF(FDC.ACTUAL_QUANTITY,
                                         FDC.ACTUAL_COST_QUANTITY,
                                         FDC.ACTUAL_COST_AMOUNT,
                                         FDC.SCENARIO_QUANTITY,
                                         FDC.SCENARIO_COST_QUANTITY,
                                         FDC.SCENARIO_COST_AMOUNT) PRICE_DIFF,
             dw_hp_tbcbys_pkg.QUANTITY_DIFF(FDC.ACTUAL_QUANTITY,
                                            FDC.ACTUAL_COST_QUANTITY,
                                            FDC.ACTUAL_COST_AMOUNT,
                                            FDC.SCENARIO_QUANTITY,
                                            FDC.SCENARIO_COST_QUANTITY,
                                            FDC.SCENARIO_COST_AMOUNT) QUANTITY_DIFF,
             dw_hp_tbcbys_pkg.OTHER_DIFF(FDC.ACTUAL_QUANTITY,
                                         FDC.ACTUAL_COST_QUANTITY,
                                         FDC.ACTUAL_COST_AMOUNT,
                                         FDC.SCENARIO_QUANTITY,
                                         FDC.SCENARIO_COST_QUANTITY,
                                         FDC.SCENARIO_COST_AMOUNT) OTHER_DIFF,
             dw_hp_tbcbys_pkg.NOFACTOR_DIFF(FDC.ACTUAL_QUANTITY,
                                            FDC.ACTUAL_COST_QUANTITY,
                                            FDC.ACTUAL_COST_AMOUNT,
                                            FDC.SCENARIO_QUANTITY,
                                            FDC.SCENARIO_COST_QUANTITY,
                                            FDC.SCENARIO_COST_AMOUNT) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CALC FDC;
    COMMIT;
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END INSERT_MY_DIFF;

  --处理麦芽的差异数据
  PROCEDURE COST_MY_DIFF(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DIFF_MY FC
     WHERE 1 = 1
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --计算数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --预算差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from fact_cb_data_MY_v fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SC01', 'SC02')
                 and fdc.SCENARIO = 'SC03'
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from fact_cb_data_MY_v fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SC01', 'SC02')
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_MY_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计预算差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_MYYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SC01_YTD', 'SC02_YTD')
                 and fdc.SCENARIO = 'SC03_YTD'
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_MYYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SC01_YTD', 'SC02_YTD')
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_MY_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_MY_V fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SCTQ')
                 and fdc.SCENARIO = 'SC03'
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_MYTQ_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SCTQ')
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_MY_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_MYYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SCTQ_YTD')
                 and fdc.SCENARIO = 'SC03_YTD'
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     'T' PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_MYTQYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SCTQ_YTD')
                 AND fdc.MATERIAL NOT IN ('M02','M0102','M0103','M0201','M020101','M020102','M020103')--
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_MY_DIFF;
    
    --新增麦芽成本项目处理逻辑：一，二，三层自动汇总。
    --由第4层汇总至第3层
    INSERT INTO FACT_CB_DIFF_MY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FDM.PERIOD_ID,
             FDM.ENTITY,
             FDM.SCENARIO,
             FDM.PRODUCT,
             M.LEVEL2_CODE MATERIAL,
             sum(FDM.ALL_DIFF) ALL_DIFF,
             sum(FDM.CONSUME_DIFF)CONSUME_DIFF,
             sum(FDM.PRICE_DIFF)PRICE_DIFF,
             sum(FDM.QUANTITY_DIFF)QUANTITY_DIFF,
             sum(FDM.OTHER_DIFF)OTHER_DIFF,
             sum(FDM.NOFACTOR_DIFF)NOFACTOR_DIFF
        FROM FACT_CB_DIFF_MY FDM,
             DIM_CB_MY_MATERIAL_LEVEL3_V M,
             dim_cb_period_v  dc
      WHERE 1=1 
        AND FDM.MATERIAL=M.LEVEL3_CODE   
        AND FDM.PERIOD_ID = dc.period_id
        AND dc.MONTH_CODE = P_MONTH
        AND dc.YEAR_CODE = P_YEAR 
      GROUP BY FDM.PERIOD_ID,
               FDM.ENTITY,
               FDM.SCENARIO,
               FDM.PRODUCT,
               M.LEVEL2_CODE;
    COMMIT; --  
    
    --由第3层汇总至第2层
    INSERT INTO FACT_CB_DIFF_MY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FDM.PERIOD_ID,
             FDM.ENTITY,
             FDM.SCENARIO,
             FDM.PRODUCT,
             M.LEVEL1_CODE MATERIAL,
             sum(FDM.ALL_DIFF) ALL_DIFF,
             sum(FDM.CONSUME_DIFF)CONSUME_DIFF,
             sum(FDM.PRICE_DIFF)PRICE_DIFF,
             sum(FDM.QUANTITY_DIFF)QUANTITY_DIFF,
             sum(FDM.OTHER_DIFF)OTHER_DIFF,
             sum(FDM.NOFACTOR_DIFF)NOFACTOR_DIFF
        FROM FACT_CB_DIFF_MY FDM,
             DIM_CB_MY_MATERIAL_LEVEL2_V M,
             dim_cb_period_v  dc
      WHERE 1=1 
        AND FDM.MATERIAL=M.LEVEL2_CODE   
        AND FDM.PERIOD_ID = dc.period_id
        AND dc.MONTH_CODE = P_MONTH
        AND dc.YEAR_CODE = P_YEAR 
      GROUP BY FDM.PERIOD_ID,
               FDM.ENTITY,
               FDM.SCENARIO,
               FDM.PRODUCT,
               M.LEVEL1_CODE;
    COMMIT; --   
    
    --由第2层汇总至第1层
    INSERT INTO FACT_CB_DIFF_MY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FDM.PERIOD_ID,
             FDM.ENTITY,
             FDM.SCENARIO,
             FDM.PRODUCT,
             M.LEVEL0_CODE MATERIAL,
             sum(FDM.ALL_DIFF) ALL_DIFF,
             sum(FDM.CONSUME_DIFF)CONSUME_DIFF,
             sum(FDM.PRICE_DIFF)PRICE_DIFF,
             sum(FDM.QUANTITY_DIFF)QUANTITY_DIFF,
             sum(FDM.OTHER_DIFF)OTHER_DIFF,
             sum(FDM.NOFACTOR_DIFF)NOFACTOR_DIFF
        FROM FACT_CB_DIFF_MY FDM,
             DIM_CB_MY_MATERIAL_LEVEL1_V M,
             dim_cb_period_v  dc
      WHERE 1=1 
        AND FDM.MATERIAL=M.LEVEL1_CODE   
        AND FDM.PERIOD_ID = dc.period_id
        AND dc.MONTH_CODE = P_MONTH
        AND dc.YEAR_CODE = P_YEAR 
      GROUP BY FDM.PERIOD_ID,
               FDM.ENTITY,
               FDM.SCENARIO,
               FDM.PRODUCT,
               M.LEVEL0_CODE;
    COMMIT; --      
    --
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_MY_DIFF;
  --处理产品数据的物料汇总层次
  PROCEDURE CP_MATERIAL IS
  BEGIN
    --物料次小类
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT FA.PERIOD_ID,
             FA.ENTITY,
             FA.SCENARIO,
             FA.DEPARTMENT,
             FA.PRODUCT,
             CM.PFWL_SEGMENT4_CODE MATERIAL,
             FA.PACKAGE,
             SUM(FA.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(FA.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(FA.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(FA.COST_STANDARD) COST_STANDARD, --标准量
             SUM(FA.COST_DISCOUNT) COST_DISCOUNT --折标总耗
        FROM FACT_CB_DATA_AMOUNT FA, DIM_CB_CP_MATERIAL_V CM
       WHERE 1 = 1
         AND CM.MATERIAL = FA.MATERIAL
       GROUP BY FA.PERIOD_ID,
                FA.ENTITY,
                FA.SCENARIO,
                FA.DEPARTMENT,
                FA.PRODUCT,
                CM.PFWL_SEGMENT4_CODE,
                FA.PACKAGE;
    commit;
  
    --物料小类
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT FA.PERIOD_ID,
             FA.ENTITY,
             FA.SCENARIO,
             FA.DEPARTMENT,
             FA.PRODUCT,
             CM.PFWL_SEGMENT3_CODE MATERIAL,
             FA.PACKAGE,
             SUM(FA.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(FA.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(FA.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(FA.COST_STANDARD) COST_STANDARD, --标准量
             SUM(FA.COST_DISCOUNT) COST_DISCOUNT --折标总耗
        FROM FACT_CB_DATA_AMOUNT FA, DIM_CB_CP_MATERIAL_V CM
       WHERE 1 = 1
         AND CM.MATERIAL = FA.MATERIAL
       GROUP BY FA.PERIOD_ID,
                FA.ENTITY,
                FA.SCENARIO,
                FA.DEPARTMENT,
                FA.PRODUCT,
                CM.PFWL_SEGMENT3_CODE,
                FA.PACKAGE;
    commit;
  
    --物料中类
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT FA.PERIOD_ID,
             FA.ENTITY,
             FA.SCENARIO,
             FA.DEPARTMENT,
             FA.PRODUCT,
             CM.PFWL_SEGMENT2_CODE MATERIAL,
             FA.PACKAGE,
             SUM(FA.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(FA.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(FA.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(FA.COST_STANDARD) COST_STANDARD, --标准量
             SUM(FA.COST_DISCOUNT) COST_DISCOUNT --折标总耗
        FROM FACT_CB_DATA_AMOUNT FA, DIM_CB_CP_MATERIAL_V CM
       WHERE 1 = 1
         AND CM.MATERIAL = FA.MATERIAL
       GROUP BY FA.PERIOD_ID,
                FA.ENTITY,
                FA.SCENARIO,
                FA.DEPARTMENT,
                FA.PRODUCT,
                CM.PFWL_SEGMENT2_CODE,
                FA.PACKAGE;
    commit;
  
    --物料中类
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT FA.PERIOD_ID,
             FA.ENTITY,
             FA.SCENARIO,
             FA.DEPARTMENT,
             FA.PRODUCT,
             CM.PFWL_SEGMENT1_CODE MATERIAL,
             FA.PACKAGE,
             SUM(FA.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(FA.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(FA.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(FA.COST_STANDARD) COST_STANDARD, --标准量
             SUM(FA.COST_DISCOUNT) COST_DISCOUNT --折标总耗
        FROM FACT_CB_DATA_AMOUNT FA, DIM_CB_CP_MATERIAL_V CM
       WHERE 1 = 1
         AND CM.MATERIAL = FA.MATERIAL
       GROUP BY FA.PERIOD_ID,
                FA.ENTITY,
                FA.SCENARIO,
                FA.DEPARTMENT,
                FA.PRODUCT,
                CM.PFWL_SEGMENT1_CODE,
                FA.PACKAGE;
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END CP_MATERIAL;
  --处理投入物料及产成品的实际数据
  PROCEDURE COST_CP_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DATA_CP FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC03')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --按部门查看产量的数据
    DELETE FROM FACT_CB_QUANTITY_CP FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC03')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --计算销量数据--投入物料
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_QUANTITY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0501020000000000', HT.DATA, 0)) DIS_QUANTITY --折标产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_TR_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000', 'A0501020000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO = 'SC03'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --计算消耗数据--投入物料
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY, --总耗
             SUM(DECODE(HT.ACCOUNT, 'A0502260000000000', HT.DATA, 0)) COST_STD_AMOUNT, --标准量乘产量
             SUM(DECODE(HT.ACCOUNT, 'A0502190000000000', HT.DATA, 0)) COST_STANDARD, --标准量
             SUM(DECODE(HT.ACCOUNT, 'A0502030000000000', HT.DATA, 0)) COST_DISCOUNT --折标总耗
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_TR_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0503010000000000', 'A0502020000000000',
              'A0502260000000000', 'A0502030000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL <> 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO = 'SC03'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --处理产品数据的物料汇总层次
    CP_MATERIAL;
    --插入数据
    INSERT INTO FACT_CB_DATA_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.QUANTITY) QUANTITY, --产量
             SUM(T.DIS_QUANTITY) DIS_QUANTITY, --折标产量
             SUM(T.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(T.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(T.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(T.COST_STANDARD) COST_QUANTITY, --标准量
             SUM(T.COST_DISCOUNT) COST_STD_AMOUNT --折标总耗
        FROM (SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     0 QUANTITY, --产量
                     0 DIS_QUANTITY, --折标产量
                     FA.COST_AMOUNT, --总成本
                     FA.COST_QUANTITY, --总耗
                     FA.COST_STD_AMOUNT, --标准量乘产量
                     FA.COST_STANDARD, --标准量
                     FA.COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA
              UNION ALL
              SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     FQ.QUANTITY, --产量
                     FQ.DIS_QUANTITY, --折标产量
                     0 COST_AMOUNT, --总成本
                     0 COST_QUANTITY, --总耗
                     0 COST_STD_AMOUNT, --标准量乘产量
                     0 COST_STANDARD, --标准量
                     0 COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA, FACT_CB_DATA_QUANTITY FQ
               WHERE 1 = 1
                 AND FA.PERIOD_ID = FQ.PERIOD_ID
                 AND FA.ENTITY = FQ.ENTITY
                 AND FA.SCENARIO = FQ.SCENARIO
                 AND FA.DEPARTMENT = FQ.DEPARTMENT
                 AND FA.PRODUCT = FQ.PRODUCT
                    --AND     FA.MATERIAL=FQ.MATERIAL
                 AND FA.PACKAGE = FQ.PACKAGE) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --计算销量数据--产成品
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_QUANTITY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D00' DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0501020000000000', HT.DATA, 0)) DIS_QUANTITY --折标产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000', 'A0501020000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO = 'SC03'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --计算消耗数据--产成品
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY, --总耗
             SUM(DECODE(HT.ACCOUNT, 'A0502260000000000', HT.DATA, 0)) COST_STD_AMOUNT, --标准量乘产量
             SUM(DECODE(HT.ACCOUNT, 'A0502190000000000', HT.DATA, 0)) COST_STANDARD, --标准量
             SUM(DECODE(HT.ACCOUNT, 'A0502030000000000', HT.DATA, 0)) COST_DISCOUNT --折标总耗
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0503010000000000', 'A0502020000000000',
              'A0502260000000000', 'A0502030000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL <> 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO = 'SC03'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --处理产品数据的物料汇总层次
    CP_MATERIAL;
    --插入数据
    INSERT INTO FACT_CB_DATA_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.QUANTITY) QUANTITY, --产量
             SUM(T.DIS_QUANTITY) DIS_QUANTITY, --折标产量
             SUM(T.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(T.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(T.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(T.COST_STANDARD) COST_QUANTITY, --标准量
             SUM(T.COST_DISCOUNT) COST_STD_AMOUNT --折标总耗
        FROM (SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     0 QUANTITY, --产量
                     0 DIS_QUANTITY, --折标产量
                     FA.COST_AMOUNT, --总成本
                     FA.COST_QUANTITY, --总耗
                     FA.COST_STD_AMOUNT, --标准量乘产量
                     FA.COST_STANDARD, --标准量
                     FA.COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA
              UNION ALL
              SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     FQ.QUANTITY, --产量
                     FQ.DIS_QUANTITY, --折标产量
                     0 COST_AMOUNT, --总成本
                     0 COST_QUANTITY, --总耗
                     0 COST_STD_AMOUNT, --标准量乘产量
                     0 COST_STANDARD, --标准量
                     0 COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA, FACT_CB_DATA_QUANTITY FQ
               WHERE 1 = 1
                 AND FA.PERIOD_ID = FQ.PERIOD_ID
                 AND FA.ENTITY = FQ.ENTITY
                 AND FA.SCENARIO = FQ.SCENARIO
                 AND FA.DEPARTMENT = FQ.DEPARTMENT
                 AND FA.PRODUCT = FQ.PRODUCT
                    --AND     FA.MATERIAL=FQ.MATERIAL
                 AND FA.PACKAGE = FQ.PACKAGE) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
  
    --按部门查看产成品产量数据
    INSERT INTO FACT_CB_QUANTITY_CP
      (PERIOD_ID, ENTITY, SCENARIO, PRODUCT, PACKAGE, DEPARTMENT, QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.PRODUCT,
             HT.PACKAGE,
             HT.DEPARTMENT,
             SUM(NVL(HT.DATA, 0)) QUANTITY --产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT = 'A0501010000000000'
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT <> 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO = 'SC03'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.PRODUCT,
                HT.PACKAGE,
                HT.DEPARTMENT;
    commit;
    
     --查看投入物料产量数据
    INSERT INTO FACT_CB_QUANTITY_CP
      (PERIOD_ID, ENTITY, SCENARIO, PRODUCT, PACKAGE, DEPARTMENT, QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.PRODUCT,
             HT.PACKAGE,
             HT.DEPARTMENT,
             SUM(NVL(HT.DATA, 0)) QUANTITY --产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_TR_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT = 'A0501010000000000'
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'--
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.SCENARIO = 'SC03'
         AND HT.PACKAGE ='PK00'
         AND HT.PRODUCT = DI.PRODUCT
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.PRODUCT,
                HT.PACKAGE,
                HT.DEPARTMENT;
    commit;
    
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_CP_A;

  --处理投入物料及产成品的预算数据
  PROCEDURE COST_CP_B(P_YEAR VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DATA_CP FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC01', 'SC02')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --按部门查看产量的数据
    DELETE FROM FACT_CB_QUANTITY_CP FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC01', 'SC02')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
  
    --计算销量数据--投入物料
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_QUANTITY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0501020000000000', HT.DATA, 0)) DIS_QUANTITY --折标产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_TR_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000', 'A0501020000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --计算消耗数据--投入物料
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY, --总耗
             SUM(DECODE(HT.ACCOUNT, 'A0502260000000000', HT.DATA, 0)) COST_STD_AMOUNT, --标准量乘产量
             SUM(DECODE(HT.ACCOUNT, 'A0502190000000000', HT.DATA, 0)) COST_STANDARD, --标准量
             SUM(DECODE(HT.ACCOUNT, 'A0502030000000000', HT.DATA, 0)) COST_DISCOUNT --折标总耗
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_TR_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0503010000000000', 'A0502020000000000',
              'A0502260000000000', 'A0502030000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = 'PK00'
         AND HT.MATERIAL <> 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --处理产品数据的物料汇总层次
    CP_MATERIAL;
    --插入数据
    INSERT INTO FACT_CB_DATA_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.QUANTITY) QUANTITY, --产量
             SUM(T.DIS_QUANTITY) DIS_QUANTITY, --折标产量
             SUM(T.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(T.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(T.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(T.COST_STANDARD) COST_QUANTITY, --标准量
             SUM(T.COST_DISCOUNT) COST_STD_AMOUNT --折标总耗
        FROM (SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     0 QUANTITY, --产量
                     0 DIS_QUANTITY, --折标产量
                     FA.COST_AMOUNT, --总成本
                     FA.COST_QUANTITY, --总耗
                     FA.COST_STD_AMOUNT, --标准量乘产量
                     FA.COST_STANDARD, --标准量
                     FA.COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA
              UNION ALL
              SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     FQ.QUANTITY, --产量
                     FQ.DIS_QUANTITY, --折标产量
                     0 COST_AMOUNT, --总成本
                     0 COST_QUANTITY, --总耗
                     0 COST_STD_AMOUNT, --标准量乘产量
                     0 COST_STANDARD, --标准量
                     0 COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA, FACT_CB_DATA_QUANTITY FQ
               WHERE 1 = 1
                 AND FA.PERIOD_ID = FQ.PERIOD_ID
                 AND FA.ENTITY = FQ.ENTITY
                 AND FA.SCENARIO = FQ.SCENARIO
                 AND FA.DEPARTMENT = FQ.DEPARTMENT
                 AND FA.PRODUCT = FQ.PRODUCT
                    --AND     FA.MATERIAL=FQ.MATERIAL
                 AND FA.PACKAGE = FQ.PACKAGE) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --处理物料层次的成本
  
    --计算销量数据--产成品
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_QUANTITY
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D00' DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0501010000000000', HT.DATA, 0)) QUANTITY, --产量
             SUM(DECODE(HT.ACCOUNT, 'A0501020000000000', HT.DATA, 0)) DIS_QUANTITY --折标产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000', 'A0501020000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --计算消耗数据--产成品
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    INSERT /*+ APPEND */
    INTO FACT_CB_DATA_AMOUNT
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             HT.PRODUCT,
             HT.MATERIAL,
             HT.PACKAGE,
             SUM(DECODE(HT.ACCOUNT, 'A0503010000000000', HT.DATA, 0)) COST_AMOUNT, --总成本
             SUM(DECODE(HT.ACCOUNT, 'A0502020000000000', HT.DATA, 0)) COST_QUANTITY, --总耗
             SUM(DECODE(HT.ACCOUNT, 'A0502260000000000', HT.DATA, 0)) COST_STD_AMOUNT, --标准量乘产量
             SUM(DECODE(HT.ACCOUNT, 'A0502190000000000', HT.DATA, 0)) COST_STANDARD, --标准量
             SUM(DECODE(HT.ACCOUNT, 'A0502030000000000', HT.DATA, 0)) COST_DISCOUNT --折标总耗
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0503010000000000', 'A0502020000000000',
              'A0502260000000000', 'A0502030000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL <> 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.DEPARTMENT,
                HT.PRODUCT,
                HT.MATERIAL,
                HT.PACKAGE;
    commit;
    --处理产品数据的物料汇总层次
    CP_MATERIAL;
    --插入数据
    INSERT INTO FACT_CB_DATA_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       QUANTITY,
       DIS_QUANTITY,
       COST_AMOUNT,
       COST_QUANTITY,
       COST_STD_AMOUNT,
       COST_STANDARD,
       COST_DISCOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.QUANTITY) QUANTITY, --产量
             SUM(T.DIS_QUANTITY) DIS_QUANTITY, --折标产量
             SUM(T.COST_AMOUNT) COST_AMOUNT, --总成本
             SUM(T.COST_QUANTITY) COST_QUANTITY, --总耗
             SUM(T.COST_STD_AMOUNT) COST_STD_AMOUNT, --标准量乘产量
             SUM(T.COST_STANDARD) COST_QUANTITY, --标准量
             SUM(T.COST_DISCOUNT) COST_STD_AMOUNT --折标总耗
        FROM (SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     0 QUANTITY, --产量
                     0 DIS_QUANTITY, --折标产量
                     FA.COST_AMOUNT, --总成本
                     FA.COST_QUANTITY, --总耗
                     FA.COST_STD_AMOUNT, --标准量乘产量
                     FA.COST_STANDARD, --标准量
                     FA.COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA
              UNION ALL
              SELECT FA.PERIOD_ID,
                     FA.ENTITY,
                     FA.SCENARIO,
                     FA.DEPARTMENT,
                     FA.PRODUCT,
                     FA.MATERIAL,
                     FA.PACKAGE,
                     FQ.QUANTITY, --产量
                     FQ.DIS_QUANTITY, --折标产量
                     0 COST_AMOUNT, --总成本
                     0 COST_QUANTITY, --总耗
                     0 COST_STD_AMOUNT, --标准量乘产量
                     0 COST_STANDARD, --标准量
                     0 COST_DISCOUNT --折标总耗
                FROM FACT_CB_DATA_AMOUNT FA, FACT_CB_DATA_QUANTITY FQ
               WHERE 1 = 1
                 AND FA.PERIOD_ID = FQ.PERIOD_ID
                 AND FA.ENTITY = FQ.ENTITY
                 AND FA.SCENARIO = FQ.SCENARIO
                 AND FA.DEPARTMENT = FQ.DEPARTMENT
                 AND FA.PRODUCT = FQ.PRODUCT
                    --AND     FA.MATERIAL=FQ.MATERIAL
                 AND FA.PACKAGE = FQ.PACKAGE) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --按部门查看产成品产量数据
    INSERT INTO FACT_CB_QUANTITY_CP
      (PERIOD_ID, ENTITY, SCENARIO, PRODUCT, PACKAGE, DEPARTMENT, QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.PRODUCT,
             HT.PACKAGE,
             HT.DEPARTMENT,
             SUM(NVL(HT.DATA, 0)) QUANTITY --产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT = 'A0501010000000000'
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT <> 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.PRODUCT,
                HT.PACKAGE,
                HT.DEPARTMENT;
    commit;
    
     --查看投入物料产量数据
    INSERT INTO FACT_CB_QUANTITY_CP
      (PERIOD_ID, ENTITY, SCENARIO, PRODUCT, PACKAGE, DEPARTMENT, QUANTITY)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.PRODUCT,
             HT.PACKAGE,
             HT.DEPARTMENT,
             SUM(NVL(HT.DATA, 0)) QUANTITY --产量
        FROM/* HP.HP_DATA_TBCBYS_COST HT,*/ 
        dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_TR_ITEM_V       DI
       WHERE 1 = 1
         AND HT.ACCOUNT = 'A0501010000000000'
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'--
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND HT.PACKAGE ='PK00'
         AND HT.PRODUCT = DI.PRODUCT
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID,
                HT.ENTITY,
                HT.SCENARIO,
                HT.PRODUCT,
                HT.PACKAGE,
                HT.DEPARTMENT;
    commit;
    
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_CP_B;
  --写入产品及投入物料的差异数据
  PROCEDURE INSERT_CP_DIFF IS
  BEGIN
    --插入数据
    INSERT INTO FACT_CB_DIFF_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FDC.PERIOD_ID,
             FDC.ENTITY,
             FDC.SCENARIO,
             FDC.PRODUCT,
             FDC.MATERIAL,
             FDC.PACKAGE,
             NVL(FDC.ACTUAL_COST_AMOUNT, 0) -
             NVL(FDC.SCENARIO_COST_AMOUNT, 0) ALL_DIFF,
             dw_hp_tbcbys_pkg.consume_diff(FDC.ACTUAL_QUANTITY,
                                           FDC.ACTUAL_COST_QUANTITY,
                                           FDC.ACTUAL_COST_AMOUNT,
                                           FDC.SCENARIO_QUANTITY,
                                           FDC.SCENARIO_COST_QUANTITY,
                                           FDC.SCENARIO_COST_AMOUNT) CONSUME_DIFF,
             dw_hp_tbcbys_pkg.PRICE_DIFF(FDC.ACTUAL_QUANTITY,
                                         FDC.ACTUAL_COST_QUANTITY,
                                         FDC.ACTUAL_COST_AMOUNT,
                                         FDC.SCENARIO_QUANTITY,
                                         FDC.SCENARIO_COST_QUANTITY,
                                         FDC.SCENARIO_COST_AMOUNT) PRICE_DIFF,
             dw_hp_tbcbys_pkg.QUANTITY_DIFF(FDC.ACTUAL_QUANTITY,
                                            FDC.ACTUAL_COST_QUANTITY,
                                            FDC.ACTUAL_COST_AMOUNT,
                                            FDC.SCENARIO_QUANTITY,
                                            FDC.SCENARIO_COST_QUANTITY,
                                            FDC.SCENARIO_COST_AMOUNT) QUANTITY_DIFF,
             dw_hp_tbcbys_pkg.OTHER_DIFF(FDC.ACTUAL_QUANTITY,
                                         FDC.ACTUAL_COST_QUANTITY,
                                         FDC.ACTUAL_COST_AMOUNT,
                                         FDC.SCENARIO_QUANTITY,
                                         FDC.SCENARIO_COST_QUANTITY,
                                         FDC.SCENARIO_COST_AMOUNT) OTHER_DIFF,
             dw_hp_tbcbys_pkg.NOFACTOR_DIFF(FDC.ACTUAL_QUANTITY,
                                            FDC.ACTUAL_COST_QUANTITY,
                                            FDC.ACTUAL_COST_AMOUNT,
                                            FDC.SCENARIO_QUANTITY,
                                            FDC.SCENARIO_COST_QUANTITY,
                                            FDC.SCENARIO_COST_AMOUNT) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CALC FDC;
    COMMIT;
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END INSERT_CP_DIFF;

  --处理产成品及投入物料的差异数据
  PROCEDURE COST_CP_DIFF(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_DIFF_CP FC
     WHERE 1 = 1
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --计算数据
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --预算差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from fact_cb_data_CP_v fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SC01', 'SC02')
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.SCENARIO = 'SC03'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from fact_cb_data_CP_v fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SC01', 'SC02')
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_CP_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计预算差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_CPYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SC01_YTD', 'SC02_YTD')
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.SCENARIO = 'SC03_YTD'
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_CPYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SC01_YTD', 'SC02_YTD')
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_CP_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_CP_V fdc,
                     dim_cb_period_v   dc,
                     dim_cb_scenario_v ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SCTQ')
                 and fdc.SCENARIO = 'SC03'
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_CPTQ_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SCTQ')
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_CP_DIFF;
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --累计同期差异
    INSERT /*+ APPEND */
    INTO FACT_CB_DIFF_CALC
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ACTUAL_QUANTITY,
       ACTUAL_COST_QUANTITY,
       ACTUAL_COST_AMOUNT,
       SCENARIO_QUANTITY,
       SCENARIO_COST_QUANTITY,
       SCENARIO_COST_AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.PRODUCT,
             T.MATERIAL,
             T.PACKAGE,
             SUM(T.ACTUAL_QUANTITY) ACTUAL_QUANTITY,
             SUM(T.ACTUAL_COST_QUANTITY) ACTUAL_COST_QUANTITY,
             SUM(T.ACTUAL_COST_AMOUNT) ACTUAL_COST_AMOUNT,
             SUM(T.SCENARIO_QUANTITY) SCENARIO_QUANTITY,
             SUM(T.SCENARIO_COST_QUANTITY) SCENARIO_COST_QUANTITY,
             SUM(T.SCENARIO_COST_AMOUNT) SCENARIO_COST_AMOUNT
        FROM (select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     ds.SCENARIO_CODE SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     fdc.QUANTITY ACTUAL_QUANTITY,
                     FDC.COST_QUANTITY ACTUAL_COST_QUANTITY,
                     FDC.COST_AMOUNT ACTUAL_COST_AMOUNT,
                     0 SCENARIO_QUANTITY,
                     0 SCENARIO_COST_QUANTITY,
                     0 SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_CPYTD_V fdc,
                     dim_cb_period_v      dc,
                     dim_cb_scenario_v    ds
               where 1 = 1
                 and ds.SCENARIO_CODE in ('SCTQ_YTD')
                 and fdc.SCENARIO = 'SC03_YTD'
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR
              UNION ALL
              select fdc.PERIOD_ID,
                     fdc.ENTITY,
                     fdc.SCENARIO,
                     'T' DEPARTMENT,
                     fdc.PRODUCT,
                     fdc.MATERIAL,
                     fdc.PACKAGE,
                     0 ACTUAL_QUANTITY,
                     0 ACTUAL_COST_QUANTITY,
                     0 ACTUAL_COST_AMOUNT,
                     FDC.QUANTITY SCENARIO_QUANTITY,
                     FDC.COST_QUANTITY SCENARIO_COST_QUANTITY,
                     FDC.COST_AMOUNT SCENARIO_COST_AMOUNT
                from FACT_CB_DATA_CPTQYTD_V fdc, dim_cb_period_v dc
               where 1 = 1
                 and fdc.SCENARIO in ('SCTQ_YTD')
                 and fdc.MATERIAL NOT IN
                     ('M01', 'M0101', 'M010101', 'M010102', 'M010103',
                      'M010104', 'M01010418')
                 and fdc.PERIOD_ID = dc.PERIOD_ID
                 and dc.MONTH_CODE = P_MONTH
                 and dc.YEAR_CODE = P_YEAR) T
       WHERE 1 = 1
       GROUP BY T.PERIOD_ID,
                T.ENTITY,
                T.SCENARIO,
                T.DEPARTMENT,
                T.PRODUCT,
                T.MATERIAL,
                T.PACKAGE;
    COMMIT;
    --插入数据
    INSERT_CP_DIFF;
    --计算 M01010418(包装辅料)  的数据
    INSERT INTO FACT_CB_DIFF_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FC.PERIOD_ID,
             FC.ENTITY,
             FC.SCENARIO,
             FC.PRODUCT,
             M.LEVEL3_CODE MATERIAL,
             FC.PACKAGE,
             SUM(FC.ALL_DIFF) ALL_DIFF,
             SUM(FC.CONSUME_DIFF) CONSUME_DIFF,
             SUM(FC.PRICE_DIFF) PRICE_DIFF,
             SUM(FC.QUANTITY_DIFF) QUANTITY_DIFF,
             SUM(FC.OTHER_DIFF) OTHER_DIFF,
             SUM(FC.NOFACTOR_DIFF) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CP             FC,
             DIM_CB_CP_MATERIAL_LEVEL4_V M,
             dim_cb_period_v             dc
       WHERE 1 = 1
         AND M.LEVEL4_CODE = FC.MATERIAL
         AND M.LEVEL3_CODE = 'M01010418'
         AND M.LEVEL0_CODE = 'M01'
         and fc.PERIOD_ID = dc.period_id
         and dc.MONTH_CODE = P_MONTH
         and dc.YEAR_CODE = P_YEAR
       GROUP BY FC.PERIOD_ID,
                FC.ENTITY,
                FC.SCENARIO,
                FC.PRODUCT,
                M.LEVEL3_CODE,
                FC.PACKAGE;
    commit;
    --汇总3层项目到2层项目       
    INSERT INTO FACT_CB_DIFF_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FC.PERIOD_ID,
             FC.ENTITY,
             FC.SCENARIO,
             FC.PRODUCT,
             M.LEVEL2_CODE MATERIAL,
             FC.PACKAGE,
             SUM(FC.ALL_DIFF) ALL_DIFF,
             SUM(FC.CONSUME_DIFF) CONSUME_DIFF,
             SUM(FC.PRICE_DIFF) PRICE_DIFF,
             SUM(FC.QUANTITY_DIFF) QUANTITY_DIFF,
             SUM(FC.OTHER_DIFF) OTHER_DIFF,
             SUM(FC.NOFACTOR_DIFF) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CP             FC,
             DIM_CB_CP_MATERIAL_LEVEL3_V M,
             dim_cb_period_v             dc
       WHERE 1 = 1
         AND M.LEVEL3_CODE = FC.MATERIAL
         AND M.LEVEL2_CODE <> M.LEVEL3_CODE
         AND M.LEVEL0_CODE = 'M01'
         and fc.PERIOD_ID = dc.period_id
         and dc.MONTH_CODE = P_MONTH
         and dc.YEAR_CODE = P_YEAR
       GROUP BY FC.PERIOD_ID,
                FC.ENTITY,
                FC.SCENARIO,
                FC.PRODUCT,
                M.LEVEL2_CODE,
                FC.PACKAGE;
    commit;
    --汇总2层项目到1层项目       
    INSERT INTO FACT_CB_DIFF_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FC.PERIOD_ID,
             FC.ENTITY,
             FC.SCENARIO,
             FC.PRODUCT,
             M.LEVEL1_CODE MATERIAL,
             FC.PACKAGE,
             SUM(FC.ALL_DIFF) ALL_DIFF,
             SUM(FC.CONSUME_DIFF) CONSUME_DIFF,
             SUM(FC.PRICE_DIFF) PRICE_DIFF,
             SUM(FC.QUANTITY_DIFF) QUANTITY_DIFF,
             SUM(FC.OTHER_DIFF) OTHER_DIFF,
             SUM(FC.NOFACTOR_DIFF) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CP             FC,
             DIM_CB_CP_MATERIAL_LEVEL2_V M,
             dim_cb_period_v             dc
       WHERE 1 = 1
         AND M.LEVEL2_CODE = FC.MATERIAL
         AND M.LEVEL1_CODE <> M.LEVEL2_CODE
         AND M.LEVEL0_CODE = 'M01'
         and fc.PERIOD_ID = dc.period_id
         and dc.MONTH_CODE = P_MONTH
         and dc.YEAR_CODE = P_YEAR
       GROUP BY FC.PERIOD_ID,
                FC.ENTITY,
                FC.SCENARIO,
                FC.PRODUCT,
                M.LEVEL1_CODE,
                FC.PACKAGE;
    commit;
  
    --汇总2层项目到1层项目       
    INSERT INTO FACT_CB_DIFF_CP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       PRODUCT,
       MATERIAL,
       PACKAGE,
       ALL_DIFF,
       CONSUME_DIFF,
       PRICE_DIFF,
       QUANTITY_DIFF,
       OTHER_DIFF,
       NOFACTOR_DIFF)
      SELECT FC.PERIOD_ID,
             FC.ENTITY,
             FC.SCENARIO,
             FC.PRODUCT,
             M.LEVEL0_CODE MATERIAL,
             FC.PACKAGE,
             SUM(FC.ALL_DIFF) ALL_DIFF,
             SUM(FC.CONSUME_DIFF) CONSUME_DIFF,
             SUM(FC.PRICE_DIFF) PRICE_DIFF,
             SUM(FC.QUANTITY_DIFF) QUANTITY_DIFF,
             SUM(FC.OTHER_DIFF) OTHER_DIFF,
             SUM(FC.NOFACTOR_DIFF) NOFACTOR_DIFF
        FROM FACT_CB_DIFF_CP             FC,
             DIM_CB_CP_MATERIAL_LEVEL1_V M,
             dim_cb_period_v             dc
       WHERE 1 = 1
         AND M.LEVEL1_CODE = FC.MATERIAL
         AND M.LEVEL0_CODE <> M.LEVEL1_CODE
         AND M.LEVEL0_CODE = 'M01'
         and fc.PERIOD_ID = dc.period_id
         and dc.MONTH_CODE = P_MONTH
         and dc.YEAR_CODE = P_YEAR
       GROUP BY FC.PERIOD_ID,
                FC.ENTITY,
                FC.SCENARIO,
                FC.PRODUCT,
                M.LEVEL0_CODE,
                FC.PACKAGE;
    commit;
  
    --
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_CP_DIFF;
  --处理产能等判断指标的数据数据
  PROCEDURE COST_INDEX_A(P_YEAR VARCHAR2) IS
  BEGIN
    --
    --删除数据
    DELETE FROM FACT_CB_CAPACITY_YEAR FC
     WHERE 1 = 1
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_Y_V DC
             WHERE 1 = 1
               AND DC.YEAR_ID = FC.YEAR_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    DELETE FROM FACT_CB_CAPATICY_MONTH FC
     WHERE 1 = 1
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --写入年度指标信息
    INSERT INTO FACT_CB_CAPACITY_YEAR
      (YEAR_ID, ENTITY, INVEST_CAPACITY, ACTUAL_CAPACITY, BUDGET_QUANTITY)
      SELECT DC.YEAR_ID,
             HT.ENTITY,
             SUM(DECODE(HT.ACCOUNT, 'A0506020000000000', HT.DATA, 0)) INVEST_CAPACITY, --投资部产能
             SUM(DECODE(HT.ACCOUNT, 'A0506030000000000', HT.DATA, 0)) ACTUAL_CAPACITY, --实际产能
             SUM(DECODE(HT.ACCOUNT, 'A0506010000000000', HT.DATA, 0)) BUDGET_QUANTITY --预算年产量
        FROM /*HP.HP_DATA_TBCBYS_COST HT*/
         dwstg.HP_DATA_TBCBYS_COST  HT -- by dengj@besthelp 20130822 数据中心拆分
        , DIM_CB_PERIOD_V DC
       WHERE 1 = 1
         AND HT.MATERIAL = 'M00'
         AND HT.PRODUCT = 'P00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.INPUT = 'I00'
         AND HT.PACKAGE = 'PK00'
         AND HT.VERSION = 'V05'
         AND HT.STAGE = 'ST0102'
         AND HT.SCENARIO = 'SC03'
         AND HT.SPARE = 'SP00'
            --A0506020000000000 :投资部产能,A0506030000000000  :  实际产能,A0506010000000000 :预算年产量
         AND HT.ACCOUNT IN
             ('A0506010000000000', 'A0506020000000000', 'A0506030000000000')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.SCENARIO = 'SC03'
         AND HT.YEARS = P_YEAR
       GROUP BY DC.YEAR_ID, HT.ENTITY;
    COMMIT;
    --写入月度指标信息
    INSERT INTO FACT_CB_CAPATICY_MONTH
      (PERIOD_ID, ENTITY, ACTUAL_CAPACITY)
      SELECT DC.PERIOD_ID, HT.ENTITY, SUM(HT.DATA) ACTUAL_CAPACITY --实际产能
        FROM /*HP.HP_DATA_TBCBYS_COST HT, */
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
        DIM_CB_PERIOD_V DC
       WHERE 1 = 1
         AND HT.MATERIAL = 'M00'
         AND HT.PRODUCT = 'P00'
         AND HT.DEPARTMENT = 'D00'
         AND HT.INPUT = 'I00'
         AND HT.PACKAGE = 'PK00'
         AND HT.VERSION = 'V05'
         AND HT.STAGE = 'ST0102'
         AND HT.SCENARIO = 'SC03'
         AND HT.SPARE = 'SP00'
            --,A0506030000000000  :  实际产能
         AND HT.ACCOUNT = 'A0506030000000000'
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.SCENARIO = 'SC03'
         AND HT.YEARS = P_YEAR
       GROUP BY DC.PERIOD_ID, HT.ENTITY;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_INDEX_A;
  --处理COST实际数据
  PROCEDURE COST_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
  
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --动力数据
    COST_DL_A(P_YEAR, P_MONTH);
    --动力差异
    COST_DL_DIFF(P_YEAR, P_MONTH);
    --麦芽数据
    COST_MY_A(P_YEAR, P_MONTH);
    --麦芽差异
    COST_MY_DIFF(P_YEAR, P_MONTH);
    --产品数据
    COST_CP_A(P_YEAR, P_MONTH);
    --产品差异
    COST_CP_DIFF(P_YEAR, P_MONTH);
    --处理判断指标数据
    COST_INDEX_A(P_YEAR);
    
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_A;
  --处理COST预算数据
  PROCEDURE COST_B(P_YEAR VARCHAR2) IS
  BEGIN
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
    --动力数据
    COST_DL_B(P_YEAR);
    --麦芽数据
    COST_MY_B(P_YEAR);
    --产品数据
    COST_CP_B(P_YEAR);
    --清除临时表数据
    execute immediate 'truncate table FACT_CB_DATA_QUANTITY';
    execute immediate 'truncate table FACT_CB_DATA_AMOUNT';
    execute immediate 'truncate table FACT_CB_DIFF_CALC';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END COST_B;

  --处理包装费用数据-实际
  PROCEDURE EXPENSE_BZ_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_AMOUNT_BZ FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC03')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.MONTH_CODE = P_MONTH
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --清除零时表数据
    execute immediate 'truncate table FACT_CB_AMOUNT_BZ_TEMP';
    --写入数据
    INSERT INTO FACT_CB_AMOUNT_BZ_TEMP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       ACCOUNT,
       QUANTITY,
       AMOUNT,
       ATTRIBUTE1)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             DA.ACCOUNT,
             0 QUANTITY,
             HT.DATA AMOUNT,
             'M' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_EXPENSE   HT,*/
        dwstg.HP_DATA_TBCBYS_EXPENSE HT,
        -- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V             DC,
             DIM_CB_BZ_ACCOUNT_NOLEVEL_V DA
       WHERE 1 = 1
         AND HT.ACCOUNT = DA.ACCOUNT
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
            --AND HT.DEPARTMENT = 'D00'
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR;
    COMMIT;
    --产量
    INSERT INTO FACT_CB_AMOUNT_BZ_TEMP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       ACCOUNT,
       QUANTITY,
       AMOUNT,
       ATTRIBUTE1)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT <> 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
      UNION ALL
      --部门缺省 产量
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D00' DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
      UNION ALL
      --部门汇总产量
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D0' DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR
      UNION ALL
      --动力汇总产量
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D01' DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V05'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC03')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.PERIODS = P_MONTH
         AND HT.YEARS = P_YEAR;
    COMMIT;
  
    INSERT INTO FACT_CB_AMOUNT_BZ
      (PERIOD_ID, ENTITY, SCENARIO, DEPARTMENT, ACCOUNT, QUANTITY, AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.ACCOUNT,
             SUM(T.QUANTITY) QUANTITY,
             SUM(T.AMOUNT) AMOUNT
        FROM (SELECT FC1.PERIOD_ID,
                     FC1.ENTITY,
                     FC1.SCENARIO,
                     FC1.DEPARTMENT,
                     FC1.ACCOUNT,
                     0 QUANTITY,
                     FC1.AMOUNT
                FROM FACT_CB_AMOUNT_BZ_TEMP FC1
               WHERE 1 = 1
                 AND FC1.ATTRIBUTE1 = 'M'
              UNION ALL
              SELECT FC1.PERIOD_ID,
                     FC1.ENTITY,
                     FC1.SCENARIO,
                     FC1.DEPARTMENT,
                     FC1.ACCOUNT,
                     FC2.QUANTITY,
                     0 AMOUNT
                FROM FACT_CB_AMOUNT_BZ_TEMP FC1, FACT_CB_AMOUNT_BZ_TEMP FC2
               WHERE 1 = 1
                 AND FC1.PERIOD_ID = FC2.PERIOD_ID
                 AND FC1.ENTITY = FC2.ENTITY
                 AND FC1.SCENARIO = FC2.SCENARIO
                 AND FC1.DEPARTMENT = FC2.DEPARTMENT
                 AND FC1.ATTRIBUTE1 = 'M'
                 AND FC2.ATTRIBUTE1 = 'Q') T
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT, T.ACCOUNT;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END EXPENSE_BZ_A;
  --处理包装费用数据-预算
  PROCEDURE EXPENSE_BZ_B(P_YEAR VARCHAR2) IS
  BEGIN
    --删除数据
    DELETE FROM FACT_CB_AMOUNT_BZ FC
     WHERE 1 = 1
       AND FC.SCENARIO IN ('SC01', 'SC02')
       AND EXISTS (SELECT 1
              FROM DIM_CB_PERIOD_V DC
             WHERE 1 = 1
               AND FC.PERIOD_ID = DC.PERIOD_ID
               AND DC.YEAR_CODE = P_YEAR);
    COMMIT;
    --清除零时表数据
    execute immediate 'truncate table FACT_CB_AMOUNT_BZ_TEMP';
    --写入数据
    INSERT INTO FACT_CB_AMOUNT_BZ_TEMP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       ACCOUNT,
       QUANTITY,
       AMOUNT,
       ATTRIBUTE1)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             DA.ACCOUNT,
             0 QUANTITY,
             HT.DATA AMOUNT,
             'M' ATTRIBUTE1
        FROM/* HP.HP_DATA_TBCBYS_EXPENSE   HT,*/
             dwstg.HP_DATA_TBCBYS_EXPENSE HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V             DC,
             DIM_CB_BZ_ACCOUNT_NOLEVEL_V DA
       WHERE 1 = 1
         AND HT.ACCOUNT = DA.ACCOUNT
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
            --AND HT.DEPARTMENT = 'D00'
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR;
    COMMIT;
    --产量
    INSERT INTO FACT_CB_AMOUNT_BZ_TEMP
      (PERIOD_ID,
       ENTITY,
       SCENARIO,
       DEPARTMENT,
       ACCOUNT,
       QUANTITY,
       AMOUNT,
       ATTRIBUTE1)
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             HT.DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT <> 'D00'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
      UNION ALL
      --部门缺省 产量
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D00' DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
      UNION ALL
      --部门汇总产量
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D0' DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR
      UNION ALL
      --动力汇总产量
      SELECT DC.PERIOD_ID,
             HT.ENTITY,
             HT.SCENARIO,
             'D01' DEPARTMENT,
             'A' ACCOUNT,
             HT.DATA QUANTITY, --产量
             0 AMOUNT,
             'Q' ATTRIBUTE1
        FROM /*HP.HP_DATA_TBCBYS_COST HT,*/
         dwstg.HP_DATA_TBCBYS_COST  HT,-- by dengj@besthelp 20130822 数据中心拆分
             DIM_CB_PERIOD_V        DC,
             DIM_CB_CP_ITEM_V       DI,
             DIM_CB_CP_PACKAGE_V    DP
       WHERE 1 = 1
         AND HT.ACCOUNT IN ('A0501010000000000')
         AND HT.VERSION = 'V02'
         AND HT.SPARE = 'SP00'
         AND HT.INPUT = 'I00'
         AND HT.Stage = 'ST0102'
         AND HT.PACKAGE = DP.PACKAGE
         AND HT.MATERIAL = 'M00'
         AND HT.DEPARTMENT = 'D0103'
         AND HT.PRODUCT = DI.PRODUCT
         AND HT.SCENARIO IN ('SC01', 'SC02')
         AND DC.MONTH_CODE = HT.PERIODS
         AND DC.YEAR_CODE = HT.YEARS
         AND HT.YEARS = P_YEAR;
    COMMIT;
  
    INSERT INTO FACT_CB_AMOUNT_BZ
      (PERIOD_ID, ENTITY, SCENARIO, DEPARTMENT, ACCOUNT, QUANTITY, AMOUNT)
      SELECT T.PERIOD_ID,
             T.ENTITY,
             T.SCENARIO,
             T.DEPARTMENT,
             T.ACCOUNT,
             SUM(T.QUANTITY) QUANTITY,
             SUM(T.AMOUNT) AMOUNT
        FROM (SELECT FC1.PERIOD_ID,
                     FC1.ENTITY,
                     FC1.SCENARIO,
                     FC1.DEPARTMENT,
                     FC1.ACCOUNT,
                     0 QUANTITY,
                     FC1.AMOUNT
                FROM FACT_CB_AMOUNT_BZ_TEMP FC1
               WHERE 1 = 1
                 AND FC1.ATTRIBUTE1 = 'M'
              UNION ALL
              SELECT FC1.PERIOD_ID,
                     FC1.ENTITY,
                     FC1.SCENARIO,
                     FC1.DEPARTMENT,
                     FC1.ACCOUNT,
                     FC2.QUANTITY,
                     0 AMOUNT
                FROM FACT_CB_AMOUNT_BZ_TEMP FC1, FACT_CB_AMOUNT_BZ_TEMP FC2
               WHERE 1 = 1
                 AND FC1.PERIOD_ID = FC2.PERIOD_ID
                 AND FC1.ENTITY = FC2.ENTITY
                 AND FC1.SCENARIO = FC2.SCENARIO
                 AND FC1.DEPARTMENT = FC2.DEPARTMENT
                 AND FC1.ATTRIBUTE1 = 'M'
                 AND FC2.ATTRIBUTE1 = 'Q') T
       GROUP BY T.PERIOD_ID, T.ENTITY, T.SCENARIO, T.DEPARTMENT, T.ACCOUNT;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END EXPENSE_BZ_B;
  --处理EXPENSE实际数据
  PROCEDURE EXPENSE_A(P_YEAR VARCHAR2, P_MONTH VARCHAR2) IS
  BEGIN
    --清除零时表数据
    execute immediate 'truncate table FACT_CB_AMOUNT_BZ_TEMP';
    EXPENSE_BZ_A(P_YEAR, P_MONTH);
    --清除零时表数据
    execute immediate 'truncate table FACT_CB_AMOUNT_BZ_TEMP';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END EXPENSE_A;
  --处理EXPENSE预算数据
  PROCEDURE EXPENSE_B(P_YEAR VARCHAR2) IS
  BEGIN
    --清除零时表数据
    execute immediate 'truncate table FACT_CB_AMOUNT_BZ_TEMP';
    EXPENSE_BZ_B(P_YEAR);
    --清除零时表数据
    execute immediate 'truncate table FACT_CB_AMOUNT_BZ_TEMP';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END EXPENSE_B;
end DW_HP_TBCBYS_PKG;
/

prompt
prompt Creating package body DW_HP_TBCWYS_PKG
prompt ======================================
prompt
create or replace package body tbdw.DW_HP_TBCWYS_PKG is

 PROCEDURE DPYL_A (p_year VARCHAR2,p_period VARCHAR2)IS  
 BEGIN  
   --按年份+月份清理实际数据
    BEGIN
      DELETE FROM  FACT_PP_PRODUCT_PROFIT t 
        WHERE 1=1 
        AND t.scenario_code='SC03'
        AND EXISTS (SELECT 1
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND t.PERIOD_ID = DHP.PERIOD_ID
               AND DHP.MONTH_CODE = p_period
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;  
    --转换数据  : 生成对应科目下的数据   
   INSERT INTO FACT_PP_PRODUCT_PROFIT   
    ( PERIOD_ID            ,
      ENTITY_CODE         ,
      SCENARIO_CODE       ,
      DEPARTMENT_CODE     ,
      SOURCE_CODE         ,
      BUYER_CODE          ,
      LOGISTIC_CODE       ,
      JOINT_CODE          ,
      PRODUCT_CODE        ,
      SALES               ,
      INCOME              ,
      TAX_COST            ,
      FLOAT_COST          ,
      SALES_COST          ,
      DISCOUNT_COST       ,
      LOGISTIC_COST       ,
      MARGIN_CONTRIBUTION ,
      FIX_COST            ,
      BRAND_COST          ,
      PROJECT_COST        ,
      CONTROL_COST        ,
      SALES_PROFIT        ,
      REDUCTION_SUM       ,
      OTHER_PROFIT        ,
      MANAGE_PROFIT       ,
      OTHER_OPERATE_PROFIT,
      PRIOR_TAX_PROFIT    ,
      FINANCE_COST        ,
      PRIOR_PROFIT        ,
      TAX                 ,
      PROFIT )   
    SELECT  REPLACE(years,'FY','20')||(CASE WHEN PERIODS = 'Jan' THEN '01'
                                            WHEN PERIODS = 'Feb' THEN '02'
                                            WHEN PERIODS = 'Mar' THEN '03'
                                            WHEN PERIODS = 'Apr' THEN '04'
                                            WHEN PERIODS = 'May' THEN '05'
                                            WHEN PERIODS = 'Jun' THEN '06'
                                            WHEN PERIODS = 'Jul' THEN '07'
                                            WHEN PERIODS = 'Aug' THEN '08'
                                            WHEN PERIODS = 'Sep' THEN '09'
                                            WHEN PERIODS = 'Oct' THEN '10'  
                                            WHEN PERIODS = 'Nov' THEN '11'
                                            WHEN PERIODS = 'Dec' THEN '12'  END) PERIOD_ID,
            ENTITY    ,
            SCENARIO  ,          
            DEPARTMENT , 
            SOURCE    , 
            BUYER     , 
            LOGISTIC  ,
            JOINT    ,
            PRODUCT   ,
            sum(nvl(SALES,0)) SALES,
            sum(nvl(INCOME,0)) INCOME,
            sum(nvl(TAX_COST,0)) TAX_COST,
            sum(nvl(FLOAT_COST,0)) FLOAT_COST,
            sum(nvl(FLOAT_COST,0)+nvl(FIX_COST,0))SALES_COST,
            sum(nvl(DISCOUNT_COST,0)) DISCOUNT_COST,
            sum(nvl(LOGISTIC_COST,0)) LOGISTIC_COST,
            sum(nvl(MARGIN_CONTRIBUTION,0)) MARGIN_CONTRIBUTION,
            sum(nvl(FIX_COST,0)) FIX_COST,
            sum(nvl(BRAND_COST,0)) BRAND_COST,
            sum(nvl(PROJECT_COST,0)) PROJECT_COST,
            sum(nvl(CONTROL_COST,0)) CONTROL_COST,
            sum(nvl(SALES_PROFIT,0)) SALES_PROFIT,
            sum(nvl(REDUCTION_SUM,0)) REDUCTION_SUM,
            sum(nvl(OTHER_PROFIT,0)) OTHER_PROFIT,
            sum(nvl(MANAGE_PROFIT,0)) MANAGE_PROFIT,
            sum(nvl(OTHER_OPERATE_PROFIT,0)) OTHER_OPERATE_PROFIT,
            sum(nvl(PRIOR_TAX_PROFIT,0)) PRIOR_TAX_PROFIT,
            sum(nvl(FINANCE_COST,0)) FINANCE_COST,
            sum(nvl(PRIOR_PROFIT,0)) PRIOR_PROFIT,
            sum(nvl(TAX,0)) TAX,
            sum(nvl(PROFIT,0))  PROFIT                   
    FROM (SELECT D1.ENTITY,
                 D1.YEARS,
                 D1.PERIODS,
                 D1.SCENARIO,
                 D1.DEPARTMENT,
                 D1.SOURCE,
                 D1.BUYER,
                 D1.LOGISTIC,
                 D1.JOINT,
                 D1.PRODUCT,
                 (CASE WHEN ACCOUNT = 'A6010000000000000' THEN D1.DATA ELSE 0 END )  SALES,--销量
                 (CASE WHEN ACCOUNT = 'A6030000000000000' THEN D1.DATA ELSE 0 END )  INCOME,--主营业务收入
                 (CASE WHEN ACCOUNT = 'A6050000000000002' THEN D1.DATA ELSE 0 END )  TAX_COST,--税金及附加
                 (CASE WHEN ACCOUNT = 'A6070000000000002' THEN D1.DATA ELSE 0 END )  FLOAT_COST,--变动主营业务成本
                 (CASE WHEN ACCOUNT = 'A6090000000000000' THEN D1.DATA ELSE 0 END )  DISCOUNT_COST,--促销费用
                 (CASE WHEN ACCOUNT = 'A6110000000000000' THEN D1.DATA ELSE 0 END )  LOGISTIC_COST,--物流费用
                 (CASE WHEN ACCOUNT = 'A6130000000000000' THEN D1.DATA ELSE 0 END )  MARGIN_CONTRIBUTION,--边际贡献
                 (CASE WHEN ACCOUNT = 'A6150000000000000' THEN D1.DATA ELSE 0 END )  FIX_COST,--固定主营业务成本
                 (CASE WHEN ACCOUNT = 'A6170000000000000' THEN D1.DATA ELSE 0 END )  BRAND_COST,--品牌费用
                 (CASE WHEN ACCOUNT = 'A6190000000000000' THEN D1.DATA ELSE 0 END )  PROJECT_COST,--运行费用
                 (CASE WHEN ACCOUNT = 'A6210000000000000' THEN D1.DATA ELSE 0 END )  CONTROL_COST,--管理费用
                 (CASE WHEN ACCOUNT = 'A6210000000000001' THEN D1.DATA ELSE 0 END )  SALES_PROFIT,--销售利润
                 (CASE WHEN ACCOUNT = 'A6230000000000000' THEN D1.DATA ELSE 0 END )  REDUCTION_SUM,--资产减值损失
                 (CASE WHEN ACCOUNT = 'A6250000000000000' THEN D1.DATA ELSE 0 END )  OTHER_PROFIT,--其他业务利润
                 (CASE WHEN ACCOUNT = 'A6270000000000000' THEN D1.DATA ELSE 0 END )  MANAGE_PROFIT,--经营利润
                 (CASE WHEN ACCOUNT = 'A6290000000000000' THEN D1.DATA ELSE 0 END )  OTHER_OPERATE_PROFIT,--非经营性收支
                 (CASE WHEN ACCOUNT = 'A6310000000000000' THEN D1.DATA ELSE 0 END )  PRIOR_TAX_PROFIT,--息税前利润
                 (CASE WHEN ACCOUNT = 'A6330000000000000' THEN D1.DATA ELSE 0 END )  FINANCE_COST,--财务费用
                 (CASE WHEN ACCOUNT = 'A6350000000000000' THEN D1.DATA ELSE 0 END )  PRIOR_PROFIT,--税前利润
                 (CASE WHEN ACCOUNT = 'A6370000000000000' THEN D1.DATA ELSE 0 END )  TAX,         --所得税费用
                 (CASE WHEN ACCOUNT = 'A6390000000000000' THEN D1.DATA ELSE 0 END )  PROFIT       --净利润
            FROM /*dwstg.HP_DATA_TBCWYS_PROD D1*/
            dwstg.HP_DATA_TBCWYS_PROD D1 -- by dengj@besthelp 20130822 数据中心拆分
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.SCENARIO = 'SC03'
             AND D1.PERIODS = P_PERIOD
             AND D1.DATA <> 0)v
        where 1=1 
        group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , SOURCE , BUYER , LOGISTIC , JOINT , PRODUCT ;                   
    --      
   COMMIT;     
 END DPYL_A;
 
 --计算预算数
 PROCEDURE DPYL_B (p_year VARCHAR2)IS   
 BEGIN  
   --按年份清理预算数据
   BEGIN      
      DELETE FROM  FACT_PP_PRODUCT_PROFIT t 
        WHERE 1=1 
        AND t.scenario_code IN ('SC01','SC02')
        AND substr(t.period_id,1,4) =  (SELECT DISTINCT DHP.YEAR_NAME
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;    
    END;   
    --转换数据  : 生成对应科目下的数据   
    INSERT INTO FACT_PP_PRODUCT_PROFIT   
    ( PERIOD_ID            ,
      ENTITY_CODE         ,
      SCENARIO_CODE       ,
      DEPARTMENT_CODE     ,
      SOURCE_CODE         ,
      BUYER_CODE          ,
      LOGISTIC_CODE       ,
      JOINT_CODE          ,
      PRODUCT_CODE        ,
      SALES               ,
      INCOME              ,
      TAX_COST            ,
      FLOAT_COST          ,
      SALES_COST          ,
      DISCOUNT_COST       ,
      LOGISTIC_COST       ,
      MARGIN_CONTRIBUTION ,
      FIX_COST            ,
      BRAND_COST          ,
      PROJECT_COST        ,
      CONTROL_COST        ,
      SALES_PROFIT        ,
      REDUCTION_SUM       ,
      OTHER_PROFIT        ,
      MANAGE_PROFIT       ,
      OTHER_OPERATE_PROFIT,
      PRIOR_TAX_PROFIT    ,
      FINANCE_COST        ,
      PRIOR_PROFIT        ,
      TAX                 ,
      PROFIT )   
    SELECT  REPLACE(years,'FY','20')||(CASE WHEN PERIODS = 'Jan' THEN '01'
                                            WHEN PERIODS = 'Feb' THEN '02'
                                            WHEN PERIODS = 'Mar' THEN '03'
                                            WHEN PERIODS = 'Apr' THEN '04'
                                            WHEN PERIODS = 'May' THEN '05'
                                            WHEN PERIODS = 'Jun' THEN '06'
                                            WHEN PERIODS = 'Jul' THEN '07'
                                            WHEN PERIODS = 'Aug' THEN '08'
                                            WHEN PERIODS = 'Sep' THEN '09'
                                            WHEN PERIODS = 'Oct' THEN '10'  
                                            WHEN PERIODS = 'Nov' THEN '11'
                                            WHEN PERIODS = 'Dec' THEN '12'  END) PERIOD_ID,
            ENTITY    ,
            SCENARIO  ,          
            DEPARTMENT , 
            SOURCE    , 
            BUYER     , 
            LOGISTIC  ,
            JOINT    ,
            PRODUCT   ,
            sum(nvl(SALES,0)) SALES,
            sum(nvl(INCOME,0)) INCOME,
            sum(nvl(TAX_COST,0)) TAX_COST,
            sum(nvl(FLOAT_COST,0)) FLOAT_COST,
            sum(nvl(FLOAT_COST,0)+nvl(FIX_COST,0))SALES_COST,
            sum(nvl(DISCOUNT_COST,0)) DISCOUNT_COST,
            sum(nvl(LOGISTIC_COST,0)) LOGISTIC_COST,
            sum(nvl(MARGIN_CONTRIBUTION,0)) MARGIN_CONTRIBUTION,
            sum(nvl(FIX_COST,0)) FIX_COST,
            sum(nvl(BRAND_COST,0)) BRAND_COST,
            sum(nvl(PROJECT_COST,0)) PROJECT_COST,
            sum(nvl(CONTROL_COST,0)) CONTROL_COST,
            sum(nvl(SALES_PROFIT,0)) SALES_PROFIT,
            sum(nvl(REDUCTION_SUM,0)) REDUCTION_SUM,
            sum(nvl(OTHER_PROFIT,0)) OTHER_PROFIT,
            sum(nvl(MANAGE_PROFIT,0)) MANAGE_PROFIT,
            sum(nvl(OTHER_OPERATE_PROFIT,0)) OTHER_OPERATE_PROFIT,
            sum(nvl(PRIOR_TAX_PROFIT,0)) PRIOR_TAX_PROFIT,
            sum(nvl(FINANCE_COST,0)) FINANCE_COST,
            sum(nvl(PRIOR_PROFIT,0)) PRIOR_PROFIT,
            sum(nvl(TAX,0)) TAX,
            sum(nvl(PROFIT,0))  PROFIT    
   FROM (SELECT D1.ENTITY,
                 D1.YEARS,
                 D1.PERIODS,
                 D1.SCENARIO,
                 D1.DEPARTMENT,
                 D1.SOURCE,
                 D1.BUYER,
                 D1.LOGISTIC,
                 D1.JOINT,
                 D1.PRODUCT,
                 (CASE WHEN ACCOUNT = 'A6010000000000000' THEN D1.DATA ELSE 0 END )  SALES,--销量
                 (CASE WHEN ACCOUNT = 'A6030000000000000' THEN D1.DATA ELSE 0 END )  INCOME,--主营业务收入
                 (CASE WHEN ACCOUNT = 'A6050000000000002' THEN D1.DATA ELSE 0 END )  TAX_COST,--税金及附加
                 (CASE WHEN ACCOUNT = 'A6070000000000002' THEN D1.DATA ELSE 0 END )  FLOAT_COST,--变动主营业务成本
                 (CASE WHEN ACCOUNT = 'A6090000000000000' THEN D1.DATA ELSE 0 END )  DISCOUNT_COST,--促销费用
                 (CASE WHEN ACCOUNT = 'A6110000000000000' THEN D1.DATA ELSE 0 END )  LOGISTIC_COST,--物流费用
                 (CASE WHEN ACCOUNT = 'A6130000000000000' THEN D1.DATA ELSE 0 END )  MARGIN_CONTRIBUTION,--边际贡献
                 (CASE WHEN ACCOUNT = 'A6150000000000000' THEN D1.DATA ELSE 0 END )  FIX_COST,--固定主营业务成本
                 (CASE WHEN ACCOUNT = 'A6170000000000000' THEN D1.DATA ELSE 0 END )  BRAND_COST,--品牌费用
                 (CASE WHEN ACCOUNT = 'A6190000000000000' THEN D1.DATA ELSE 0 END )  PROJECT_COST,--运行费用
                 (CASE WHEN ACCOUNT = 'A6210000000000000' THEN D1.DATA ELSE 0 END )  CONTROL_COST,--管理费用
                 (CASE WHEN ACCOUNT = 'A6210000000000001' THEN D1.DATA ELSE 0 END )  SALES_PROFIT,--销售利润
                 (CASE WHEN ACCOUNT = 'A6230000000000000' THEN D1.DATA ELSE 0 END )  REDUCTION_SUM,--资产减值损失
                 (CASE WHEN ACCOUNT = 'A6250000000000000' THEN D1.DATA ELSE 0 END )  OTHER_PROFIT,--其他业务利润
                 (CASE WHEN ACCOUNT = 'A6270000000000000' THEN D1.DATA ELSE 0 END )  MANAGE_PROFIT,--经营利润
                 (CASE WHEN ACCOUNT = 'A6290000000000000' THEN D1.DATA ELSE 0 END )  OTHER_OPERATE_PROFIT,--非经营性收支
                 (CASE WHEN ACCOUNT = 'A6310000000000000' THEN D1.DATA ELSE 0 END )  PRIOR_TAX_PROFIT,--息税前利润
                 (CASE WHEN ACCOUNT = 'A6330000000000000' THEN D1.DATA ELSE 0 END )  FINANCE_COST,--财务费用
                 (CASE WHEN ACCOUNT = 'A6350000000000000' THEN D1.DATA ELSE 0 END )  PRIOR_PROFIT,--税前利润
                 (CASE WHEN ACCOUNT = 'A6370000000000000' THEN D1.DATA ELSE 0 END )  TAX,         --所得税费用
                 (CASE WHEN ACCOUNT = 'A6390000000000000' THEN D1.DATA ELSE 0 END )  PROFIT       --净利润
            FROM/* dwstg.HP_DATA_TBCWYS_PROD D1*/
            dwstg.HP_DATA_TBCWYS_PROD D1 -- by dengj@besthelp 20130822 数据中心拆分
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.SCENARIO IN ('SC01', 'SC02')
             AND D1.DATA <> 0)v
        where 1=1 
        group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , SOURCE , BUYER , LOGISTIC , JOINT , PRODUCT ;   
       
   --    
   COMMIT;     
 END DPYL_B;
 
 
 PROCEDURE FY_A (p_year VARCHAR2,p_period VARCHAR2)IS
   fy_table   FACT_FY_EXPENSE%rowtype;    
 BEGIN  
   --按年份+月份清理实际数据
    BEGIN
      DELETE FROM  FACT_FY_EXPENSE t 
        WHERE 1=1 
        AND t.scenario_code='SC03'
        AND EXISTS (SELECT 1
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND t.PERIOD_ID = DHP.PERIOD_ID
               AND DHP.MONTH_CODE = p_period
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;  
    --转换数据  : 间接费用特殊处理 
   FOR i IN (     SELECT T.ACCOUNT,             --本级科目
                         LT.ACCOUNT  L_ACCOUNT ,--上级科目
                         T.PERIODS,                         
                         T.YEARS,
                         T.BUYER,
                         T.ENTITY,
                         T.DEPARTMENT,
                         T.DATA AMOUNT,      --本级费用
                         LT.DATA L_AMOUNT ,   --上级费用                                               
                         CLHZ.DATA OUTPUT     --产量                                            
                  FROM /*dwstg.HP_DATA_TBCWYS_NONPROD T,
                       dwstg.HP_DATA_TBCWYS_NONPROD LT, 
                       dwstg.TBCWYS_NONPRODU_ACCOUNT AC,*/
                       dwstg.HP_DATA_TBCWYS_NONPROD T,
                       dwstg.HP_DATA_TBCWYS_NONPROD LT,
                       dwstg.TBCWYS_NONPRODU_ACCOUNT AC,
                       -- by dengj@besthelp 20130822 数据中心拆分
                       (--产量：啤酒
                        SELECT CL.ENTITY,                                
                               'Dp0020102' DEPARTMENT,--TBCWYS啤酒
                               SUM(CL.DATA) DATA
                        FROM /*dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         GROUP BY  CL.ENTITY
                        UNION           
                        --产量：麦芽
                        SELECT CL.ENTITY,                               
                               'Dp0020101' DEPARTMENT,--TBCWYS麦芽
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         GROUP BY CL.ENTITY                                             
                        UNION 
                        --产量：工厂合并 啤酒厂
                        SELECT CL.ENTITY,                                
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         AND CL.ENTITY NOT IN ('E0105','E0555')--不含麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY     
                        UNION 
                        --产量：工厂合并 麦芽厂
                        SELECT CL.ENTITY,
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         AND CL.ENTITY IN ('E0105','E0555')--麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY ) CLHZ
                  WHERE 1=1 AND 
                  T.ACCOUNT    LIKE 'A31%'       AND
                  T.DEPARTMENT <> 'Dp001'        AND
                  T.BUYER    = 'B0001'           AND--不分购货单位
                  T.SCENARIO  ='SC03'            AND --实际数   
                  T.PERIODS  =  p_period         AND
                  T.YEARS    =  P_YEAR           AND       
                  T.ACCOUNT   <> LT.ACCOUNT      AND
                  T.ACCOUNT   = AC.MEMBERNAME    AND
                  LT.ACCOUNT  = AC.PARENTNAME    AND
                  LT.PERIODS   = p_period        AND
                  LT.YEARS     = P_YEAR          AND  
                  T.SCENARIO   = LT.SCENARIO(+)   AND                
                  T.ENTITY     = LT.ENTITY(+)     AND
                  T.DEPARTMENT = LT.DEPARTMENT(+) AND 
                  T.DEPARTMENT = CLHZ.DEPARTMENT(+) AND
                  T.ENTITY     =  CLHZ.ENTITY(+)  
             UNION --特殊处理：间接费用
             SELECT T.ACCOUNT,             --本级科目
                         'LA'  L_ACCOUNT ,--上级科目
                         T.PERIODS,                         
                         T.YEARS,
                         T.BUYER,
                         T.ENTITY,
                         T.DEPARTMENT,
                         T.DATA AMOUNT,      --本级费用
                         0 L_AMOUNT ,   --上级费用                                               
                         CLHZ.DATA OUTPUT    --产量                                           
                  FROM /*dwstg.HP_DATA_TBCWYS_NONPROD T,*/
                  dwstg.HP_DATA_TBCWYS_NONPROD t,
                  -- by dengj@besthelp 20130822 数据中心拆分
                       (--产量：啤酒
                        SELECT CL.ENTITY,                                
                               'Dp0020102' DEPARTMENT,--TBCWYS啤酒
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         GROUP BY  CL.ENTITY
                        UNION           
                        --产量：麦芽
                        SELECT CL.ENTITY,                               
                               'Dp0020101' DEPARTMENT,--TBCWYS麦芽
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         GROUP BY CL.ENTITY                                             
                        UNION 
                        --产量：工厂合并 啤酒厂
                        SELECT CL.ENTITY,                                
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         AND CL.ENTITY NOT IN ('E0105','E0555')--不含麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY     
                        UNION 
                        --产量：工厂合并 麦芽厂
                        SELECT CL.ENTITY,
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO ='SC03'
                         AND CL.YEARS =P_YEAR
                         AND CL.PERIODS = p_period
                         AND CL.ENTITY IN ('E0105','E0555')--麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY ) CLHZ
                  WHERE 1=1 AND 
                  T.ACCOUNT   ='A3100000000000000' AND--间接费用
                  T.DEPARTMENT <> 'Dp001'        AND
                  T.BUYER    = 'B0001'           AND--不分购货单位
                  T.SCENARIO  ='SC03'            AND --实际数   
                  T.PERIODS  =  p_period         AND
                  T.YEARS    =  P_YEAR           AND       
                  T.DEPARTMENT = CLHZ.DEPARTMENT(+) AND
                  T.ENTITY     =  CLHZ.ENTITY(+)      
             UNION
             --品牌费用,运行费用 ,营业外及其它
             --12年2月13号，新加管理费用，减值准备，职工薪酬合计
             --2月24号，新增直接人工薪酬合计，制造费用合计
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,                         
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                             
              FROM /*dwstg.HP_DATA_TBCWYS_NONPROD T */
              dwstg.HP_DATA_TBCWYS_NONPROD t 
                  -- by dengj@besthelp 20130822 数据中心拆分
              WHERE 1=1 and    
                  (T.ACCOUNT   LIKE 'A1201%' or T.ACCOUNT LIKE 'A1202%' or T.ACCOUNT LIKE 'A1207%' 
                  OR T.ACCOUNT LIKE 'A1203%' OR T.ACCOUNT LIKE 'A1206%' OR T.ACCOUNT LIKE 'A201%'
                  OR T.ACCOUNT LIKE 'A120401%' OR T.ACCOUNT LIKE 'A120402%')     AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  ='SC03'           AND --实际数   
                  T.PERIODS   =  p_period       AND
                  T.YEARS     =  P_YEAR   
              UNION
             --财务费用
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,                         
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM /*dwstg.HP_DATA_TBCWYS_NONPROD T */
               dwstg.HP_DATA_TBCWYS_NONPROD t 
                  -- by dengj@besthelp 20130822 数据中心拆分
              WHERE 1=1 and    
                  T.ACCOUNT   LIKE 'A1205%'     AND
                  T.BUYER     ='B0002'AND --内外部合计
                  T.SCENARIO  ='SC03'           AND --实际数   
                  T.PERIODS   =  p_period       AND
                  T.YEARS     =  P_YEAR                                         
             ) LOOP          
      fy_table.period_id           :=REPLACE(i.years,'FY','20')||(CASE
                                                               WHEN i.PERIODS = 'Jan' THEN '01'
                                                               WHEN i.PERIODS = 'Feb' THEN '02'
                                                               WHEN i.PERIODS = 'Mar' THEN '03'
                                                               WHEN i.PERIODS = 'Apr' THEN '04'
                                                               WHEN i.PERIODS = 'May' THEN '05'
                                                               WHEN i.PERIODS = 'Jun' THEN '06'
                                                               WHEN i.PERIODS = 'Jul' THEN '07'
                                                               WHEN i.PERIODS = 'Aug' THEN '08'
                                                               WHEN i.PERIODS = 'Sep' THEN '09'
                                                               WHEN i.PERIODS = 'Oct' THEN '10'  
                                                               WHEN i.PERIODS = 'Nov' THEN '11'
                                                               WHEN i.PERIODS = 'Dec' THEN '12'             
                                                             END) ;      
      
      fy_table.account_code        :=i.account;
      fy_table.ENTITY_CODE         :=i.entity ;     
      fy_table.SCENARIO_CODE       :='SC03' ;    
      fy_table.DEPARTMENT_CODE     :=i.department;
      fy_table.BUYER_CODE          :=i.buyer ;
      fy_table.AMOUNT               :=i.AMOUNT;
      fy_table.l_amount           :=i.l_amount;
      fy_table.Output           :=i.Output;        
    insert into FACT_FY_EXPENSE values fy_table;
   end loop;       
   COMMIT;  
   
   --管理利润表导入到费用分析
    INSERT INTO FACT_FY_EXPENSE   
    ( PERIOD_ID          ,
      ACCOUNT_CODE       ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      BUYER_CODE         ,
      AMOUNT             ,
      L_AMOUNT           ,
      OUTPUT              )   
    SELECT  REPLACE(years,'FY','20')||(CASE WHEN PERIODS = 'Jan' THEN '01'
                                            WHEN PERIODS = 'Feb' THEN '02'
                                            WHEN PERIODS = 'Mar' THEN '03'
                                            WHEN PERIODS = 'Apr' THEN '04'
                                            WHEN PERIODS = 'May' THEN '05'
                                            WHEN PERIODS = 'Jun' THEN '06'
                                            WHEN PERIODS = 'Jul' THEN '07'
                                            WHEN PERIODS = 'Aug' THEN '08'
                                            WHEN PERIODS = 'Sep' THEN '09'
                                            WHEN PERIODS = 'Oct' THEN '10'  
                                            WHEN PERIODS = 'Nov' THEN '11'
                                            WHEN PERIODS = 'Dec' THEN '12'  END) PERIOD_ID,
            ACCOUNT       ,
            ENTITY       ,
            SCENARIO     ,
            DEPARTMENT    ,
            'B0001' BUYER         ,
            D1.DATA AMOUNT             ,
            0 L_AMOUNT           ,
            0 OUTPUT                  
   FROM dwstg.HP_DATA_TBCWYS_REPORT D1
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.PERIODS = p_period
             AND D1.SCENARIO IN ('SC03')
             AND D1.DATA <> 0  ;          
   --    
   COMMIT;
   
   --运输费用 导入到费用分析
   INSERT INTO FACT_FY_EXPENSE   
    ( PERIOD_ID          ,
      ACCOUNT_CODE       ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      BUYER_CODE         ,
      AMOUNT             ,
      L_AMOUNT           ,
      OUTPUT              )   
    SELECT  HP.PERIOD_ID ,
            D1.ACCOUNT       ,
            D1.ENTITY       ,
            D1.SCENARIO     ,
            'Dp001' DEPARTMENT    ,
            'B0001' BUYER         ,
            NVL(D1.DATA,0) AMOUNT             ,
            0 L_AMOUNT           ,
            0 OUTPUT                  
   FROM /*dwstg.HP_DATA_TBCWYS_PROD D1,*/
   dwstg.HP_DATA_TBCWYS_PROD D1, -- by dengj@besthelp 20130822 数据中心拆分
        DIM_HP_PERIOD HP
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.PERIODS = p_period
             AND D1.PERIODS = HP.MONTH_CODE
             AND D1.YEARS = HP.YEAR_CODE
             AND D1.DEPARTMENT='Dp00' --
             AND D1.BUYER ='B0000'
             AND D1.JOINT ='J01' --对接_默认
             AND (D1.ACCOUNT = 'A1115000000000000')
             AND D1.PRODUCT ='P002'
             AND D1.LOGISTIC ='L002'
             AND D1.SOURCE ='S0000'
             AND D1.SCENARIO IN ('SC03')
             AND D1.DATA <> 0 
     ;          
   --    
   COMMIT;
   
    --其他物流费用 导入到费用分析
   INSERT INTO FACT_FY_EXPENSE   
    ( PERIOD_ID          ,
      ACCOUNT_CODE       ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      BUYER_CODE         ,
      AMOUNT             ,
      L_AMOUNT           ,
      OUTPUT              )   
    SELECT  HP.PERIOD_ID ,
            D1.ACCOUNT       ,
            D1.ENTITY       ,
            D1.SCENARIO     ,
            'Dp001' DEPARTMENT    ,
            BUYER         ,
            NVL(D1.DATA,0) AMOUNT             ,
            0 L_AMOUNT           ,
            0 OUTPUT                  
   FROM /*dwstg.HP_DATA_TBCWYS_PROD D1,*/
   dwstg.HP_DATA_TBCWYS_PROD D1, -- by dengj@besthelp 20130822 数据中心拆分
        DIM_HP_PERIOD HP
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.PERIODS = p_period
             AND D1.PERIODS = HP.MONTH_CODE
             AND D1.YEARS = HP.YEAR_CODE
             AND D1.JOINT ='J01' --对接_默认
             AND D1.ACCOUNT LIKE  'A1116%' --其他物流费用
             AND D1.SCENARIO IN ('SC03')
             AND D1.DEPARTMENT ='Dp001' --不分机构
             AND D1.BUYER ='B0001'--不分购货单位
             AND D1.PRODUCT ='P001' --P001  不分产品
             AND D1.LOGISTIC ='L001'
             AND D1.SOURCE ='S0001'
             AND D1.DATA <> 0 
     ;          
   --    
   COMMIT;
   
   
   
      
 END FY_A;
 
 
 
 PROCEDURE FY_B (p_year VARCHAR2)IS
   fy_table   FACT_FY_EXPENSE%rowtype;    
 BEGIN  
   --按年份清理预算数据
    BEGIN
      DELETE FROM  FACT_FY_EXPENSE t 
        WHERE 1=1 
        AND t.scenario_code IN ('SC01','SC02')
        AND substr(t.period_id,1,4) =  (SELECT DISTINCT DHP.YEAR_NAME
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;  
    --转换数据  : 间接费用特殊处理 
   FOR i IN (     SELECT T.ACCOUNT,             --本级科目
                         LT.ACCOUNT  L_ACCOUNT ,--上级科目
                         T.PERIODS, 
                         T.SCENARIO,                        
                         T.YEARS,
                         T.BUYER,
                         T.ENTITY,
                         T.DEPARTMENT,
                         T.DATA AMOUNT,      --本级费用
                         LT.DATA L_AMOUNT ,   --上级费用 
                         CLHZ.DATA OUTPUT                      
                  FROM dwstg.HP_DATA_TBCWYS_NONPROD T,
                       dwstg.HP_DATA_TBCWYS_NONPROD LT, 
                       dwstg.TBCWYS_NONPRODU_ACCOUNT AC,
                       (--产量：啤酒
                        SELECT CL.ENTITY,                                
                               'Dp0020102' DEPARTMENT,--TBCWYS啤酒
                               CL.SCENARIO,
                               CL.PERIODS, 
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR                         
                         GROUP BY  CL.ENTITY,CL.PERIODS,CL.SCENARIO
                        UNION           
                        --产量：麦芽
                        SELECT CL.ENTITY,                               
                               'Dp0020101' DEPARTMENT,--TBCWYS麦芽
                               CL.SCENARIO,
                               CL.PERIODS,
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR
                         GROUP BY CL.ENTITY ,CL.PERIODS ,CL.SCENARIO                                           
                        UNION 
                        --产量：工厂合并 啤酒厂
                        SELECT CL.ENTITY,                                
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               CL.SCENARIO,
                               CL.PERIODS,
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR
                         AND CL.ENTITY NOT IN ('E0105','E0555')--不含麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY  ,CL.PERIODS ,CL.SCENARIO  
                        UNION 
                        --产量：工厂合并 麦芽厂
                        SELECT CL.ENTITY,
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               CL.SCENARIO,
                               CL.PERIODS,
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR
                         AND CL.ENTITY IN ('E0105','E0555')--麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY ,CL.PERIODS,CL.SCENARIO) CLHZ
                  WHERE 1=1 AND 
                  T.ACCOUNT    LIKE 'A31%'       AND
                  T.DEPARTMENT <> 'Dp001'        AND
                  T.BUYER    = 'B0001'           AND--不分购货单位
                  T.SCENARIO  IN ('SC01','SC02') AND --预算数   
                  T.YEARS    =  P_YEAR           AND       
                  T.ACCOUNT   <> LT.ACCOUNT      AND
                  T.ACCOUNT   = AC.MEMBERNAME    AND
                  LT.ACCOUNT  = AC.PARENTNAME    AND
                  LT.YEARS     = P_YEAR          AND 
                  T.PERIODS    = LT.PERIODS      AND 
                  T.SCENARIO   = LT.SCENARIO(+)   AND                
                  T.ENTITY     = LT.ENTITY(+)     AND
                  T.DEPARTMENT = LT.DEPARTMENT(+) AND 
                  T.DEPARTMENT = CLHZ.DEPARTMENT(+) AND
                  T.ENTITY     =  CLHZ.ENTITY(+)  AND
                  T.PERIODS   = CLHZ.PERIODS(+) AND
                  T.SCENARIO  = CLHZ.SCENARIO(+)
             UNION--特殊处理：间接费用
             SELECT T.ACCOUNT,             --本级科目
                         'LA'  L_ACCOUNT ,--上级科目
                         T.PERIODS, 
                         T.SCENARIO,                        
                         T.YEARS,
                         T.BUYER,
                         T.ENTITY,
                         T.DEPARTMENT,
                         T.DATA AMOUNT,      --本级费用
                         0 L_AMOUNT ,   --上级费用 
                         CLHZ.DATA OUTPUT                     
                  FROM dwstg.HP_DATA_TBCWYS_NONPROD T,
                       (--产量：啤酒
                        SELECT CL.ENTITY,                                
                               'Dp0020102' DEPARTMENT,--TBCWYS啤酒
                               CL.SCENARIO,
                               CL.PERIODS, 
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR                         
                         GROUP BY  CL.ENTITY,CL.PERIODS,CL.SCENARIO
                        UNION           
                        --产量：麦芽
                        SELECT CL.ENTITY,                               
                               'Dp0020101' DEPARTMENT,--TBCWYS麦芽
                               CL.SCENARIO,
                               CL.PERIODS,
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR
                         GROUP BY CL.ENTITY ,CL.PERIODS ,CL.SCENARIO                                           
                        UNION 
                        --产量：工厂合并 啤酒厂
                        SELECT CL.ENTITY,                                
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               CL.SCENARIO,
                               CL.PERIODS,
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND CL.PRODUCT LIKE 'P1%'
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D0103'
                         AND CL.PACKAGE<>'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR
                         AND CL.ENTITY NOT IN ('E0105','E0555')--不含麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY  ,CL.PERIODS ,CL.SCENARIO  
                        UNION 
                        --产量：工厂合并 麦芽厂
                        SELECT CL.ENTITY,
                               'Dp00201' DEPARTMENT,--TBCWYS工厂合并
                               CL.SCENARIO,
                               CL.PERIODS,
                               SUM(CL.DATA) DATA
                        FROM/* dwstg.HP_DATA_TBCBYS_COST CL*/
                        dwstg.HP_DATA_TBCBYS_COST  CL
                        -- by dengj@besthelp 20130822 数据中心拆分
                        WHERE 1=1 
                         AND CL.ACCOUNT='A0501010000000000'
                         AND (CL.PRODUCT LIKE 'P9%' OR CL.PRODUCT='P040301')-- P小麦芽缺省
                         AND CL.MATERIAL ='M00'
                         AND CL.DEPARTMENT='D00'
                         AND CL.PACKAGE = 'PK00'
                         AND CL.SCENARIO IN ('SC01','SC02')
                         AND CL.YEARS =P_YEAR
                         AND CL.ENTITY IN ('E0105','E0555')--麦芽厂,台儿庄麦芽
                         GROUP BY  CL.ENTITY ,CL.PERIODS,CL.SCENARIO) CLHZ
                  WHERE 1=1 AND 
                  T.ACCOUNT ='A3100000000000000' AND--间接费用
                  T.DEPARTMENT <> 'Dp001'        AND
                  T.BUYER    = 'B0001'           AND--不分购货单位
                  T.SCENARIO  IN ('SC01','SC02') AND --预算数   
                  T.YEARS    =  P_YEAR           AND       
                  T.DEPARTMENT = CLHZ.DEPARTMENT(+) AND
                  T.ENTITY     =  CLHZ.ENTITY(+)  AND
                  T.PERIODS   = CLHZ.PERIODS(+) AND
                  T.SCENARIO  = CLHZ.SCENARIO(+)
             UNION 
             --品牌费用 
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,   
                     T.SCENARIO,                      
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     null L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  T.ACCOUNT   LIKE 'A1201%'      AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  IN ('SC01','SC02')AND --预算数   
                  T.YEARS     =  P_YEAR  
             UNION
             --运行费用 
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,   
                     T.SCENARIO,                      
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  T.ACCOUNT LIKE 'A1202%'     AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  IN ('SC01','SC02')AND --预算数   
                  T.YEARS     =  P_YEAR   
             UNION        
             --营业外及其它 
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,   
                     T.SCENARIO,                      
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  T.ACCOUNT LIKE 'A1207%'     AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  IN ('SC01','SC02')AND --预算数   
                  T.YEARS     =  P_YEAR     
              UNION        
             --管理费用 
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,   
                     T.SCENARIO,                      
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  T.ACCOUNT LIKE 'A1203%'     AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  IN ('SC01','SC02')AND --预算数   
                  T.YEARS     =  P_YEAR    
             UNION        
             --减值准备
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,   
                     T.SCENARIO,                      
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  T.ACCOUNT LIKE 'A1206%'     AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  IN ('SC01','SC02')AND --预算数   
                  T.YEARS     =  P_YEAR       
              UNION        
             --职工薪酬合计 ,直接人工薪酬合计,制造费用合计
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,   
                     T.SCENARIO,                      
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                          
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  (T.ACCOUNT LIKE 'A201%' OR T.ACCOUNT LIKE 'A120401%' OR T.ACCOUNT LIKE 'A120402%')     AND
                  T.BUYER     = 'B0001'         AND --不分购货单位
                  T.SCENARIO  IN ('SC01','SC02')AND --预算数   
                  T.YEARS     =  P_YEAR         
                        
                          
              UNION
             --财务费用
             SELECT  T.ACCOUNT,         --本级科目
                     'LA'  L_ACCOUNT ,     --上级科目
                     T.PERIODS,  
                     T.SCENARIO,                       
                     T.YEARS,
                     T.BUYER,
                     T.ENTITY,
                     T.DEPARTMENT,
                     T.DATA AMOUNT,      --本级费用
                     NULL L_AMOUNT ,   
                     NULL OUTPUT                                              
              FROM dwstg.HP_DATA_TBCWYS_NONPROD T 
              WHERE 1=1 and    
                  T.ACCOUNT   LIKE 'A1205%'     AND
                  T.BUYER    ='B0002' AND --内外部合计
                  T.SCENARIO IN ('SC01','SC02')           AND --预算数   
                  T.YEARS     =  P_YEAR                       
             ) LOOP          
      fy_table.period_id           :=REPLACE(i.years,'FY','20')||(CASE
                                                               WHEN i.PERIODS = 'Jan' THEN '01'
                                                               WHEN i.PERIODS = 'Feb' THEN '02'
                                                               WHEN i.PERIODS = 'Mar' THEN '03'
                                                               WHEN i.PERIODS = 'Apr' THEN '04'
                                                               WHEN i.PERIODS = 'May' THEN '05'
                                                               WHEN i.PERIODS = 'Jun' THEN '06'
                                                               WHEN i.PERIODS = 'Jul' THEN '07'
                                                               WHEN i.PERIODS = 'Aug' THEN '08'
                                                               WHEN i.PERIODS = 'Sep' THEN '09'
                                                               WHEN i.PERIODS = 'Oct' THEN '10'  
                                                               WHEN i.PERIODS = 'Nov' THEN '11'
                                                               WHEN i.PERIODS = 'Dec' THEN '12'             
                                                               END) ;      
      
      fy_table.account_code        :=i.account;
      fy_table.ENTITY_CODE         :=i.entity ;     
      fy_table.SCENARIO_CODE       :=i.scenario ;    
      fy_table.DEPARTMENT_CODE     :=i.department;
      fy_table.BUYER_CODE          :=i.buyer ;
      fy_table.AMOUNT               :=i.AMOUNT;
      fy_table.l_amount           :=i.l_amount;
      fy_table.output           :=i.output;  --千升酒        
    insert into FACT_FY_EXPENSE values fy_table;
   end loop;       
   COMMIT; 
   
    --管理利润表导入到费用分析
    INSERT INTO FACT_FY_EXPENSE   
    ( PERIOD_ID          ,
      ACCOUNT_CODE       ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      BUYER_CODE         ,
      AMOUNT             ,
      L_AMOUNT           ,
      OUTPUT              )   
    SELECT  REPLACE(years,'FY','20')||(CASE WHEN PERIODS = 'Jan' THEN '01'
                                            WHEN PERIODS = 'Feb' THEN '02'
                                            WHEN PERIODS = 'Mar' THEN '03'
                                            WHEN PERIODS = 'Apr' THEN '04'
                                            WHEN PERIODS = 'May' THEN '05'
                                            WHEN PERIODS = 'Jun' THEN '06'
                                            WHEN PERIODS = 'Jul' THEN '07'
                                            WHEN PERIODS = 'Aug' THEN '08'
                                            WHEN PERIODS = 'Sep' THEN '09'
                                            WHEN PERIODS = 'Oct' THEN '10'  
                                            WHEN PERIODS = 'Nov' THEN '11'
                                            WHEN PERIODS = 'Dec' THEN '12'  END) PERIOD_ID,
            ACCOUNT       ,
            ENTITY       ,
            SCENARIO     ,
            DEPARTMENT    ,
            'B0001' BUYER         ,
            D1.DATA AMOUNT             ,
            0 L_AMOUNT           ,
            0 OUTPUT                  
   FROM dwstg.HP_DATA_TBCWYS_REPORT D1
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.SCENARIO IN ('SC01','SC02')
             AND D1.DATA <> 0  ;          
   --    
   COMMIT;
   
   --运输费用 导入到费用分析
   INSERT INTO FACT_FY_EXPENSE   
    ( PERIOD_ID          ,
      ACCOUNT_CODE       ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      BUYER_CODE         ,
      AMOUNT             ,
      L_AMOUNT           ,
      OUTPUT              )   
    SELECT  HP.PERIOD_ID ,
            D1.ACCOUNT       ,
            D1.ENTITY       ,
            D1.SCENARIO     ,
            'Dp001' DEPARTMENT    ,
            'B0001' BUYER         ,
            NVL(D1.DATA,0) AMOUNT             ,
            0 L_AMOUNT           ,
            0 OUTPUT                  
   FROM /*dwstg.HP_DATA_TBCWYS_PROD D1,*/
    dwstg.HP_DATA_TBCWYS_PROD D1, -- by dengj@besthelp 20130822 数据中心拆分
        DIM_HP_PERIOD HP
           WHERE 1 = 1
             AND D1.YEARS = P_YEAR
             AND D1.PERIODS = HP.MONTH_CODE
             AND D1.YEARS = HP.YEAR_CODE
             AND D1.JOINT ='J01' --对接_默认
             AND (D1.ACCOUNT = 'A1115000000000000')
             AND D1.SCENARIO IN ('SC01','SC02')
             AND D1.DEPARTMENT='Dp00' --
             AND D1.BUYER ='B0000'           
             AND D1.PRODUCT ='P002'
             AND D1.LOGISTIC ='L002'
             AND D1.SOURCE ='S0000'
             AND D1.DATA <> 0 
              ;          
   --    
   COMMIT;
   
    --其他物流费用 导入到费用分析
   INSERT INTO FACT_FY_EXPENSE   
    ( PERIOD_ID          ,
      ACCOUNT_CODE       ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      BUYER_CODE         ,
      AMOUNT             ,
      L_AMOUNT           ,
      OUTPUT              )   
    SELECT  HP.PERIOD_ID ,
            D1.ACCOUNT       ,
            D1.ENTITY       ,
            D1.SCENARIO     ,
            'Dp001' DEPARTMENT    ,
            BUYER         ,
            NVL(D1.DATA,0) AMOUNT             ,
            0 L_AMOUNT           ,
            0 OUTPUT                  
   FROM/* dwstg.HP_DATA_TBCWYS_PROD D1,*/
    dwstg.HP_DATA_TBCWYS_PROD D1, -- by dengj@besthelp 20130822 数据中心拆分
        DIM_HP_PERIOD HP
   WHERE 1 = 1
     AND D1.YEARS = P_YEAR
     AND D1.PERIODS = HP.MONTH_CODE
     AND D1.YEARS = HP.YEAR_CODE
     AND D1.JOINT ='J01' --对接_默认
     AND D1.ACCOUNT LIKE  'A1116%' --其他物流费用
     AND D1.SCENARIO IN ('SC01','SC02')
     AND D1.DEPARTMENT ='Dp001' --不分机构
     AND D1.BUYER ='B0001'--不分购货单位
     AND D1.PRODUCT ='P001' --P001  不分产品
     AND D1.LOGISTIC ='L001'
     AND D1.SOURCE ='S0001'
     AND D1.DATA <> 0 ;          
   --    
   COMMIT;
   
 END FY_B;
 
end DW_HP_TBCWYS_PKG;
/

prompt
prompt Creating package body DW_HP_TBXHYB_PKG
prompt ======================================
prompt
create or replace package body tbdw.DW_HP_TBXHYB_PKG is
 
 --包装模块实际数
 PROCEDURE BZ_A (p_year VARCHAR2,p_period VARCHAR2)IS  
 BEGIN   
    --按年份+月份清理实际数据
    BEGIN
      DELETE FROM  fact_xh_data_bz t 
        WHERE 1=1 
        AND t.scenario_code='SC03'
        AND EXISTS (SELECT 1
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND t.PERIOD_ID = DHP.PERIOD_ID
               AND DHP.MONTH_CODE = p_period
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;   
    --转换数据  : 生成对应科目下的数据  
    INSERT INTO fact_xh_data_bz
     (  PERIOD_ID          ,
        ENTITY_CODE        ,
        SCENARIO_CODE      ,
        DEPARTMENT_CODE    ,
        CATEGORY_CODE      ,
        PACKAGE_CODE       ,
        BEER_MIX           ,
        QJ_MIX             ,
        BOTTLE_NEW         ,
        BOTTLE_WATER       ,
        BOTTLE_MAO         ,
        BOTTLE             ,
        LOSS_BOTTLE_IN     ,
        NUM_BOTTLE_VICE    ,
        CAP                ,
        LOSS_CAP_IN        ,
        TANK               ,
        LOSS_TANK_IN       ,
        MARK               ,
        LOSS_MARK_IN       ,
        CARTON             ,
        LOSS_CARTON_IN     ,
        OUTPUT_TOTAL        )
     SELECT REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID,       
        ENTITY,
        SCENARIO ,
        DEPARTMENT , 
        CATEGORY , 
        PACKAGE , 
        sum(nvl(BEER_MIX,0)) BEER_MIX,
        sum(nvl(QJ_MIX,0)) QJ_MIX,
        sum(nvl(BOTTLE_NEW,0)) BOTTLE_NEW,
        sum(nvl(BOTTLE_WATER,0)) BOTTLE_WATER,
        sum(nvl(BOTTLE_MAO,0)) BOTTLE_MAO,
        sum(nvl(BOTTLE,0)) BOTTLE,
        sum(nvl(LOSS_BOTTLE_IN,0)) LOSS_BOTTLE_IN,
        sum(nvl(NUM_BOTTLE_VICE,0)) NUM_BOTTLE_VICE,
        sum(nvl(CAP,0)) CAP,
        sum(nvl(LOSS_CAP_IN,0)) LOSS_CAP_IN,
        sum(nvl(TANK,0)) TANK,
        sum(nvl(LOSS_TANK_IN,0)) LOSS_TANK_IN,
        sum(nvl(MARK,0)) MARK,
        sum(nvl(LOSS_MARK_IN,0)) LOSS_MARK_IN,
        sum(nvl(CARTON,0)) CARTON,
        sum(nvl(LOSS_CARTON_IN,0)) LOSS_CARTON_IN,
        sum(nvl(OUTPUT_TOTAL,0)) OUTPUT_TOTAL 
     FROM (SELECT  D1.ENTITY,
                   D1.YEARS,
                   D1.PERIODS,
                   D1.SCENARIO,
                   D1.DEPARTMENT,
                   D1.CATEGORY,
                   D1.PACKAGE,
                   (CASE WHEN D1.ACCOUNT = 'A40030110' THEN D1.DATA ELSE 0 END )  BEER_MIX,       --啤酒产量_混合量（千升）
                   (CASE WHEN D1.ACCOUNT = 'A40030111' THEN D1.DATA ELSE 0 END )  QJ_MIX,         --接收清酒量_混合量（千升）
                   (CASE WHEN D1.ACCOUNT = 'A400304010101' THEN D1.DATA ELSE 0 END )  BOTTLE_NEW,--新瓶（个）
                   (CASE WHEN D1.ACCOUNT = 'A400304010102' THEN D1.DATA ELSE 0 END )  BOTTLE_WATER,--预洗瓶（个）
                   (CASE WHEN D1.ACCOUNT = 'A400304010103' THEN D1.DATA ELSE 0 END )  BOTTLE_MAO,  --毛瓶（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040101' THEN D1.DATA ELSE 0 END )  BOTTLE,        --瓶子领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040102' THEN D1.DATA ELSE 0 END )  LOSS_BOTTLE_IN,--瓶损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040104' THEN D1.DATA ELSE 0 END )  NUM_BOTTLE_VICE,--副品酒量_瓶数（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040201' THEN D1.DATA ELSE 0 END )  CAP,            --盖领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040202' THEN D1.DATA ELSE 0 END )  LOSS_CAP_IN,   --盖损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040301' THEN D1.DATA ELSE 0 END )  TANK,          --罐身领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040302' THEN D1.DATA ELSE 0 END )  LOSS_TANK_IN,  --罐损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040401' THEN D1.DATA ELSE 0 END )  MARK,          --标领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040402' THEN D1.DATA ELSE 0 END )  LOSS_MARK_IN,  --标损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040501' THEN D1.DATA ELSE 0 END )  CARTON,        --纸箱领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040502' THEN D1.DATA ELSE 0 END )  LOSS_CARTON_IN,--箱损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A400101' THEN D1.DATA ELSE 0 END )  OUTPUT_TOTAL       --啤酒总产量
              FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
             WHERE 1 = 1
               AND D1.ATTRIBUTE2 = 'BZ'
               AND D1.YEARS = P_YEAR
               AND D1.SCENARIO = 'SC03'
               AND D1.PERIODS = P_PERIOD )v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , CATEGORY , PACKAGE  ;  
    
    --    
   COMMIT;     
 END BZ_A;
 
 --包装模块预算数
 PROCEDURE BZ_B (p_year VARCHAR2)IS   
 BEGIN  
    --按年份清理预算数据
   BEGIN      
      DELETE FROM  fact_xh_data_bz t 
        WHERE 1=1 
        AND t.scenario_code IN ('SC01','SC02')
        AND substr(t.period_id,1,4) =  (SELECT DISTINCT DHP.YEAR_NAME
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;    
    END; 
    --转换数据  : 生成对应科目下的数据 
    INSERT INTO fact_xh_data_bz
     (  PERIOD_ID          ,
        ENTITY_CODE        ,
        SCENARIO_CODE      ,
        DEPARTMENT_CODE    ,
        CATEGORY_CODE      ,
        PACKAGE_CODE       ,
        BEER_MIX           ,
        QJ_MIX             ,
        BOTTLE_NEW         ,
        BOTTLE_WATER       ,
        BOTTLE_MAO         ,
        BOTTLE             ,
        LOSS_BOTTLE_IN     ,
        NUM_BOTTLE_VICE    ,
        CAP                ,
        LOSS_CAP_IN        ,
        TANK               ,
        LOSS_TANK_IN       ,
        MARK               ,
        LOSS_MARK_IN       ,
        CARTON             ,
        LOSS_CARTON_IN     ,
        OUTPUT_TOTAL        )
     SELECT REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID,       
        ENTITY,
        SCENARIO ,
        DEPARTMENT , 
        CATEGORY , 
        PACKAGE , 
        sum(nvl(BEER_MIX,0)) BEER_MIX,
        sum(nvl(QJ_MIX,0)) QJ_MIX,
        sum(nvl(BOTTLE_NEW,0)) BOTTLE_NEW,
        sum(nvl(BOTTLE_WATER,0)) BOTTLE_WATER,
        sum(nvl(BOTTLE_MAO,0)) BOTTLE_MAO,
        sum(nvl(BOTTLE,0)) BOTTLE,
        sum(nvl(LOSS_BOTTLE_IN,0)) LOSS_BOTTLE_IN,
        sum(nvl(NUM_BOTTLE_VICE,0)) NUM_BOTTLE_VICE,
        sum(nvl(CAP,0)) CAP,
        sum(nvl(LOSS_CAP_IN,0)) LOSS_CAP_IN,
        sum(nvl(TANK,0)) TANK,
        sum(nvl(LOSS_TANK_IN,0)) LOSS_TANK_IN,
        sum(nvl(MARK,0)) MARK,
        sum(nvl(LOSS_MARK_IN,0)) LOSS_MARK_IN,
        sum(nvl(CARTON,0)) CARTON,
        sum(nvl(LOSS_CARTON_IN,0)) LOSS_CARTON_IN,
        sum(nvl(OUTPUT_TOTAL,0)) OUTPUT_TOTAL 
     FROM (SELECT  D1.ENTITY,
                   D1.YEARS,
                   D1.PERIODS,
                   D1.SCENARIO,
                   D1.DEPARTMENT,
                   D1.CATEGORY,
                   D1.PACKAGE,
                   (CASE WHEN D1.ACCOUNT = 'A40030110' THEN D1.DATA ELSE 0 END )     BEER_MIX,     --啤酒产量_混合量（千升）
                   (CASE WHEN D1.ACCOUNT = 'A40030111' THEN D1.DATA ELSE 0 END )     QJ_MIX,       --接收清酒量_混合量（千升）
                   (CASE WHEN D1.ACCOUNT = 'A400304010101' THEN D1.DATA ELSE 0 END )  BOTTLE_NEW,  --新瓶（个）
                   (CASE WHEN D1.ACCOUNT = 'A400304010102' THEN D1.DATA ELSE 0 END )  BOTTLE_WATER,--预洗瓶（个）
                   (CASE WHEN D1.ACCOUNT = 'A400304010103' THEN D1.DATA ELSE 0 END )  BOTTLE_MAO,  --毛瓶（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040101' THEN D1.DATA ELSE 0 END )  BOTTLE,        --瓶子领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040102' THEN D1.DATA ELSE 0 END )  LOSS_BOTTLE_IN,--瓶损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040104' THEN D1.DATA ELSE 0 END )  NUM_BOTTLE_VICE,--副品酒量_瓶数（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040201' THEN D1.DATA ELSE 0 END )  CAP,            --盖领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040202' THEN D1.DATA ELSE 0 END )  LOSS_CAP_IN,   --盖损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040301' THEN D1.DATA ELSE 0 END )  TANK,          --罐身领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040302' THEN D1.DATA ELSE 0 END )  LOSS_TANK_IN,  --罐损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040401' THEN D1.DATA ELSE 0 END )  MARK,          --标领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040402' THEN D1.DATA ELSE 0 END )  LOSS_MARK_IN,  --标损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040501' THEN D1.DATA ELSE 0 END )  CARTON,        --纸箱领用量（个）
                   (CASE WHEN D1.ACCOUNT = 'A4003040502' THEN D1.DATA ELSE 0 END )  LOSS_CARTON_IN,--箱损_入库成品量（个）
                   (CASE WHEN D1.ACCOUNT = 'A400101' THEN D1.DATA ELSE 0 END )      OUTPUT_TOTAL   --啤酒总产量
              FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
             WHERE 1 = 1
               AND D1.ATTRIBUTE2 = 'BZ'
               AND D1.YEARS = P_YEAR
               AND D1.SCENARIO in ('SC01','SC02') )v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , CATEGORY , PACKAGE  ;  
    
    
   --     
   COMMIT;       
 END BZ_B;
 
 -- 成本模块数据
 PROCEDURE CB_A (p_year VARCHAR2,p_period VARCHAR2)IS 
 BEGIN    
    --按年份+月份清理实际数据
    BEGIN
      DELETE FROM  fact_xh_data_cb t 
        WHERE 1=1 
        AND t.scenario_code='SC03'
        AND EXISTS (SELECT 1
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND t.PERIOD_ID = DHP.PERIOD_ID
               AND DHP.MONTH_CODE = p_period
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;
    --转换数据  : 生成对应科目下的数据 
    INSERT INTO fact_xh_data_cb 
    ( PERIOD_ID          ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      CATEGORY_CODE      ,
      FOOD_SEPARATE      ,
      FOOD_MIX           ,
      LMZ_SEPARATE       ,
      QJ_LZ_SEPARATE     ,
      LMZL_SEPARATE      ,
      BEER_MIX           ,
      QJ_MIX             ,
      LOSS_BEER          ,
      OUTPUT_YD          ,
      BEER_FOOD_SEPARATE ,
      BEER_FOOD          )
    SELECT REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID, 
            ENTITY,
            SCENARIO ,
            DEPARTMENT , 
            CATEGORY , 
            sum(nvl(FOOD_SEPARATE,0)) FOOD_SEPARATE,
            sum(nvl(FOOD_MIX,0)) FOOD_MIX,
            sum(nvl(LMZ_SEPARATE,0)) LMZ_SEPARATE,
            sum(nvl(QJ_LZ_SEPARATE,0)) QJ_LZ_SEPARATE,
            sum(nvl(LMZL_SEPARATE,0)) LMZL_SEPARATE,
            sum(nvl(BEER_MIX,0)) BEER_MIX,
            sum(nvl(QJ_MIX,0)) QJ_MIX,
            SUM(nvl(LOSS_BEER,0)) LOSS_BEER,
            SUM(nvl(OUTPUT_YD,0)) OUTPUT_YD,
            SUM(nvl(BEER_FOOD_SEPARATE,0)) BEER_FOOD_SEPARATE,
            SUM(nvl(BEER_FOOD,0)) BEER_FOOD
            FROM (SELECT D1.ENTITY,
                         D1.YEARS,
                         D1.PERIODS,
                         D1.SCENARIO,
                         D1.DEPARTMENT,
                         D1.CATEGORY,
                         (CASE WHEN D1.ACCOUNT = 'A40030207' THEN D1.DATA ELSE 0 END) FOOD_SEPARATE,     --粮食总量_折合（公斤）
                         (CASE WHEN D1.ACCOUNT = 'A40030205' THEN D1.DATA ELSE 0 END) FOOD_MIX,          --粮食总量_混合（公斤）
                         (CASE WHEN D1.ACCOUNT = 'A40030208' THEN D1.DATA ELSE 0 END) LMZ_SEPARATE,      --冷麦汁量_折合（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030107' THEN D1.DATA ELSE 0 END) QJ_LZ_SEPARATE,    --酿造过滤清酒量_折合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030108' THEN D1.DATA ELSE 0 END) LMZL_SEPARATE,     --冷麦汁量_折合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030110' THEN D1.DATA ELSE 0 END) BEER_MIX,          --啤酒产量_混合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030111' THEN D1.DATA ELSE 0 END) QJ_MIX,            --接收清酒量_混合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030112' THEN D1.DATA ELSE 0 END) LOSS_BEER,         --啤酒总损失率（%）
                         (CASE WHEN D1.ACCOUNT = 'A40030209' THEN D1.DATA ELSE 0 END) OUTPUT_YD,         --约当产量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030211' THEN D1.DATA ELSE 0 END) BEER_FOOD_SEPARATE,--啤酒耗粮-粮食折合（千克/千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030215' THEN D1.DATA ELSE 0 END) BEER_FOOD          --啤酒耗粮（千克/千升）
                    FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
                   WHERE 1 = 1
                     AND D1.ATTRIBUTE2 = 'CB'
                     AND D1.YEARS = P_YEAR
                     AND D1.SCENARIO = 'SC03'
                     AND D1.PERIODS = P_PERIOD)v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , CATEGORY;     
    
    --        
   COMMIT;     
 END CB_A;
 
 -- 成本模块数据
 PROCEDURE CB_B (p_year VARCHAR2)IS    
 BEGIN    
    --按年份清理预算数据
   BEGIN      
      DELETE FROM  fact_xh_data_cb t 
        WHERE 1=1 
        AND t.scenario_code IN ('SC01','SC02')
        AND substr(t.period_id,1,4) =  (SELECT DISTINCT DHP.YEAR_NAME
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;    
    END; 
    --转换数据  : 生成对应科目下的数据     
    INSERT INTO fact_xh_data_cb 
    ( PERIOD_ID          ,
      ENTITY_CODE        ,
      SCENARIO_CODE      ,
      DEPARTMENT_CODE    ,
      CATEGORY_CODE      ,
      FOOD_SEPARATE      ,
      FOOD_MIX           ,
      LMZ_SEPARATE       ,
      QJ_LZ_SEPARATE     ,
      LMZL_SEPARATE      ,
      BEER_MIX           ,
      QJ_MIX             ,
      LOSS_BEER          ,
      OUTPUT_YD          ,
      BEER_FOOD_SEPARATE ,
      BEER_FOOD          )
    SELECT REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID, 
            ENTITY,
            SCENARIO ,
            DEPARTMENT , 
            CATEGORY , 
            sum(nvl(FOOD_SEPARATE,0)) FOOD_SEPARATE,
            sum(nvl(FOOD_MIX,0)) FOOD_MIX,
            sum(nvl(LMZ_SEPARATE,0)) LMZ_SEPARATE,
            sum(nvl(QJ_LZ_SEPARATE,0)) QJ_LZ_SEPARATE,
            sum(nvl(LMZL_SEPARATE,0)) LMZL_SEPARATE,
            sum(nvl(BEER_MIX,0)) BEER_MIX,
            sum(nvl(QJ_MIX,0)) QJ_MIX,
            SUM(nvl(LOSS_BEER,0)) LOSS_BEER,
            SUM(nvl(OUTPUT_YD,0)) OUTPUT_YD,
            SUM(nvl(BEER_FOOD_SEPARATE,0)) BEER_FOOD_SEPARATE,
            SUM(nvl(BEER_FOOD,0)) BEER_FOOD
            FROM (SELECT D1.ENTITY,
                         D1.YEARS,
                         D1.PERIODS,
                         D1.SCENARIO,
                         D1.DEPARTMENT,
                         D1.CATEGORY,
                         (CASE WHEN D1.ACCOUNT = 'A40030207' THEN D1.DATA ELSE 0 END) FOOD_SEPARATE,     --粮食总量_折合（公斤）
                         (CASE WHEN D1.ACCOUNT = 'A40030205' THEN D1.DATA ELSE 0 END) FOOD_MIX,          --粮食总量_混合（公斤）
                         (CASE WHEN D1.ACCOUNT = 'A40030208' THEN D1.DATA ELSE 0 END) LMZ_SEPARATE,      --冷麦汁量_折合（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030107' THEN D1.DATA ELSE 0 END) QJ_LZ_SEPARATE,    --酿造过滤清酒量_折合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030108' THEN D1.DATA ELSE 0 END) LMZL_SEPARATE,     --冷麦汁量_折合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030110' THEN D1.DATA ELSE 0 END) BEER_MIX,          --啤酒产量_混合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030111' THEN D1.DATA ELSE 0 END) QJ_MIX,            --接收清酒量_混合量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030112' THEN D1.DATA ELSE 0 END) LOSS_BEER,         --啤酒总损失率（%）
                         (CASE WHEN D1.ACCOUNT = 'A40030209' THEN D1.DATA ELSE 0 END) OUTPUT_YD,         --约当产量（千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030211' THEN D1.DATA ELSE 0 END) BEER_FOOD_SEPARATE,--啤酒耗粮-粮食折合（千克/千升）
                         (CASE WHEN D1.ACCOUNT = 'A40030215' THEN D1.DATA ELSE 0 END) BEER_FOOD          --啤酒耗粮（千克/千升）
                    FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
                   WHERE 1 = 1
                     AND D1.ATTRIBUTE2 = 'CB'
                     AND D1.YEARS = P_YEAR
                     AND D1.SCENARIO in ('SC01','SC02'))v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , CATEGORY; 
    --       
   COMMIT;     
 END CB_B;
 
 --动力模块实际数
 PROCEDURE DL_A (p_year VARCHAR2,p_period VARCHAR2)IS 
 BEGIN  
   --按年份+月份清理实际数据
    BEGIN
      DELETE FROM  fact_xh_data_dl t 
        WHERE 1=1 
        AND t.scenario_code='SC03'
        AND EXISTS (SELECT 1
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND t.PERIOD_ID = DHP.PERIOD_ID
               AND DHP.MONTH_CODE = p_period
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;  
    --转换数据  : 生成对应科目下的数据   
    INSERT INTO fact_xh_data_dl 
    ( PERIOD_ID          ,
      ENTITY_CODE         ,
      SCENARIO_CODE       ,
      WATER_BUY           ,
      WATER_SALE          ,
      GET_WATER_ZM        ,
      GET_WATER_LZ        ,
      GET_WATER_BZ        ,
      GET_WATER_DL        ,
      ELECTRIC_BUY        ,
      ELECTRIC_CREATE     ,
      ELECTRIC_SALE       ,
      GET_ELECTRIC_ZM     ,
      GET_ELECTRIC_LZ     ,
      GET_ELECTRIC_BZ     ,
      GET_ELECTRIC_DL     ,
      GET_ELECTRIC_ZL     ,
      GET_ELECTRIC_KY     ,
      GET_ELECTRIC_DLQT   ,
      GET_ELECTRIC_PJ     ,
      GET_ELECTRIC_PEAK   ,
      GET_ELECTRIC_CO2    ,
      GET_ELECTRIC_GL     ,
      GET_ELECTRIC_SEWAGE ,
      GET_ELECTRIC_WATER  ,
      COAL                ,
      COAL_WORK           ,
      GAS                 ,
      GAS_WORK            ,
      OIL                 ,
      OIL_WORK            ,
      OIL_WOOD            ,
      OIL_WOOD_WORK       ,
      COAL_WATER          ,
      COAL_WATER_WORK     ,
      OTHER               ,
      OTHER_WORK          ,
      STEAM_BUY           ,
      STEAM_CREATE        ,
      STEAM_FACTORY       ,
      STEAM_FACTORY_COAL  ,
      STEAM_WATER         ,
      GET_STEAM_ZM        ,
      GET_STEAM_LZ        ,
      GET_STEAM_BZ        ,
      GET_STEAM_DL        ,
      CO2_RECYC           ,
      CO2_BUY             ,
      CO2_COST            ,
      GET_C02_LZ          ,
      GET_CO2_BZ          ,
      AIR_ZM              ,
      AIR_LZ              ,
      AIR_BZ              ,
      AIR_DL              ,
      AIR_GC              ,
      AIR_AN_BUY          ,
      COLD_COAL_BUY       ,
      COLD_OIL_BUY        ,
      OUTPUT_MY_DLXH      ,
      OUTPUT_LMZ          ,
      OUTPUT_BEER         ,
      OUTPUT_BZ_DLXH      ,
      OUTPUT_PJ_DLXH      ,
      OUTPUT_CANDY        ,
      OUTPUT_DRINK        )
    SELECT  REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID,  
            ENTITY,                      
            SCENARIO ,                      
            sum(nvl(WATER_BUY,0)) WATER_BUY,
            sum(nvl(WATER_SALE,0)) WATER_SALE,
            sum(nvl(GET_WATER_ZM,0)) GET_WATER_ZM,
            sum(nvl(GET_WATER_LZ,0)) GET_WATER_LZ,
            sum(nvl(GET_WATER_BZ,0)) GET_WATER_BZ,
            sum(nvl(GET_WATER_DL,0)) GET_WATER_DL,
            sum(nvl(ELECTRIC_BUY,0)) ELECTRIC_BUY,
            sum(nvl(ELECTRIC_CREATE,0)) ELECTRIC_CREATE,
            sum(nvl(ELECTRIC_SALE,0)) ELECTRIC_SALE,
            sum(nvl(GET_ELECTRIC_ZM,0)) GET_ELECTRIC_ZM,
            sum(nvl(GET_ELECTRIC_LZ,0)) GET_ELECTRIC_LZ,
            sum(nvl(GET_ELECTRIC_BZ,0)) GET_ELECTRIC_BZ,
            sum(nvl(GET_ELECTRIC_DL,0)) GET_ELECTRIC_DL,
            sum(nvl(GET_ELECTRIC_ZL,0)) GET_ELECTRIC_ZL,
            sum(nvl(GET_ELECTRIC_KY,0)) GET_ELECTRIC_KY,
            sum(nvl(GET_ELECTRIC_DLQT,0)) GET_ELECTRIC_DLQT,
            sum(nvl(GET_ELECTRIC_PJ,0)) GET_ELECTRIC_PJ,
            sum(nvl(GET_ELECTRIC_PEAK,0))    GET_ELECTRIC_PEAK,   
            sum(nvl(GET_ELECTRIC_CO2,0))      GET_ELECTRIC_CO2  ,  
            sum(nvl(GET_ELECTRIC_GL,0))      GET_ELECTRIC_GL    , 
            sum(nvl(GET_ELECTRIC_SEWAGE,0))      GET_ELECTRIC_SEWAGE ,
            sum(nvl(GET_ELECTRIC_WATER,0))      GET_ELECTRIC_WATER  ,
            sum(nvl(COAL,0))      COAL                ,
            sum(nvl(COAL_WORK,0)) COAL_WORK           ,
            sum(nvl(GAS,0))       GAS                , 
            sum(nvl(GAS_WORK,0))  GAS_WORK          ,  
            sum(nvl(OIL,0))       OIL                 ,
            sum(nvl(OIL_WORK,0))  OIL_WORK            ,
            sum(nvl(OIL_WOOD,0))  OIL_WOOD            ,
            sum(nvl(OIL_WOOD_WORK       ,0))      OIL_WOOD_WORK       ,
            sum(nvl(COAL_WATER          ,0))      COAL_WATER          ,
            sum(nvl(COAL_WATER_WORK     ,0))      COAL_WATER_WORK     ,
            sum(nvl(OTHER               ,0))      OTHER               ,
            sum(nvl(OTHER_WORK          ,0))      OTHER_WORK          ,
            sum(nvl(STEAM_BUY           ,0))      STEAM_BUY           ,
            sum(nvl(STEAM_CREATE        ,0))      STEAM_CREATE        ,
            sum(nvl(STEAM_FACTORY       ,0))      STEAM_FACTORY       ,
            sum(nvl(STEAM_FACTORY_COAL  ,0))      STEAM_FACTORY_COAL  ,
            sum(nvl(STEAM_WATER         ,0))      STEAM_WATER         ,
            sum(nvl(GET_STEAM_ZM        ,0))      GET_STEAM_ZM        ,
            sum(nvl(GET_STEAM_LZ        ,0))      GET_STEAM_LZ        ,
            sum(nvl(GET_STEAM_BZ        ,0))      GET_STEAM_BZ        ,
            sum(nvl(GET_STEAM_DL        ,0))      GET_STEAM_DL        ,
            sum(nvl(CO2_RECYC           ,0))      CO2_RECYC           ,
            sum(nvl(CO2_BUY             ,0))      CO2_BUY             ,
            sum(nvl(CO2_COST            ,0))      CO2_COST            ,
            sum(nvl(GET_C02_LZ          ,0))      GET_C02_LZ          ,
            sum(nvl(GET_CO2_BZ          ,0))      GET_CO2_BZ          ,
            sum(nvl(AIR_ZM              ,0))      AIR_ZM              ,
            sum(nvl(AIR_LZ              ,0))      AIR_LZ              ,
            sum(nvl(AIR_BZ              ,0))      AIR_BZ              ,
            sum(nvl(AIR_DL              ,0))      AIR_DL              ,
            sum(nvl(AIR_GC              ,0))      AIR_GC              ,
            sum(nvl(AIR_AN_BUY          ,0))      AIR_AN_BUY          ,
            sum(nvl(COLD_COAL_BUY       ,0))      COLD_COAL_BUY       ,
            sum(nvl(COLD_OIL_BUY        ,0))      COLD_OIL_BUY        ,
            sum(nvl(OUTPUT_MY_DLXH      ,0))      OUTPUT_MY_DLXH      ,
            sum(nvl(OUTPUT_LMZ          ,0))      OUTPUT_LMZ          ,
            sum(nvl(OUTPUT_BEER         ,0))      OUTPUT_BEER         ,
            sum(nvl(OUTPUT_BZ_DLXH      ,0))      OUTPUT_BZ_DLXH      ,
            sum(nvl(OUTPUT_PJ_DLXH      ,0))      OUTPUT_PJ_DLXH      ,
            sum(nvl(OUTPUT_CANDY        ,0))      OUTPUT_CANDY        ,
            sum(nvl(OUTPUT_DRINK  ,0))      OUTPUT_DRINK  
            FROM (SELECT D1.ENTITY,
                         D1.YEARS,
                         D1.PERIODS,
                         D1.SCENARIO,
                        (CASE WHEN D1.ACCOUNT = 'A4003030101' THEN D1.DATA ELSE 0 END) WATER_BUY,        --水_购买的（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030102' THEN D1.DATA ELSE 0 END) WATER_SALE,       --水_销售的（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030103' THEN D1.DATA ELSE 0 END)   GET_WATER_ZM,   --制麦取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030105' THEN D1.DATA ELSE 0 END)   GET_WATER_LZ,   --酿造取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030107' THEN D1.DATA ELSE 0 END)   GET_WATER_BZ,   --包装取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030109' THEN D1.DATA ELSE 0 END)    GET_WATER_DL,  --动力取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030201' THEN D1.DATA ELSE 0 END)   ELECTRIC_BUY,   --电_购买的（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030202' THEN D1.DATA ELSE 0 END)   ELECTRIC_CREATE,--电_发电（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030203' THEN D1.DATA ELSE 0 END)   ELECTRIC_SALE,  --电_销售的（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030204' THEN D1.DATA ELSE 0 END)   GET_ELECTRIC_ZM,--制麦用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030206' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_LZ, --酿造用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030208' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_BZ, --包装用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A40030302010' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_DL,--动力用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030212' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_ZL, --制冷用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030214' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_KY, --空压用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030216' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_DLQT,--动力其他用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030218' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_PJ,  --啤酒生产用电总量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030222' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_PEAK,--工厂峰时用电总量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030224' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_CO2, --二氧化碳回收电耗（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030226' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_GL,  --锅炉用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030228' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_SEWAGE,-- 污水处理用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030230' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_WATER,--水处理用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030327' THEN D1.DATA ELSE 0 END)  COAL,              --工厂原煤消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030328' THEN D1.DATA ELSE 0 END)  COAL_WORK,         --原煤低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030329' THEN D1.DATA ELSE 0 END)  GAS,               --工厂天然气消耗量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030330' THEN D1.DATA ELSE 0 END)  GAS_WORK,          --天然气低位发热值（千卡/立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030331' THEN D1.DATA ELSE 0 END)  OIL,               -- 工厂重油消耗量（吨） 
                        (CASE WHEN D1.ACCOUNT = 'A4003030332' THEN D1.DATA ELSE 0 END)  OIL_WORK,          --重油低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030333' THEN D1.DATA ELSE 0 END)  OIL_WOOD,          --工厂柴油消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030334' THEN D1.DATA ELSE 0 END)  OIL_WOOD_WORK,     --柴油低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030335' THEN D1.DATA ELSE 0 END)  COAL_WATER,        --工厂水煤浆消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030336' THEN D1.DATA ELSE 0 END)  COAL_WATER_WORK,   --水煤浆低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030337' THEN D1.DATA ELSE 0 END)  OTHER,             --其它燃料消耗量
                        (CASE WHEN D1.ACCOUNT = 'A4003030338' THEN D1.DATA ELSE 0 END)  OTHER_WORK,        --其它燃料低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030304' THEN D1.DATA ELSE 0 END)  STEAM_BUY,         --蒸汽购买量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030326' THEN D1.DATA ELSE 0 END)  STEAM_CREATE,      --蒸汽产生量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030306' THEN D1.DATA ELSE 0 END)  STEAM_FACTORY,     --工厂外供蒸汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030307' THEN D1.DATA ELSE 0 END)  STEAM_FACTORY_COAL,--工厂外供蒸汽折标煤（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030308' THEN D1.DATA ELSE 0 END)  STEAM_WATER,       --锅炉软化水补充量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030310' THEN D1.DATA ELSE 0 END)  GET_STEAM_ZM,      --制麦用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030312' THEN D1.DATA ELSE 0 END)  GET_STEAM_LZ,      --酿造用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030315' THEN D1.DATA ELSE 0 END)  GET_STEAM_BZ,      --包装用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030317' THEN D1.DATA ELSE 0 END)  GET_STEAM_DL,      --动力用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030401' THEN D1.DATA ELSE 0 END)  CO2_RECYC,         --CO2回收量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030403' THEN D1.DATA ELSE 0 END)  CO2_BUY,           --CO2采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030405' THEN D1.DATA ELSE 0 END)  CO2_COST,          --CO2总消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030406' THEN D1.DATA ELSE 0 END)  GET_C02_LZ,        --酿造CO2消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030408' THEN D1.DATA ELSE 0 END)  GET_CO2_BZ,        --包装CO2消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030501' THEN D1.DATA ELSE 0 END)  AIR_ZM,            --制麦压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030503' THEN D1.DATA ELSE 0 END)  AIR_LZ,            --酿造压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030505' THEN D1.DATA ELSE 0 END)  AIR_BZ,            --包装压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030507' THEN D1.DATA ELSE 0 END)  AIR_DL,            --动力压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030509' THEN D1.DATA ELSE 0 END)  AIR_GC,            --工厂压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030601' THEN D1.DATA ELSE 0 END)  AIR_AN_BUY,        --氨采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030603' THEN D1.DATA ELSE 0 END)  COLD_COAL_BUY,     --冷媒采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030605' THEN D1.DATA ELSE 0 END)  COLD_OIL_BUY,      --冷冻机油采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030701' THEN D1.DATA ELSE 0 END)  OUTPUT_MY_DLXH,    --动力消耗_麦芽产量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030702' THEN D1.DATA ELSE 0 END)  OUTPUT_LMZ,        --冷麦汁产量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030703' THEN D1.DATA ELSE 0 END)  OUTPUT_BEER,       --清酒接收量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030704' THEN D1.DATA ELSE 0 END)  OUTPUT_BZ_DLXH,    --动力消耗_包装产量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030705' THEN D1.DATA ELSE 0 END)  OUTPUT_PJ_DLXH,    --动力消耗_啤酒产量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030706' THEN D1.DATA ELSE 0 END)  OUTPUT_CANDY,      --糖化果汁量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030707' THEN D1.DATA ELSE 0 END)  OUTPUT_DRINK       --果饮产量（千升）
                    FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
                   WHERE 1 = 1
                     AND D1.ATTRIBUTE2 = 'DL'
                     AND D1.YEARS = P_YEAR
                     AND D1.SCENARIO = 'SC03'
                     AND D1.PERIODS = P_PERIOD)v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO    ;
    
    --   
   COMMIT;     
 END DL_A;
 
 --动力模块预算数
 PROCEDURE DL_B (p_year VARCHAR2)IS 
 BEGIN    
    --按年份清理预算数据
   BEGIN      
      DELETE FROM  fact_xh_data_dl t 
        WHERE 1=1 
        AND t.scenario_code IN ('SC01','SC02')
        AND substr(t.period_id,1,4) =  (SELECT DISTINCT DHP.YEAR_NAME
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;    
    END; 
    --转换数据  : 生成对应科目下的数据    
    INSERT INTO fact_xh_data_dl 
    ( PERIOD_ID          ,
      ENTITY_CODE         ,
      SCENARIO_CODE       ,
      WATER_BUY           ,
      WATER_SALE          ,
      GET_WATER_ZM        ,
      GET_WATER_LZ        ,
      GET_WATER_BZ        ,
      GET_WATER_DL        ,
      ELECTRIC_BUY        ,
      ELECTRIC_CREATE     ,
      ELECTRIC_SALE       ,
      GET_ELECTRIC_ZM     ,
      GET_ELECTRIC_LZ     ,
      GET_ELECTRIC_BZ     ,
      GET_ELECTRIC_DL     ,
      GET_ELECTRIC_ZL     ,
      GET_ELECTRIC_KY     ,
      GET_ELECTRIC_DLQT   ,
      GET_ELECTRIC_PJ     ,
      GET_ELECTRIC_PEAK   ,
      GET_ELECTRIC_CO2    ,
      GET_ELECTRIC_GL     ,
      GET_ELECTRIC_SEWAGE ,
      GET_ELECTRIC_WATER  ,
      COAL                ,
      COAL_WORK           ,
      GAS                 ,
      GAS_WORK            ,
      OIL                 ,
      OIL_WORK            ,
      OIL_WOOD            ,
      OIL_WOOD_WORK       ,
      COAL_WATER          ,
      COAL_WATER_WORK     ,
      OTHER               ,
      OTHER_WORK          ,
      STEAM_BUY           ,
      STEAM_CREATE        ,
      STEAM_FACTORY       ,
      STEAM_FACTORY_COAL  ,
      STEAM_WATER         ,
      GET_STEAM_ZM        ,
      GET_STEAM_LZ        ,
      GET_STEAM_BZ        ,
      GET_STEAM_DL        ,
      CO2_RECYC           ,
      CO2_BUY             ,
      CO2_COST            ,
      GET_C02_LZ          ,
      GET_CO2_BZ          ,
      AIR_ZM              ,
      AIR_LZ              ,
      AIR_BZ              ,
      AIR_DL              ,
      AIR_GC              ,
      AIR_AN_BUY          ,
      COLD_COAL_BUY       ,
      COLD_OIL_BUY        ,
      OUTPUT_MY_DLXH      ,
      OUTPUT_LMZ          ,
      OUTPUT_BEER         ,
      OUTPUT_BZ_DLXH      ,
      OUTPUT_PJ_DLXH      ,
      OUTPUT_CANDY        ,
      OUTPUT_DRINK        )
    SELECT  REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID,  
            ENTITY,                      
            SCENARIO ,                      
            sum(nvl(WATER_BUY,0)) WATER_BUY,
            sum(nvl(WATER_SALE,0)) WATER_SALE,
            sum(nvl(GET_WATER_ZM,0)) GET_WATER_ZM,
            sum(nvl(GET_WATER_LZ,0)) GET_WATER_LZ,
            sum(nvl(GET_WATER_BZ,0)) GET_WATER_BZ,
            sum(nvl(GET_WATER_DL,0)) GET_WATER_DL,
            sum(nvl(ELECTRIC_BUY,0)) ELECTRIC_BUY,
            sum(nvl(ELECTRIC_CREATE,0)) ELECTRIC_CREATE,
            sum(nvl(ELECTRIC_SALE,0)) ELECTRIC_SALE,
            sum(nvl(GET_ELECTRIC_ZM,0)) GET_ELECTRIC_ZM,
            sum(nvl(GET_ELECTRIC_LZ,0)) GET_ELECTRIC_LZ,
            sum(nvl(GET_ELECTRIC_BZ,0)) GET_ELECTRIC_BZ,
            sum(nvl(GET_ELECTRIC_DL,0)) GET_ELECTRIC_DL,
            sum(nvl(GET_ELECTRIC_ZL,0)) GET_ELECTRIC_ZL,
            sum(nvl(GET_ELECTRIC_KY,0)) GET_ELECTRIC_KY,
            sum(nvl(GET_ELECTRIC_DLQT,0)) GET_ELECTRIC_DLQT,
            sum(nvl(GET_ELECTRIC_PJ,0)) GET_ELECTRIC_PJ,
            sum(nvl(GET_ELECTRIC_PEAK,0))    GET_ELECTRIC_PEAK,   
            sum(nvl(GET_ELECTRIC_CO2,0))      GET_ELECTRIC_CO2  ,  
            sum(nvl(GET_ELECTRIC_GL,0))      GET_ELECTRIC_GL    , 
            sum(nvl(GET_ELECTRIC_SEWAGE,0))      GET_ELECTRIC_SEWAGE ,
            sum(nvl(GET_ELECTRIC_WATER,0))      GET_ELECTRIC_WATER  ,
            sum(nvl(COAL,0))      COAL                ,
            sum(nvl(COAL_WORK,0)) COAL_WORK           ,
            sum(nvl(GAS,0))       GAS                , 
            sum(nvl(GAS_WORK,0))  GAS_WORK          ,  
            sum(nvl(OIL,0))       OIL                 ,
            sum(nvl(OIL_WORK,0))  OIL_WORK            ,
            sum(nvl(OIL_WOOD,0))  OIL_WOOD            ,
            sum(nvl(OIL_WOOD_WORK       ,0))      OIL_WOOD_WORK       ,
            sum(nvl(COAL_WATER          ,0))      COAL_WATER          ,
            sum(nvl(COAL_WATER_WORK     ,0))      COAL_WATER_WORK     ,
            sum(nvl(OTHER               ,0))      OTHER               ,
            sum(nvl(OTHER_WORK          ,0))      OTHER_WORK          ,
            sum(nvl(STEAM_BUY           ,0))      STEAM_BUY           ,
            sum(nvl(STEAM_CREATE        ,0))      STEAM_CREATE        ,
            sum(nvl(STEAM_FACTORY       ,0))      STEAM_FACTORY       ,
            sum(nvl(STEAM_FACTORY_COAL  ,0))      STEAM_FACTORY_COAL  ,
            sum(nvl(STEAM_WATER         ,0))      STEAM_WATER         ,
            sum(nvl(GET_STEAM_ZM        ,0))      GET_STEAM_ZM        ,
            sum(nvl(GET_STEAM_LZ        ,0))      GET_STEAM_LZ        ,
            sum(nvl(GET_STEAM_BZ        ,0))      GET_STEAM_BZ        ,
            sum(nvl(GET_STEAM_DL        ,0))      GET_STEAM_DL        ,
            sum(nvl(CO2_RECYC           ,0))      CO2_RECYC           ,
            sum(nvl(CO2_BUY             ,0))      CO2_BUY             ,
            sum(nvl(CO2_COST            ,0))      CO2_COST            ,
            sum(nvl(GET_C02_LZ          ,0))      GET_C02_LZ          ,
            sum(nvl(GET_CO2_BZ          ,0))      GET_CO2_BZ          ,
            sum(nvl(AIR_ZM              ,0))      AIR_ZM              ,
            sum(nvl(AIR_LZ              ,0))      AIR_LZ              ,
            sum(nvl(AIR_BZ              ,0))      AIR_BZ              ,
            sum(nvl(AIR_DL              ,0))      AIR_DL              ,
            sum(nvl(AIR_GC              ,0))      AIR_GC              ,
            sum(nvl(AIR_AN_BUY          ,0))      AIR_AN_BUY          ,
            sum(nvl(COLD_COAL_BUY       ,0))      COLD_COAL_BUY       ,
            sum(nvl(COLD_OIL_BUY        ,0))      COLD_OIL_BUY        ,
            sum(nvl(OUTPUT_MY_DLXH      ,0))      OUTPUT_MY_DLXH      ,
            sum(nvl(OUTPUT_LMZ          ,0))      OUTPUT_LMZ          ,
            sum(nvl(OUTPUT_BEER         ,0))      OUTPUT_BEER         ,
            sum(nvl(OUTPUT_BZ_DLXH      ,0))      OUTPUT_BZ_DLXH      ,
            sum(nvl(OUTPUT_PJ_DLXH      ,0))      OUTPUT_PJ_DLXH      ,
            sum(nvl(OUTPUT_CANDY        ,0))      OUTPUT_CANDY        ,
            sum(nvl(OUTPUT_DRINK  ,0))      OUTPUT_DRINK  
            FROM (SELECT D1.ENTITY,
                         D1.YEARS,
                         D1.PERIODS,
                         D1.SCENARIO,
                        (CASE WHEN D1.ACCOUNT = 'A4003030101' THEN D1.DATA ELSE 0 END) WATER_BUY,        --水_购买的（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030102' THEN D1.DATA ELSE 0 END) WATER_SALE,       --水_销售的（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030103' THEN D1.DATA ELSE 0 END)   GET_WATER_ZM,   --制麦取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030105' THEN D1.DATA ELSE 0 END)   GET_WATER_LZ,   --酿造取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030107' THEN D1.DATA ELSE 0 END)   GET_WATER_BZ,   --包装取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030109' THEN D1.DATA ELSE 0 END)    GET_WATER_DL,  --动力取水量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030201' THEN D1.DATA ELSE 0 END)   ELECTRIC_BUY,   --电_购买的（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030202' THEN D1.DATA ELSE 0 END)   ELECTRIC_CREATE,--电_发电（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030203' THEN D1.DATA ELSE 0 END)   ELECTRIC_SALE,  --电_销售的（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030204' THEN D1.DATA ELSE 0 END)   GET_ELECTRIC_ZM,--制麦用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030206' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_LZ, --酿造用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030208' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_BZ, --包装用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A40030302010' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_DL,--动力用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030212' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_ZL, --制冷用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030214' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_KY, --空压用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030216' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_DLQT,--动力其他用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030218' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_PJ,  --啤酒生产用电总量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030222' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_PEAK,--工厂峰时用电总量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030224' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_CO2, --二氧化碳回收电耗（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030226' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_GL,  --锅炉用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030228' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_SEWAGE,-- 污水处理用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030230' THEN D1.DATA ELSE 0 END)  GET_ELECTRIC_WATER,--水处理用电量（千瓦时）
                        (CASE WHEN D1.ACCOUNT = 'A4003030327' THEN D1.DATA ELSE 0 END)  COAL,              --工厂原煤消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030328' THEN D1.DATA ELSE 0 END)  COAL_WORK,         --原煤低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030329' THEN D1.DATA ELSE 0 END)  GAS,               --工厂天然气消耗量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030330' THEN D1.DATA ELSE 0 END)  GAS_WORK,          --天然气低位发热值（千卡/立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030331' THEN D1.DATA ELSE 0 END)  OIL,               -- 工厂重油消耗量（吨） 
                        (CASE WHEN D1.ACCOUNT = 'A4003030332' THEN D1.DATA ELSE 0 END)  OIL_WORK,          --重油低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030333' THEN D1.DATA ELSE 0 END)  OIL_WOOD,          --工厂柴油消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030334' THEN D1.DATA ELSE 0 END)  OIL_WOOD_WORK,     --柴油低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030335' THEN D1.DATA ELSE 0 END)  COAL_WATER,        --工厂水煤浆消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030336' THEN D1.DATA ELSE 0 END)  COAL_WATER_WORK,   --水煤浆低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030337' THEN D1.DATA ELSE 0 END)  OTHER,             --其它燃料消耗量
                        (CASE WHEN D1.ACCOUNT = 'A4003030338' THEN D1.DATA ELSE 0 END)  OTHER_WORK,        --其它燃料低位发热值（千卡/千克）
                        (CASE WHEN D1.ACCOUNT = 'A4003030304' THEN D1.DATA ELSE 0 END)  STEAM_BUY,         --蒸汽购买量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030326' THEN D1.DATA ELSE 0 END)  STEAM_CREATE,      --蒸汽产生量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030306' THEN D1.DATA ELSE 0 END)  STEAM_FACTORY,     --工厂外供蒸汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030307' THEN D1.DATA ELSE 0 END)  STEAM_FACTORY_COAL,--工厂外供蒸汽折标煤（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030308' THEN D1.DATA ELSE 0 END)  STEAM_WATER,       --锅炉软化水补充量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030310' THEN D1.DATA ELSE 0 END)  GET_STEAM_ZM,      --制麦用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030312' THEN D1.DATA ELSE 0 END)  GET_STEAM_LZ,      --酿造用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030315' THEN D1.DATA ELSE 0 END)  GET_STEAM_BZ,      --包装用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030317' THEN D1.DATA ELSE 0 END)  GET_STEAM_DL,      --动力用汽量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030401' THEN D1.DATA ELSE 0 END)  CO2_RECYC,         --CO2回收量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030403' THEN D1.DATA ELSE 0 END)  CO2_BUY,           --CO2采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030405' THEN D1.DATA ELSE 0 END)  CO2_COST,          --CO2总消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030406' THEN D1.DATA ELSE 0 END)  GET_C02_LZ,        --酿造CO2消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030408' THEN D1.DATA ELSE 0 END)  GET_CO2_BZ,        --包装CO2消耗量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030501' THEN D1.DATA ELSE 0 END)  AIR_ZM,            --制麦压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030503' THEN D1.DATA ELSE 0 END)  AIR_LZ,            --酿造压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030505' THEN D1.DATA ELSE 0 END)  AIR_BZ,            --包装压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030507' THEN D1.DATA ELSE 0 END)  AIR_DL,            --动力压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030509' THEN D1.DATA ELSE 0 END)  AIR_GC,            --工厂压缩空气用量（立方米）
                        (CASE WHEN D1.ACCOUNT = 'A4003030601' THEN D1.DATA ELSE 0 END)  AIR_AN_BUY,        --氨采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030603' THEN D1.DATA ELSE 0 END)  COLD_COAL_BUY,     --冷媒采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030605' THEN D1.DATA ELSE 0 END)  COLD_OIL_BUY,      --冷冻机油采购量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030701' THEN D1.DATA ELSE 0 END)  OUTPUT_MY_DLXH,    --动力消耗_麦芽产量（吨）
                        (CASE WHEN D1.ACCOUNT = 'A4003030702' THEN D1.DATA ELSE 0 END)  OUTPUT_LMZ,        --冷麦汁产量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030703' THEN D1.DATA ELSE 0 END)  OUTPUT_BEER,       --清酒接收量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030704' THEN D1.DATA ELSE 0 END)  OUTPUT_BZ_DLXH,    --动力消耗_包装产量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030705' THEN D1.DATA ELSE 0 END)  OUTPUT_PJ_DLXH,    --动力消耗_啤酒产量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030706' THEN D1.DATA ELSE 0 END)  OUTPUT_CANDY,      --糖化果汁量（千升）
                        (CASE WHEN D1.ACCOUNT = 'A4003030707' THEN D1.DATA ELSE 0 END)  OUTPUT_DRINK       --果饮产量（千升）
                    FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
                   WHERE 1 = 1
                     AND D1.ATTRIBUTE2 = 'DL'
                     AND D1.YEARS = P_YEAR
                     AND D1.SCENARIO in ('SC01','SC02'))v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO    ;    
    --    
   COMMIT;     
 END DL_B;
 
 --产销量实际数
 PROCEDURE CXL_A (p_year VARCHAR2,p_period VARCHAR2)IS 
 BEGIN    
    --按年份+月份清理实际数据
    BEGIN
      DELETE FROM  fact_xh_data_cxl t 
        WHERE 1=1 
        AND t.scenario_code='SC03'
        AND EXISTS (SELECT 1
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND t.PERIOD_ID = DHP.PERIOD_ID
               AND DHP.MONTH_CODE = p_period
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;  
    END;
    --转换数据  : 生成对应科目下的数据 
    INSERT INTO fact_xh_data_cxl 
    ( PERIOD_ID     ,  
      ENTITY_CODE    , 
      SCENARIO_CODE   ,
      DEPARTMENT_CODE ,
      CATEGORY_CODE   ,
      PACKAGE_CODE    ,
      QUANTITY        ,
      QUANTITY_ATTACH ,
      SALES           ,
      SALES_SELF      ,
      SALES_ATTACH    )
    SELECT REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID, 
            ENTITY,
            SCENARIO ,
            DEPARTMENT , 
            CATEGORY ,
            PACKAGE, 
            sum(nvl(QUANTITY,0)) QUANTITY,
            sum(nvl(QUANTITY_ATTACH,0)) QUANTITY_ATTACH,
            sum(nvl(SALES,0)) SALES,
            sum(nvl(SALES_SELF,0)) SALES_SELF,
            sum(nvl(SALES_ATTACH,0)) SALES_ATTACH
            FROM (SELECT D1.ENTITY,
                         D1.YEARS,
                         D1.PERIODS,
                         D1.SCENARIO,
                         D1.DEPARTMENT,
                         D1.CATEGORY,
                         D1.PACKAGE,
                         (CASE WHEN D1.ACCOUNT = 'A400101' THEN D1.DATA ELSE 0 END) QUANTITY,     --啤酒总产量
                         (CASE WHEN D1.ACCOUNT = 'A400102' THEN D1.DATA ELSE 0 END) QUANTITY_ATTACH,          --啤酒产量附表
                         (CASE WHEN D1.ACCOUNT = 'A400201' THEN D1.DATA ELSE 0 END) SALES,      --啤酒总销量
                         (CASE WHEN D1.ACCOUNT = 'A40020401' THEN D1.DATA ELSE 0 END) SALES_SELF,    --工厂自销量
                         (CASE WHEN D1.ACCOUNT = 'A400202' THEN D1.DATA ELSE 0 END) SALES_ATTACH     --啤酒销量附表                                
                    FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
                   WHERE 1 = 1
                     AND D1.ATTRIBUTE2 = 'BZ'
                     AND D1.Category NOT IN ('C00020201010108','C00020201010109','C00020201010110')
                     AND D1.YEARS = P_YEAR
                     AND D1.SCENARIO = 'SC03'
                     AND D1.PERIODS = P_PERIOD)v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , CATEGORY,PACKAGE;     
    
    --        
   COMMIT;     
 END CXL_A; 
 
 --产销量预算数
 PROCEDURE CXL_B (p_year VARCHAR2)IS    
 BEGIN    
    --按年份清理预算数据
   BEGIN      
      DELETE FROM  fact_xh_data_cxl t 
        WHERE 1=1 
        AND t.scenario_code IN ('SC01','SC02')
        AND substr(t.period_id,1,4) =  (SELECT DISTINCT DHP.YEAR_NAME
              FROM Dim_Hp_Period DHP
             WHERE 1 = 1
               AND DHP.YEAR_CODE = P_YEAR);
      COMMIT;    
    END; 
    --转换数据  : 生成对应科目下的数据     
    INSERT INTO fact_xh_data_cxl 
    ( PERIOD_ID       ,
      ENTITY_CODE     ,
      SCENARIO_CODE   ,
      DEPARTMENT_CODE ,
      CATEGORY_CODE   ,
      PACKAGE_CODE    ,
      QUANTITY        ,
      QUANTITY_ATTACH ,
      SALES           ,
      SALES_SELF      ,
      SALES_ATTACH    )
    SELECT REPLACE(years,'FY','20')||(CASE  WHEN PERIODS = 'Jan' THEN '01'
                                             WHEN PERIODS = 'Feb' THEN '02'
                                             WHEN PERIODS = 'Mar' THEN '03'
                                             WHEN PERIODS = 'Apr' THEN '04'
                                             WHEN PERIODS = 'May' THEN '05'
                                             WHEN PERIODS = 'Jun' THEN '06'
                                             WHEN PERIODS = 'Jul' THEN '07'
                                             WHEN PERIODS = 'Aug' THEN '08'
                                             WHEN PERIODS = 'Sep' THEN '09'
                                             WHEN PERIODS = 'Oct' THEN '10'  
                                             WHEN PERIODS = 'Nov' THEN '11'
                                             WHEN PERIODS = 'Dec' THEN '12' END) PERIOD_ID, 
            ENTITY,
            SCENARIO ,
            DEPARTMENT , 
            CATEGORY ,
            PACKAGE, 
            sum(nvl(QUANTITY,0)) QUANTITY,
            sum(nvl(QUANTITY_ATTACH,0)) QUANTITY_ATTACH,
            sum(nvl(SALES,0)) SALES,
            sum(nvl(SALES_SELF,0)) SALES_SELF,
            sum(nvl(SALES_ATTACH,0)) SALES_ATTACH
            FROM (SELECT D1.ENTITY,
                         D1.YEARS,
                         D1.PERIODS,
                         D1.SCENARIO,
                         D1.DEPARTMENT,
                         D1.CATEGORY,
                         D1.PACKAGE,
                         (CASE WHEN D1.ACCOUNT = 'A400101' THEN D1.DATA ELSE 0 END) QUANTITY,     --啤酒总产量
                         (CASE WHEN D1.ACCOUNT = 'A400102' THEN D1.DATA ELSE 0 END) QUANTITY_ATTACH,          --啤酒产量附表
                         (CASE WHEN D1.ACCOUNT = 'A400201' THEN D1.DATA ELSE 0 END) SALES,      --啤酒总销量
                         (CASE WHEN D1.ACCOUNT = 'A40020401' THEN D1.DATA ELSE 0 END) SALES_SELF,    --工厂自销量
                         (CASE WHEN D1.ACCOUNT = 'A400202' THEN D1.DATA ELSE 0 END) SALES_ATTACH     --啤酒销量附表                                
                    FROM dwstg.HP_DATA_TBXHYB_CONSUMPT D1
                   WHERE 1 = 1
                     AND D1.ATTRIBUTE2 = 'BZ'
                     AND D1.Category NOT IN ('C00020201010108','C00020201010109','C00020201010110')
                     AND D1.YEARS = P_YEAR
                     AND D1.SCENARIO in ('SC01','SC02'))v
                  where 1=1 
                  group by ENTITY,YEARS ,PERIODS,SCENARIO ,DEPARTMENT , CATEGORY,PACKAGE; 
    --       
   COMMIT;     
 END CXL_B;
 
 
 
 
 
 
  --处理实际数据
  PROCEDURE XH_A(P_YEAR VARCHAR2, p_period VARCHAR2) IS
  BEGIN
    --包装数据
    BZ_A(P_YEAR,p_period);
    --粮耗数据
    CB_A(P_YEAR,p_period);
    --动力数据
    DL_A(P_YEAR,p_period);  
    --产销量数据
    CXL_A(P_YEAR,p_period);  
  END XH_A;
  
  --处理预算数据
  PROCEDURE XH_B(P_YEAR VARCHAR2) IS
  BEGIN    
    --包装数据
    BZ_B(P_YEAR);
    --粮耗数据
    CB_B(P_YEAR);
    --动力数据
    DL_B(P_YEAR);  
    --产销量数据
    CXL_B(P_YEAR); 
  END XH_B;
   




end DW_HP_TBXHYB_PKG;
/

prompt
prompt Creating package body DW_LOAD_BASE_BUDGET_ETL
prompt =============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_base_budget_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact base budget etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main IS
  BEGIN
    --锁定需要操作的数据
    UPDATE soau.j$bsm_base_budget bsb SET bsb.jrn_consumed = 1 WHERE bsb.jrn_subscriber = 'STG-DW';
  
    --删除原表中已经删除的数据和需要更新的数据
    DELETE FROM tbdw.fact_base_budget fsb
     WHERE EXISTS (SELECT 1
              FROM soau.j$bsm_base_budget bsb
             WHERE bsb.sale_budget_id = fsb.source_id
               AND bsb.jrn_consumed = 1);
  
    --将新增的数据和更新的数据放入目标表
    INSERT INTO tbdw.fact_base_budget
      (source_id, month_id, budget_qty, center_series_id, branch_id)
      SELECT bsb.sale_budget_id source_id,
             to_number(to_char(bsb.YEAR, 'yyyy')) * 100 + prg.id + 1 month_id,
             decode(prg.id,
                    0,
                    bsb.jan_quantity,
                    1,
                    bsb.feb_quantity,
                    2,
                    bsb.mar_quantity,
                    3,
                    bsb.apr_quantity,
                    4,
                    bsb.may_quantity,
                    5,
                    bsb.jun_quantity,
                    6,
                    bsb.jul_quantity,
                    7,
                    bsb.aug_quantity,
                    8,
                    bsb.sep_quantity,
                    9,
                    bsb.oct_quantity,
                    10,
                    bsb.nov_quantity,
                    11,
                    bsb.dec_quantity,
                    NULL) quantity,
             dp.center_series_id,
             drs.branch_id
        FROM dwstg.BSM_BASE_BUDGET bsb,
             tbdw.DIM_PROD_CENTER_SERIES dp,
             tbdw.dim_region_branch drs,
             (SELECT 0 id
                FROM dual
              UNION ALL
              SELECT 1 id
                FROM dual
              UNION ALL
              SELECT 2 id
                FROM dual
              UNION ALL
              SELECT 3 id
                FROM dual
              UNION ALL
              SELECT 4 id
                FROM dual
              UNION ALL
              SELECT 5 id
                FROM dual
              UNION ALL
              SELECT 6 id
                FROM dual
              UNION ALL
              SELECT 7 id
                FROM dual
              UNION ALL
              SELECT 8 id
                FROM dual
              UNION ALL
              SELECT 9 id
                FROM dual
              UNION ALL
              SELECT 10 id
                FROM dual
              UNION ALL
              SELECT 11 id FROM dual) prg
       WHERE bsb.CENTER_SERIES_ID = dp.CENTER_SERIES_SRC_ID
         AND bsb.branch_id = drs.branch_src_id
         AND EXISTS (SELECT 1
                FROM soau.j$bsm_base_budget b
               WHERE b.sale_budget_id = bsb.sale_budget_id
                 AND b.jrn_consumed = 1
                 AND b.jrn_flag = 'I');
  
    --删除日志表中已经操作的数据
    DELETE FROM soau.j$bsm_base_budget bsb
     WHERE bsb.jrn_consumed = 1
       AND bsb.jrn_subscriber = 'STG-DW';
  
  END;
END dw_load_base_budget_etl;
/

prompt
prompt Creating package body DW_LOAD_CENTER_BUDGET_ETL
prompt ===============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_center_budget_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-10-27  Carter.wang  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-10-27  Carter.wang  Creation
  ==================================================*/

  PROCEDURE main IS
  BEGIN
    --锁定需要操作的数据
    UPDATE soau.j$bsm_center_battle_budget bsb SET bsb.jrn_consumed = 1 WHERE bsb.jrn_subscriber = 'STG-DW';
  
    --删除原表中已经删除的数据和需要更新的数据
    DELETE FROM tbdw.FACT_CENTER_BATTLE_BUDGET fsb
     WHERE EXISTS (SELECT 1
              FROM soau.j$bsm_center_battle_budget bsb
             WHERE bsb.sale_budget_id = fsb.source_id
               AND bsb.jrn_consumed = 1);
  
    --将新增的数据和更新的数据放入目标表
    INSERT INTO tbdw.FACT_CENTER_BATTLE_BUDGET
      (source_id, month_id, budget_qty, center_series_id, branch_id)
  SELECT  bsb.sale_budget_id source_id,
             to_number(to_char(bsb.YEAR, 'yyyy')) * 100 + prg.id + 1 month_id,
             decode(prg.id,
                    0,
                    bsb.jan_quantity,
                    1,
                    bsb.feb_quantity,
                    2,
                    bsb.mar_quantity,
                    3,
                    bsb.apr_quantity,
                    4,
                    bsb.may_quantity,
                    5,
                    bsb.jun_quantity,
                    6,
                    bsb.jul_quantity,
                    7,
                    bsb.aug_quantity,
                    8,
                    bsb.sep_quantity,
                    9,
                    bsb.oct_quantity,
                    10,
                    bsb.nov_quantity,
                    11,
                    bsb.dec_quantity,
                    NULL) quantity,
             dp.center_series_id,
             drs.branch_id
        FROM dwstg.BSM_CENTER_BATTLE_BUDGET bsb,
             tbdw.DIM_PROD_CENTER_SERIES_V dp,
             tbdw.dim_region_branch drs,
             (SELECT 0 id
                FROM dual
              UNION ALL
              SELECT 1 id
                FROM dual
              UNION ALL
              SELECT 2 id
                FROM dual
              UNION ALL
              SELECT 3 id
                FROM dual
              UNION ALL
              SELECT 4 id
                FROM dual
              UNION ALL
              SELECT 5 id
                FROM dual
              UNION ALL
              SELECT 6 id
                FROM dual
              UNION ALL
              SELECT 7 id
                FROM dual
              UNION ALL
              SELECT 8 id
                FROM dual
              UNION ALL
              SELECT 9 id
                FROM dual
              UNION ALL
              SELECT 10 id
                FROM dual
              UNION ALL
              SELECT 11 id FROM dual) prg
       WHERE bsb.CENTER_SERIES_ID = dp.CENTER_SERIES_SRC_ID
         AND bsb.branch_id = drs.branch_src_id
         AND EXISTS (SELECT 1
                FROM soau.j$bsm_center_battle_budget b
               WHERE b.sale_budget_id = bsb.sale_budget_id
                 AND b.jrn_consumed = 1
                 AND b.jrn_flag = 'I');
  
    --删除日志表中已经操作的数据
    DELETE FROM soau.j$bsm_center_battle_budget bsb
     WHERE bsb.jrn_consumed = 1
       AND bsb.jrn_subscriber = 'STG-DW';
  COMMIT;
  END;
END dw_load_center_budget_etl;
/

prompt
prompt Creating package body DW_LOAD_CUSTOM_PROD_ETL
prompt =============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_custom_prod_etl AS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      dw_load_custom_prod_etl
  Description:
      This program provide custom prod series.
           
  History: 
      1.00  2011-11-22  guojuan  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
     1.00  2011-11-22  guojuan  Creation
          
  History: 
     1.00  22011-11-22  guojuan  Creation
  ==================================================*/
  PROCEDURE main(p_days NUMBER) IS
  BEGIN
    --load品类系列
    get_load_category_series(p_days);
    --load包装档次
    get_load_pack_grade(p_days);
    --load中心明细系列中品类系列和包装档次信息
    get_prod_custom_series(p_days);
    COMMIT;
  END;
  PROCEDURE get_load_category_series(p_days NUMBER) IS
    l_count NUMBER;
    CURSOR c_data IS
      SELECT t.category_series_id category_series_src_id
            ,t.category_series_name
            ,t.category_series_desc
            ,t.order_num
        FROM dwstg.STG_PROD_CATEGORY_SERIES_ALL t
       WHERE t.last_update_date >= SYSDATE - p_days
         AND NOT EXISTS
       (SELECT 1
                FROM tbdw.dim_prod_category_series ds
               WHERE ds.category_series_src_id = t.category_series_id
                 AND ds.category_series_name = t.category_series_name
                 AND ds.category_series_desc = t.category_series_desc
                 AND ds.order_num = t.order_num);
  BEGIN
    --将已删除的品类系列在dim_prod_category_series中删除
    DELETE FROM tbdw.dim_prod_category_series ds
     WHERE NOT EXISTS
     (SELECT 1
              FROM /*stgs.stg_prod_category_series_v*/
              dwstg.STG_PROD_CATEGORY_SERIES_ALL t
             WHERE t.category_series_id = ds.category_series_src_id);
    FOR c IN c_data
    LOOP
      --根据主键判断tbdw中是否存在此数据
      SELECT COUNT(*)
        INTO l_count
        FROM tbdw.dim_prod_category_series ds
       WHERE ds.category_series_src_id = c.category_series_src_id;
      IF l_count > 0
      THEN
        --存在进行更新
        UPDATE tbdw.dim_prod_category_series ds
           SET ds.category_series_name = c.category_series_name
              ,ds.category_series_desc = c.category_series_desc
              ,ds.order_num            = c.order_num
         WHERE ds.category_series_src_id = c.category_series_src_id;
        --存在进行插入
      ELSE
        INSERT INTO tbdw.dim_prod_category_series
          (category_series_id
          ,category_series_src_id
          ,category_series_name
          ,category_series_desc
          ,order_num)
        VALUES
          (dim_product_s.nextval
          ,c.category_series_src_id
          ,c.category_series_name
          ,c.category_series_desc
          ,c.order_num);
      END IF;
    END LOOP;
  END;
  PROCEDURE get_load_pack_grade(p_days NUMBER) IS
    l_count NUMBER;
    CURSOR c_data IS
      SELECT t.pack_grade_id pack_grade_src_id
            ,t.pack_grade_name
            ,t.pack_grade_desc
            ,t.order_num
        FROM dwstg.STG_PROD_PACK_GRADE_ALL t
       WHERE t.last_update_date >= SYSDATE - p_days
         AND NOT EXISTS (SELECT 1
                FROM tbdw.dim_prod_pack_grade dg
               WHERE dg.pack_grade_src_id = t.pack_grade_id
                 AND dg.pack_grade_name = t.pack_grade_name
                 AND dg.pack_grade_desc = t.pack_grade_desc
                 AND dg.order_num = t.order_num);
  BEGIN
    --将已删除的包装档次在dim_prod_pack_grade中删除
    DELETE FROM tbdw.dim_prod_pack_grade dg
     WHERE NOT EXISTS (SELECT 1
              FROM dwstg.STG_PROD_PACK_GRADE_ALL t
             WHERE t.pack_grade_id = dg.pack_grade_src_id);
    FOR c IN c_data
    LOOP
      --根据主键判断tbdw中是否存在此数据
      SELECT COUNT(*)
        INTO l_count
        FROM tbdw.dim_prod_pack_grade ds
       WHERE ds.pack_grade_src_id = c.pack_grade_src_id;
      IF l_count > 0
      THEN
        --存在进行更新
        UPDATE tbdw.dim_prod_pack_grade ds
           SET ds.pack_grade_name = c.pack_grade_name
              ,ds.pack_grade_desc = c.pack_grade_desc
              ,ds.order_num       = c.order_num
         WHERE ds.pack_grade_src_id = c.pack_grade_src_id;
        --存在进行插入
      ELSE
        INSERT INTO tbdw.dim_prod_pack_grade
          (pack_grade_id
          ,pack_grade_src_id
          ,pack_grade_name
          ,pack_grade_desc
          ,order_num)
        VALUES
          (dim_product_s.nextval
          ,c.pack_grade_src_id
          ,c.pack_grade_name
          ,c.pack_grade_desc
          ,c.order_num);
      END IF;
    END LOOP;
  END;
  PROCEDURE get_prod_custom_series(p_days NUMBER) IS
    CURSOR c_category_series IS
      SELECT cm.detail_series_id detail_series_src_id
            ,ds.category_series_id
            ,ds.category_series_src_id
            ,ds.category_series_name
            ,ds.category_series_desc
        FROM dwstg.CUS_PROD_SERIES_MAPPING   cm
            ,dwstg.CUS_PROD_CUSTOM_VALUE     cv
            ,tbdw.dim_prod_category_series ds
       WHERE cm.last_update_date >= SYSDATE - p_days
         AND cm.custom_value_id = cv.custom_value_id
         AND cv.custom_value_id = ds.category_series_src_id
         AND cm.status = 0
         AND cv.status = 0
         AND EXISTS (SELECT 1
                FROM dwstg.CUS_PROD_CUSTOM_SERIES cs
               WHERE cs.custom_series_id = cv.custom_series_id
                 AND cs.custom_series_id = 1 --品类系列
                 AND cs.status = 0);
    CURSOR c_pack_grade IS
      SELECT cm.detail_series_id detail_series_src_id
            ,dg.pack_grade_id
            ,dg.pack_grade_src_id
            ,dg.pack_grade_name
            ,dg.pack_grade_desc
        FROM dwstg.CUS_PROD_SERIES_MAPPING cm
            ,dwstg.CUS_PROD_CUSTOM_VALUE   cv
            ,tbdw.dim_prod_pack_grade    dg
       WHERE cm.last_update_date >= SYSDATE - p_days
         AND cm.custom_value_id = cv.custom_value_id
         AND cv.custom_value_id = dg.pack_grade_src_id
         AND cm.status = 0
         AND cv.status = 0
         AND EXISTS (SELECT 1
                FROM dwstg.CUS_PROD_CUSTOM_SERIES cs
               WHERE cs.custom_series_id = cv.custom_series_id
                 AND cs.custom_series_id = 2 --包装档次
                 AND cs.status = 0);
  BEGIN
    --自定义系列关系删除后，清空中心明细系列、合并品种、品种三张表中品类系列和包装档次信息
    --清品类系统
    --中心明细系列
    UPDATE tbdw.dim_prod_detail_series ds
       SET ds.category_series_id     = NULL
          ,ds.category_series_src_id = NULL
          ,ds.category_series_name   = NULL
          ,ds.category_series_desc   = NULL
     WHERE NOT EXISTS
     (SELECT 1
              FROM dwstg.CUS_PROD_SERIES_MAPPING cm
             WHERE cm.custom_value_id = ds.category_series_src_id
               AND cm.detail_series_id = ds.detail_series_src_id);
    --合并品种
    UPDATE tbdw.dim_prod_merge_product dp
       SET dp.category_series_id     = NULL
          ,dp.category_series_src_id = NULL
          ,dp.category_series_name   = NULL
          ,dp.category_series_desc   = NULL
     WHERE NOT EXISTS
     (SELECT 1
              FROM dwstg.CUS_PROD_SERIES_MAPPING cm
             WHERE cm.custom_value_id = dp.category_series_src_id
               AND cm.detail_series_id = dp.detail_series_src_id);
    --品种
    UPDATE tbdw.dim_product dp
       SET dp.category_series_id     = NULL
          ,dp.category_series_src_id = NULL
          ,dp.category_series_name   = NULL
          ,dp.category_series_desc   = NULL
     WHERE NOT EXISTS
     (SELECT 1
              FROM dwstg.CUS_PROD_SERIES_MAPPING cm
             WHERE cm.custom_value_id = dp.category_series_src_id
               AND cm.detail_series_id = dp.detail_series_src_id);
    --清包装档次
    --中心明细系列
    UPDATE tbdw.dim_prod_detail_series ds
       SET ds.pack_grade_id     = NULL
          ,ds.pack_grade_src_id = NULL
          ,ds.pack_grade_name   = NULL
          ,ds.pack_grade_desc   = NULL
     WHERE NOT EXISTS
     (SELECT 1
              FROM dwstg.CUS_PROD_SERIES_MAPPING cm
             WHERE cm.custom_value_id = ds.pack_grade_src_id
               AND cm.detail_series_id = ds.detail_series_src_id);
    --合并品种
    UPDATE tbdw.dim_prod_merge_product dp
       SET dp.pack_grade_id     = NULL
          ,dp.pack_grade_src_id = NULL
          ,dp.pack_grade_name   = NULL
          ,dp.pack_grade_desc   = NULL
     WHERE NOT EXISTS
     (SELECT 1
              FROM dwstg.CUS_PROD_SERIES_MAPPING cm
             WHERE cm.custom_value_id = dp.pack_grade_src_id
               AND cm.detail_series_id = dp.detail_series_src_id);
    --品种
    UPDATE tbdw.dim_product dp
       SET dp.pack_grade_id     = NULL
          ,dp.pack_grade_src_id = NULL
          ,dp.pack_grade_name   = NULL
          ,dp.pack_grade_desc   = NULL
     WHERE NOT EXISTS
     (SELECT 1
              FROM dwstg.CUS_PROD_SERIES_MAPPING cm
             WHERE cm.custom_value_id = dp.pack_grade_src_id
               AND cm.detail_series_id = dp.detail_series_src_id);
    --更新品类系列
    FOR c IN c_category_series
    LOOP
      UPDATE tbdw.dim_prod_detail_series ds
         SET ds.category_series_id     = c.category_series_id
            ,ds.category_series_src_id = c.category_series_src_id
            ,ds.category_series_name   = c.category_series_name
            ,ds.category_series_desc   = c.category_series_desc
       WHERE ds.detail_series_src_id = c.detail_series_src_id;
    
      UPDATE tbdw.dim_prod_merge_product dp
         SET dp.category_series_id     = c.category_series_id
            ,dp.category_series_src_id = c.category_series_src_id
            ,dp.category_series_name   = c.category_series_name
            ,dp.category_series_desc   = c.category_series_desc
       WHERE dp.detail_series_src_id = c.detail_series_src_id;
    
      UPDATE tbdw.dim_product dp
         SET dp.category_series_id     = c.category_series_id
            ,dp.category_series_src_id = c.category_series_src_id
            ,dp.category_series_name   = c.category_series_name
            ,dp.category_series_desc   = c.category_series_desc
       WHERE dp.detail_series_src_id = c.detail_series_src_id;
    END LOOP;
    --更新包装档次
    FOR c IN c_pack_grade
    LOOP
      UPDATE tbdw.dim_prod_detail_series ds
         SET ds.pack_grade_id     = c.pack_grade_id
            ,ds.pack_grade_src_id = c.pack_grade_src_id
            ,ds.pack_grade_name   = c.pack_grade_name
            ,ds.pack_grade_desc   = c.pack_grade_desc
       WHERE ds.detail_series_src_id = c.detail_series_src_id;
    
      UPDATE tbdw.dim_prod_merge_product dp
         SET dp.pack_grade_id     = c.pack_grade_id
            ,dp.pack_grade_src_id = c.pack_grade_src_id
            ,dp.pack_grade_name   = c.pack_grade_name
            ,dp.pack_grade_desc   = c.pack_grade_desc
       WHERE dp.detail_series_src_id = c.detail_series_src_id;
    
      UPDATE tbdw.dim_product dp
         SET dp.pack_grade_id     = c.pack_grade_id
            ,dp.pack_grade_src_id = c.pack_grade_src_id
            ,dp.pack_grade_name   = c.pack_grade_name
            ,dp.pack_grade_desc   = c.pack_grade_desc
       WHERE dp.detail_series_src_id = c.detail_series_src_id;
    END LOOP;
  END;
END dw_load_custom_prod_etl;
/

prompt
prompt Creating package body DW_LOAD_CUST_RANGE_ETL
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_cust_range_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_CUST_DELIERY_ETL
  Description:
      This program provide util function for fact customer range for ETL.
  
  History:
     1.00  2010-04-20  Hand Consultant  Creation
     
  ==================================================*/

  --将数据插入目标表
  PROCEDURE insert_target(p_month_id     IN NUMBER,
                          p_region_id    IN NUMBER,
                          p_customer_id  IN NUMBER,
                          p_range_code   IN VARCHAR2,
                          p_delivery_qty IN NUMBER) IS
    l_count    NUMBER;
    l_range_id NUMBER;
  BEGIN
    /*查找是否存在，存在则更新，不存在就插入*/
    SELECT COUNT(1)
      INTO l_count
      FROM tbdw.fact_cust_sale_range fcr
     WHERE fcr.month_id = p_month_id
       AND fcr.customer_id = p_customer_id
       AND fcr.region_id = p_region_id;
  
    BEGIN
      SELECT range_id
        INTO l_range_id
        FROM dim_customer_range dcr
       WHERE dcr.range_code = p_range_code;
    EXCEPTION
      WHEN OTHERS THEN
        raise_application_error(-20001,
                                'range code ' || p_range_code ||
                                ' not exists.');
    END;
    IF l_count = 0 THEN
      INSERT INTO tbdw.fact_cust_sale_range
        (month_id, region_id, customer_id, range_id, delivery_qty)
      VALUES
        (p_month_id, p_region_id, p_customer_id, l_range_id, p_delivery_qty);
    ELSE
      UPDATE tbdw.fact_cust_sale_range fcr
         SET range_id     = l_range_id,
             delivery_qty = p_delivery_qty
       WHERE fcr.month_id = p_month_id
         AND fcr.customer_id = p_customer_id
         AND fcr.region_id = p_region_id;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20001, SQLERRM);
      dbms_output.put_line(SQLERRM);
  END insert_target;

  PROCEDURE main IS
    l_month_id     NUMBER;
    l_excep_month EXCEPTION;
    
    CURSOR cur_cust_range(p_month_id IN NUMBER) IS
      SELECT fcp.customer_id,
             fcp.region_id,
             fcp.delivery_qty,
             fl_range.lookup_code range_code
        FROM (SELECT nvl(bcm.primary_customer_id, fcp.customer_id) customer_id,
                     r.region_id,
                     SUM(fcp.delivery_unit_qty) delivery_qty
                FROM fact_cust_prod_delivery   fcp,
                     dim_customer              dc,
                     dwstg.BSM_CUSTOMER_MAPPING bcm,
                     dim_time_gl_month         dtg,
                     dim_region_secondary_v_flag r
               WHERE fcp.customer_id = dc.customer_id
                 AND dc.customer_src_id = bcm.customer_id(+)
                 AND fcp.day_id BETWEEN dtg.gl_month_start_id AND dtg.gl_month_end_id
                 AND dtg.gl_month_id = nvl(g_month_id,p_month_id)
                 AND fcp.secondary_region_id IS NOT NULL
                 AND fcp.secondary_region_id = r.SECONDARY_REGION_ID
               GROUP BY nvl(bcm.primary_customer_id, fcp.customer_id),
                        r.region_id) fcp,
             dwstg.FND_LOOKUP_VALUES fl_range
       WHERE fl_range.language = 'ZHS'
         AND fl_range.lookup_type = 'BSM_CUST_SALE_RANGE'
         AND fcp.delivery_qty >= to_number(fl_range.description)
         AND fcp.delivery_qty < nvl(to_number(fl_range.tag), fcp.delivery_qty + 1); 
         
         TYPE perList IS TABLE OF NUMBER(20); 
         per perList; 
         
  BEGIN
    ---获取当月month_id
/*    BEGIN
     SELECT DISTINCT gl_month_id
        INTO l_month_id
        FROM dim_time_gl_month dtg
       WHERE trunc(SYSDATE) BETWEEN dtg.gl_month_start_date AND
             dtg.gl_month_end_date; 
      -- l_month_id := 201008;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE l_excep_month;
    END;*/
    
    FOR i IN 0..20 LOOP
        
      BEGIN
       SELECT DISTINCT gl_month_id
          INTO l_month_id
          FROM dim_time_gl_month dtg
         WHERE trunc(SYSDATE- i*30)  BETWEEN dtg.gl_month_start_date AND
               dtg.gl_month_end_date; 
        -- l_month_id := 201008;
      EXCEPTION
        WHEN OTHERS THEN
          RAISE l_excep_month;
      END;


        FOR r_cust_range IN cur_cust_range(p_month_id => l_month_id) LOOP
          insert_target(nvl(g_month_id,l_month_id),
                        r_cust_range.region_id,
                        r_cust_range.customer_id,
                        r_cust_range.range_code,
                        r_cust_range.delivery_qty);
        END LOOP;
        
      END LOOP;
       EXCEPTION
        WHEN l_excep_month THEN
          raise_application_error(-20001,
                                  'month for' || SYSDATE || ' not exists.');
        WHEN OTHERS THEN
          raise_application_error(-20001, SQLERRM);
          dbms_output.put_line(SQLERRM);
      
    
  END main;
  
  PROCEDURE main_batch(p_month_id_from IN NUMBER,
                       p_month_id_to   IN NUMBER)
  IS
    CURSOR cur_month IS
      SELECT dtg.gl_month_id
        FROM dim_time_gl_month dtg
       WHERE dtg.gl_month_id >= p_month_id_from
         AND dtg.gl_month_id <= p_month_id_to;
  BEGIN
    FOR r_month IN cur_month LOOP
      g_month_id := r_month.gl_month_id;
      
      main;
    END LOOP;
  END;
END dw_load_cust_range_etl;
/

prompt
prompt Creating package body DW_LOAD_DELIVERY_ETL
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_delivery_etl IS
 
  /*==================================================
 
  Copyright (C) TsingTao Brewery Co.,Ltd.
 
             AllRights Reserved
 
  ==================================================*/
 
  /*==================================================
 
  Program Name:
 
      DW_LOAD_DELIERY_ETL
 
  Description:
 
      This program provide util function for fact DELIERY for ETL.
 
  
 
  History:
 
      1.00  2009-10-31  Hand Consultant  Creation
 
      1.10  2009-11-24  Hand Consultant  Update
 
      1.20  2010-02-07  Hand Consultant  Update   
 
                        Delete data which region is '事业部'
 
  ==================================================*/
 
  --判断逻辑
 
  FUNCTION get_rcv_date(p_line_id IN NUMBER, p_organization_id IN NUMBER)
 
    RETURN DATE IS
 
    l_result DATE;
 
  BEGIN
 
    BEGIN
 
      SELECT mmt.transaction_date
 
        INTO l_result
 
        FROM erps.mtl_material_transactions mmt
 
       WHERE p_organization_id = mmt.organization_id
 
         AND p_line_id = mmt.trx_source_line_id
 
         AND transaction_source_type_id = 12
 
         AND rownum = 1;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        l_result := '';
 
    END;
 
  
 
    RETURN l_result;
 
  END;
 

 
  FUNCTION get_return_date(p_oe_header_id     IN NUMBER,
 
                           p_oe_order_line_id IN NUMBER,
 
                           p_organization_id  IN NUMBER) RETURN DATE IS
 
    l_result DATE;
 
  BEGIN
 
    BEGIN
 
      SELECT MIN(rt.transaction_date)
 
        INTO l_result
 
        FROM erps.rcv_transactions rt
 
       WHERE rt.oe_order_header_id = p_oe_header_id
 
         AND rt.oe_order_line_id = p_oe_order_line_id
 
         AND rt.organization_id = p_organization_id
 
         AND rt.destination_context = 'RECEIVING'
 
         AND rt.transaction_type = 'RECEIVE'
 
         AND rt.transaction_date IS NOT NULL;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        l_result := NULL;
 
    END;
 
    RETURN l_result;
 
  END get_return_date;
 

 
  FUNCTION get_return_date_xn(p_oe_header_id     NUMBER,
 
                              p_oe_order_line_id NUMBER,
 
                              p_organization_id  NUMBER) RETURN DATE IS
 
    v_result DATE;
 
  BEGIN
 
    BEGIN
 
      SELECT trunc(MIN(rt.transaction_date))
 
        INTO v_result
 
        FROM erps.rcv_transactions rt
 
       WHERE rt.oe_order_header_id = p_oe_header_id
 
         AND rt.oe_order_line_id = p_oe_order_line_id
 
         AND rt.organization_id = p_organization_id
 
         AND rt.destination_context = 'RECEIVING'
 
         AND rt.transaction_type = 'RECEIVE'
 
         AND rt.transaction_date IS NOT NULL;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        NULL;
 
    END;
 
    IF v_result IS NULL THEN
 
      SELECT nvl(nvl(trunc(l.actual_shipment_date),
 
                     trunc(l.fulfillment_date)),
 
                 trunc(h.ordered_date))
 
        INTO v_result
 
        FROM erps.oe_order_lines_all l, erps.oe_order_headers_all h
 
       WHERE l.header_id = p_oe_header_id
 
         AND h.header_id = p_oe_header_id
 
         AND l.line_id = p_oe_order_line_id;
 
    END IF;
 
    RETURN(v_result);
 
  END;
 

 
  --取标准数量
 
  FUNCTION get_kkl_quantity(p_item_id      IN NUMBER,
 
                            p_quantity     IN NUMBER,
 
                            p_quantity_uom IN VARCHAR2) RETURN NUMBER IS
 
  BEGIN
 
    IF p_quantity_uom = 'L' THEN
 
      RETURN p_quantity / 1000;
 
    ELSIF p_quantity_uom = 'kL' THEN
 
      RETURN p_quantity;
 
    ELSE
 
      RETURN soau.rdcs_common_pkg.inv_um_convert(p_item_id,
 
                                                 10,
 
                                                 p_quantity,
 
                                                 p_quantity_uom,
 
                                                 'kL',
 
                                                 '',
 
                                                 '');
 
    END IF;
 
  END get_kkl_quantity;
 

 
  --单位转换的折算率------------------------------------------------------------------------------------------------
 
  FUNCTION get_uom_conversion_rate(p_inventory_item_id NUMBER,
 
                                   p_mfg_org_id        NUMBER,
 
                                   p_to_uom_code       VARCHAR2)
 
    RETURN NUMBER IS
 
  
 
    v_result_conversion_rate   NUMBER := 1;
 
    v_from_uom_code            VARCHAR2(3);
 
    v_from_uom_class           VARCHAR2(30);
 
    v_to_uom_class             VARCHAR2(30);
 
    v_from_uom_conversion_rate NUMBER := 1;
 
    v_to_uom_conversion_rate   NUMBER := 1;
 
  
 
    CURSOR cur_uom_class(x_uom_code VARCHAR2) IS
 
      SELECT DISTINCT muom.uom_class
 
        FROM erps.mtl_units_of_measure_tl muom
 
       WHERE upper(muom.uom_code) = upper(x_uom_code)
 
         AND LANGUAGE = userenv('LANG')
 
         AND nvl(muom.disable_date, SYSDATE) >= SYSDATE;
 
    var_uom_class cur_uom_class%ROWTYPE;
 
  
 
    CURSOR cur_uom_intraclass_rate(x_uom_code VARCHAR2) IS
 
      SELECT uom.conversion_rate
 
        FROM erps.mtl_uom_conversions uom
 
       WHERE upper(uom.uom_code) = upper(x_uom_code)
 
         AND uom.inventory_item_id = 0
 
         AND nvl(uom.disable_date, SYSDATE) >= SYSDATE;
 
    var_uom_intraclass_rate cur_uom_intraclass_rate%ROWTYPE;
 
  
 
    CURSOR cur_uom_intraclass_s_rate(x_uom_code VARCHAR2) IS
 
      SELECT uom.conversion_rate
 
        FROM erps.mtl_uom_conversions uom
 
       WHERE upper(uom.uom_code) = upper(x_uom_code)
 
         AND uom.inventory_item_id = p_inventory_item_id
 
         AND nvl(uom.disable_date, SYSDATE) >= SYSDATE;
 
    var_uom_intraclass_s_rate cur_uom_intraclass_s_rate%ROWTYPE;
 
  
 
    CURSOR cur_uom_interclass_rate(x_uom_code VARCHAR2) IS
 
      SELECT (1 / mucc.conversion_rate) conversion_rate
 
        FROM erps.mtl_uom_class_conversions mucc
 
       WHERE mucc.inventory_item_id = p_inventory_item_id
 
            --AND UPPER(mucc.from_uom_code) = UPPER(x_uom_code)
 
         AND upper(mucc.to_uom_code) = upper(p_to_uom_code)
 
         AND nvl(mucc.disable_date, SYSDATE) >= SYSDATE;
 
  
 
    var_uom_interclass_rate cur_uom_interclass_rate%ROWTYPE;
 
  
 
  BEGIN
 
  
 
    SELECT msi.primary_uom_code
 
      INTO v_from_uom_code
 
      FROM erps.mtl_system_items_b msi
 
     WHERE msi.inventory_item_id = p_inventory_item_id
 
       AND msi.organization_id = p_mfg_org_id;
 
  
 
    OPEN cur_uom_class(v_from_uom_code);
 
    FETCH cur_uom_class
 
      INTO var_uom_class;
 
    IF cur_uom_class%FOUND THEN
 
      v_from_uom_class := var_uom_class.uom_class;
 
    ELSE
 
      v_from_uom_class := to_char(NULL);
 
    END IF;
 
    CLOSE cur_uom_class;
 
  
 
    OPEN cur_uom_class(p_to_uom_code);
 
    FETCH cur_uom_class
 
      INTO var_uom_class;
 
    IF cur_uom_class%FOUND THEN
 
      v_to_uom_class := var_uom_class.uom_class;
 
    ELSE
 
      v_to_uom_class := to_char(NULL);
 
    END IF;
 
    CLOSE cur_uom_class;
 
  
 
    IF v_from_uom_class = v_to_uom_class THEN
 
      OPEN cur_uom_intraclass_rate(v_from_uom_code);
 
      FETCH cur_uom_intraclass_rate
 
        INTO var_uom_intraclass_rate;
 
      IF cur_uom_intraclass_rate%FOUND THEN
 
        v_from_uom_conversion_rate := var_uom_intraclass_rate.conversion_rate;
 
      END IF;
 
      CLOSE cur_uom_intraclass_rate;
 
    
 
      OPEN cur_uom_intraclass_s_rate(v_from_uom_code);
 
      FETCH cur_uom_intraclass_s_rate
 
        INTO var_uom_intraclass_s_rate;
 
      IF cur_uom_intraclass_s_rate%FOUND THEN
 
        v_from_uom_conversion_rate := var_uom_intraclass_s_rate.conversion_rate;
 
      END IF;
 
      CLOSE cur_uom_intraclass_s_rate;
 
    
 
      OPEN cur_uom_intraclass_rate(p_to_uom_code);
 
      FETCH cur_uom_intraclass_rate
 
        INTO var_uom_intraclass_rate;
 
      IF cur_uom_intraclass_rate%FOUND THEN
 
        v_to_uom_conversion_rate := var_uom_intraclass_rate.conversion_rate;
 
      END IF;
 
      CLOSE cur_uom_intraclass_rate;
 
    
 
      v_result_conversion_rate := v_from_uom_conversion_rate /
 
                                  v_to_uom_conversion_rate;
 
    ELSE
 
      OPEN cur_uom_interclass_rate(v_from_uom_code);
 
      FETCH cur_uom_interclass_rate
 
        INTO var_uom_interclass_rate;
 
      IF cur_uom_interclass_rate%FOUND THEN
 
        v_result_conversion_rate := var_uom_interclass_rate.conversion_rate;
 
      ELSE
 
        v_result_conversion_rate := 1;
 
      END IF;
 
      CLOSE cur_uom_interclass_rate;
 
    END IF;
 
  
 
    RETURN(v_result_conversion_rate);
 
  
 
  END;
 

 
  --取工厂
 
  PROCEDURE get_factory_id(p_lot_number    IN VARCHAR2,
 
                           p_type          IN NUMBER,
 
                           p_shipment_date IN DATE,
 
                           x_factory_id    OUT VARCHAR2) IS
 
  BEGIN
 
    IF p_type = 1 THEN
 
      BEGIN
 
      --  x_factory_id := to_number(p_lot_number);
 
      x_factory_id := p_lot_number;--modified by xieyt 2011-03-30
 
        /*SELECT --mp.organization_id
 
        substr(flv.lookup_code,
 
               1,
 
               decode(instr(flv.lookup_code, '.'), 0, length(flv.lookup_code), instr(flv.lookup_code, '.') - 1))
 
         INTO p_factory_id
 
         FROM erps.fnd_lookup_values flv --, erps.mtl_parameters mp
 
        WHERE ((flv.end_date_active >= shipment_date AND flv.enabled_flag = 'Y') OR flv.enabled_flag = 'N' OR
 
              (flv.end_date_active IS NULL AND flv.enabled_flag = 'Y'))
 
          AND flv.LANGUAGE = 'ZHS'
 
          AND substr(flv.meaning,
 
                     1,
 
                     decode(instr(flv.meaning, '.'), 0, length(flv.meaning), instr(flv.meaning, '.') - 1)) =
 
              p_lot_number
 
          AND rownum = 1;*/
 
      EXCEPTION
 
        WHEN OTHERS THEN
 
          x_factory_id := -99;
 
      END;
 
    ELSE
 
      BEGIN
 
        SELECT --flc.organization_id 
 
         mp.organization_code
 
          INTO x_factory_id
 
          FROM factory_lookup_code flc, erps.mtl_parameters mp
 
         WHERE flc.organization_id = mp.organization_id
 
           AND flc.lot_number = p_lot_number;
 
      EXCEPTION
 
        WHEN no_data_found THEN
 
          x_factory_id := '-99';
 
      END;
 
    END IF;
 
  END get_factory_id;
 

 
  --判断逻辑
 
  PROCEDURE insert_operation(p_site_id              IN NUMBER,
 
                             p_transaction_date     IN DATE,
 
                             p_inventory_item_id    IN NUMBER,
 
                             p_area_type            IN VARCHAR2,
 
                             p_customer_id          IN NUMBER,
 
                             p_org_id               IN NUMBER,
 
                             p_organization_id      IN NUMBER,
 
                             p_source_id            IN NUMBER,
 
                             p_source_table         IN VARCHAR2,
 
                             p_transaction_quantity IN NUMBER,
 
                             p_transaction_uom      IN VARCHAR2,
 
                             p_unit_selling_price   IN NUMBER,
 
                             p_unit_list_price      IN NUMBER,
 
                             p_lot_id               IN NUMBER,
 
                             p_opm_item_id          IN NUMBER,
 
                             p_lookup_type          IN VARCHAR2,
 
                             p_transaction_type_id  IN NUMBER,
 
                             p_factor               IN NUMBER,
 
                             p_last_update_date     IN DATE) IS
 
    l_unit_qty             NUMBER;
 
    l_kkl_qty              NUMBER;
 
    l_site_id              NUMBER;
 
    l_day_id               NUMBER;
 
    l_product_id           NUMBER;
 
    l_customer_id          NUMBER;
 
    l_count                NUMBER;
 
    l_region_id            NUMBER;
 
    l_factory_code         VARCHAR2(10);
 
    l_factory_id           NUMBER;
 
    l_actual_shipment_date DATE;
 
    l_selling_amount       NUMBER;
 
    l_list_amount          NUMBER;
 
    l_lot_number           VARCHAR2(10);
 
    l_cust_id              NUMBER;
 
    l_cust_site_id         NUMBER;
 
  BEGIN
 
    IF p_lookup_type IS NOT NULL OR p_lot_id != 0 THEN
 
      IF p_source_table = 'MMT' THEN
 
        FOR s IN (SELECT mtln.transaction_quantity * p_factor transaction_quantity,
 
                         substr(mtln.lot_number, 1, 2) lot_number,
 
                         mtln.last_update_date
 
                    FROM erps.mtl_transaction_lot_numbers mtln
 
                   WHERE mtln.transaction_id = -p_source_id) LOOP
 
          l_unit_qty             := s.transaction_quantity;
 
          l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                     l_unit_qty,
 
                                                     p_transaction_uom);
 
          l_actual_shipment_date := p_transaction_date;
 
        
 
          get_factory_id(s.lot_number,
 
                         1,
 
                         p_transaction_date,
 
                         l_factory_code);
 
          l_selling_amount := p_unit_selling_price * s.transaction_quantity;
 
          l_list_amount    := p_unit_list_price * s.transaction_quantity;
 
        
 
          --取工厂
 
          BEGIN
 
            SELECT df.factory_id
 
              INTO l_factory_id
 
              FROM tbdw.dim_factory df
 
             WHERE substr(df.lot_number,
 
                          1,
 
                          decode(instr(df.lot_number, '.'),
 
                                 0,
 
                                 length(df.lot_number),
 
                                 instr(df.lot_number, '.') - 1)) =
 
                   l_factory_code
 
               AND rownum = 1
 
             ORDER BY lot_number;
 
          EXCEPTION
 
            WHEN no_data_found THEN
 
              l_factory_id := -99;
 
            WHEN OTHERS THEN
 
              dbms_output.put_line(l_factory_code);
 
              raise_application_error(-20001, l_factory_code);
 
          END;
 
        
 
          --取地点
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site dcs
 
             WHERE dcs.customer_site_src_id = p_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        
 
          --取日期
 
          l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
        
 
          --取品种
 
          BEGIN
 
            SELECT p.product_id
 
              INTO l_product_id
 
              FROM tbdw.dim_product p
 
             WHERE p.product_src_id = p_inventory_item_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_product_id := NULL;
 
          END;
 
        
 
          --将数据插入目标表
 
          /*查找是否存在，存在则更新，不存在就插入*/
 
          SELECT COUNT(1)
 
            INTO l_count
 
            FROM tbdw.fact_prod_delivery fcp
 
           WHERE fcp.source_code = p_source_table
 
             AND fcp.source_id = p_source_id;
 
        
 
          IF l_count = 0 THEN
 
            INSERT INTO tbdw.fact_prod_delivery
 
              (source_id,
 
               source_code,
 
               day_id,
 
               product_id,
 
               customer_site_id,
 
               factory_id,
 
               org_id,
 
               transaction_type_id,
 
               delivery_box_qty,
 
               delivery_unit_qty,
 
               selling_amount,
 
               list_amount,
 
               last_update_date)
 
            VALUES
 
              (p_source_id,
 
               p_source_table,
 
               l_day_id,
 
               l_product_id,
 
               l_site_id,
 
               l_factory_id,
 
               p_org_id,
 
               p_transaction_type_id,
 
               l_unit_qty,
 
               l_kkl_qty,
 
               l_selling_amount,
 
               l_list_amount,
 
               p_last_update_date);
 
          ELSE
 
            UPDATE tbdw.fact_prod_delivery
 
               SET day_id              = l_day_id,
 
                   product_id          = l_product_id,
 
                   customer_site_id    = l_site_id,
 
                   factory_id          = l_factory_id,
 
                   org_id              = p_org_id,
 
                   transaction_type_id = p_transaction_type_id,
 
                   delivery_box_qty    = l_unit_qty,
 
                   delivery_unit_qty   = l_kkl_qty,
 
                   selling_amount      = l_selling_amount,
 
                   list_amount         = l_list_amount,
 
                   last_update_date    = p_last_update_date
 
             WHERE source_code = p_source_table
 
               AND source_id = p_source_id;
 
          END IF;
 
        
 
          COMMIT;
 
        END LOOP;
 
      ELSIF p_source_table = 'OPM' THEN
 
        SELECT substr(ilm.lot_no, 1, 2) lot_number
 
          INTO l_lot_number
 
          FROM erps.ic_lots_mst ilm
 
         WHERE ilm.lot_id = p_lot_id
 
           AND ilm.item_id = p_opm_item_id;
 
        l_unit_qty             := p_transaction_quantity;
 
        l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                   l_unit_qty,
 
                                                   p_transaction_uom);
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        get_factory_id(l_lot_number, 1, p_transaction_date, l_factory_code);
 
        l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
        l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
      
 
        --取工厂
 
        BEGIN
 
          SELECT df.factory_id
 
            INTO l_factory_id
 
            FROM tbdw.dim_factory df
 
           WHERE substr(df.lot_number,
 
                        1,
 
                        decode(instr(df.lot_number, '.'),
 
                               0,
 
                               length(df.lot_number),
 
                               instr(df.lot_number, '.') - 1)) =
 
                 l_factory_code
 
             AND rownum = 1
 
           ORDER BY lot_number;
 
        EXCEPTION
 
          WHEN no_data_found THEN
 
            l_factory_id := -99;
 
          WHEN OTHERS THEN
 
            dbms_output.put_line(l_factory_code);
 
            raise_application_error(-20001, l_factory_code);
 
        END;
 
      
 
        --取地点
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
      
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_product_id := NULL;
 
        END;
 
      
 
        --将数据插入目标表
 
        /*查找是否存在，存在则更新，不存在就插入*/
 
        SELECT COUNT(1)
 
          INTO l_count
 
          FROM tbdw.fact_prod_delivery fcp
 
         WHERE fcp.source_code = p_source_table
 
           AND fcp.source_id = p_source_id;
 
      
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_prod_delivery
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_site_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
          VALUES
 
            (p_source_id,
 
             p_source_table,
 
             l_day_id,
 
             l_product_id,
 
             l_site_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_prod_delivery
 
             SET day_id              = l_day_id,
 
                 product_id          = l_product_id,
 
                 customer_site_id    = l_site_id,
 
                 factory_id          = l_factory_id,
 
                 org_id              = p_org_id,
 
                 transaction_type_id = p_transaction_type_id,
 
                 delivery_box_qty    = l_unit_qty,
 
                 delivery_unit_qty   = l_kkl_qty,
 
                 selling_amount      = l_selling_amount,
 
                 list_amount         = l_list_amount,
 
                 last_update_date    = p_last_update_date
 
           WHERE source_code = p_source_table
 
             AND source_id = p_source_id;
 
        END IF;
 
      
 
        COMMIT;
 
      ELSE
 
        l_unit_qty := p_transaction_quantity;
 
      
 
        l_kkl_qty := get_kkl_quantity(p_inventory_item_id,
 
                                      l_unit_qty,
 
                                      p_transaction_uom);
 
      
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        --get_factory_id(l_lot_number, 1, p_actual_shipment_date, l_factory_code);
 
        l_factory_id     := -99;
 
        l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
        l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
      
 
        --取地点
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
      
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_product_id := NULL;
 
        END;
 
      
 
        --将数据插入目标表
 
        /*查找是否存在，存在则更新，不存在就插入*/
 
        SELECT COUNT(1)
 
          INTO l_count
 
          FROM tbdw.fact_prod_delivery fcp
 
         WHERE fcp.source_code = p_source_table
 
           AND fcp.source_id = p_source_id;
 
      
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_prod_delivery
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_site_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
          VALUES
 
            (p_source_id,
 
             p_source_table,
 
             l_day_id,
 
             l_product_id,
 
             l_site_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_prod_delivery
 
             SET day_id              = l_day_id,
 
                 product_id          = l_product_id,
 
                 customer_site_id    = l_site_id,
 
                 factory_id          = l_factory_id,
 
                 org_id              = p_org_id,
 
                 transaction_type_id = p_transaction_type_id,
 
                 delivery_box_qty    = l_unit_qty,
 
                 delivery_unit_qty   = l_kkl_qty,
 
                 selling_amount      = l_selling_amount,
 
                 list_amount         = l_list_amount,
 
                 last_update_date    = p_last_update_date
 
           WHERE source_code = p_source_table
 
             AND source_id = p_source_id;
 
        END IF;
 
      
 
        COMMIT;
 
      END IF;
 
    ELSE
 
      l_actual_shipment_date := p_transaction_date;
      
      SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
        INTO l_lot_number
 
        FROM erps.mtl_system_items_b msi
 
       WHERE msi.inventory_item_id = p_inventory_item_id
 
         AND msi.organization_id = p_organization_id;
 
      l_unit_qty := p_transaction_quantity;
 
      --updated by yanghe 20111116 begin
 
      --IF p_area_type IN ('LD', 'CQ') THEN
 
      IF p_area_type IN ( 'CQ') THEN
 
      --updated by yanghe 20111116 end
 
        l_kkl_qty := get_uom_conversion_rate(p_inventory_item_id,
 
                                             p_organization_id,
 
                                             'kL') * p_transaction_quantity;
 
      
 
      ELSE
 
        l_kkl_qty := get_kkl_quantity(p_inventory_item_id,
 
                                      l_unit_qty,
 
                                      p_transaction_uom);
 
      END IF;
 
      get_factory_id(l_lot_number, 0, p_transaction_date, l_factory_code);
 
      l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
      l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
    
 
      --取工厂
 
      BEGIN
 
        SELECT df.factory_id
 
          INTO l_factory_id
 
          FROM tbdw.dim_factory df
 
         WHERE substr(df.lot_number,
 
                      1,
 
                      decode(instr(df.lot_number, '.'),
 
                             0,
 
                             length(df.lot_number),
 
                             instr(df.lot_number, '.') - 1)) =
 
               l_factory_code
 
           AND rownum = 1
 
         ORDER BY lot_number;
 
      EXCEPTION
 
        WHEN no_data_found THEN
 
          l_factory_id := -99;
 
        WHEN OTHERS THEN
 
          dbms_output.put_line(l_factory_code);
 
          raise_application_error(-20001, l_factory_code);
 
      END;
 
    
 
      --取地点
 
      IF p_site_id = -1 AND p_area_type = 'HN' THEN
 
        BEGIN
 
          SELECT to_number(mmt.attribute1), to_number(mmt.attribute2)
 
            INTO l_cust_id, l_cust_site_id
 
            FROM erps.mtl_material_transactions mmt
 
           WHERE mmt.transaction_id = p_source_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_cust_id      := NULL;
 
            l_cust_site_id := NULL;
 
        END;
 
      
 
        IF l_cust_site_id IS NOT NULL THEN
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site dcs
 
             WHERE dcs.customer_site_src_id = l_cust_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        ELSIF l_cust_id IS NOT NULL THEN
 
          BEGIN
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site           dcs,
 
                   erps.hz_cust_site_uses_all  hcsu,
 
                   erps.hz_cust_acct_sites_all hcas
 
             WHERE dcs.customer_site_src_id = hcsu.site_use_id
 
               AND hcsu.primary_flag = 'Y'
 
               AND hcsu.status = 'A'
 
               AND hcsu.site_use_code = 'BILL_TO'
 
               AND hcsu.org_id = hcas.org_id
 
               AND hcsu.cust_acct_site_id = hcas.cust_acct_site_id
 
               AND hcas.org_id = p_org_id
 
               AND hcas.cust_account_id = l_cust_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        END IF;
 
      ELSE
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      END IF;
 
    
 
      --取日期
 
      l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
    
 
      --取品种
 
      BEGIN
 
        SELECT p.product_id
 
          INTO l_product_id
 
          FROM tbdw.dim_product p
 
         WHERE p.product_src_id = p_inventory_item_id;
 
      EXCEPTION
 
        WHEN OTHERS THEN
 
          l_product_id := NULL;
 
      END;
 
    
 
      --将数据插入目标表
 
      /*查找是否存在，存在则更新，不存在就插入*/
 
      SELECT COUNT(1)
 
        INTO l_count
 
        FROM tbdw.fact_prod_delivery fcp
 
       WHERE fcp.source_code = p_source_table
 
         AND fcp.source_id = p_source_id;
 
    
 
      IF l_count = 0 THEN
 
        INSERT INTO tbdw.fact_prod_delivery
 
          (source_id,
 
           source_code,
 
           day_id,
 
           product_id,
 
           customer_site_id,
 
           factory_id,
 
           org_id,
 
           transaction_type_id,
 
           delivery_box_qty,
 
           delivery_unit_qty,
 
           selling_amount,
 
           list_amount,
 
           last_update_date)
 
        VALUES
 
          (p_source_id,
 
           p_source_table,
 
           l_day_id,
 
           l_product_id,
 
           l_site_id,
 
           l_factory_id,
 
           p_org_id,
 
           p_transaction_type_id,
 
           l_unit_qty,
 
           l_kkl_qty,
 
           l_selling_amount,
 
           l_list_amount,
 
           p_last_update_date);
 
      ELSE
 
        UPDATE tbdw.fact_prod_delivery
 
           SET day_id              = l_day_id,
 
               product_id          = l_product_id,
 
               customer_site_id    = l_site_id,
 
               factory_id          = l_factory_id,
 
               org_id              = p_org_id,
 
               transaction_type_id = p_transaction_type_id,
 
               delivery_box_qty    = l_unit_qty,
 
               delivery_unit_qty   = l_kkl_qty,
 
               selling_amount      = l_selling_amount,
 
               list_amount         = l_list_amount,
 
               last_update_date    = p_last_update_date
 
         WHERE source_code = p_source_table
 
           AND source_id = p_source_id;
 
      END IF;
 
    
 
      COMMIT;
 
    END IF;
 
  
 
    /*--IF p_source_table = 'MMT' THEN
 
      l_unit_qty := p_transaction_quantity;
 
      
 
      l_kkl_qty  := dw_load_delivery_etl.get_kkl_quantity(p_item_id      => p_inventory_item_id,
 
                                                          p_quantity     => l_unit_qty,
 
                                                          p_quantity_uom => p_transaction_uom);
 
       
 
      --将数据插入目标表
 
      --取地点
 
      BEGIN
 
        --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
        SELECT dcs.customer_site_id
 
          INTO l_site_id
 
          FROM dim_customer_site dcs
 
         WHERE dcs.customer_site_src_id = p_site_id;
 
      EXCEPTION
 
        WHEN OTHERS THEN 
 
          l_site_id := NULL;
 
      END;
 
     
 
    --取日期
 
    l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
    
 
    --取品种
 
    BEGIN
 
      SELECT p.product_id
 
        INTO l_product_id
 
        FROM tbdw.dim_product p
 
       WHERE p.product_src_id = p_inventory_item_id;
 
    EXCEPTION
 
      WHEN OTHERS THEN 
 
        l_product_id := NULL;
 
    END;
 
    
 
    
 
    \*查找是否存在，存在则更新，不存在就插入*\
 
    SELECT COUNT(1) 
 
      INTO l_count
 
      FROM tbdw.fact_prod_delivery fcp
 
     WHERE fcp.source_code              = p_source_table
 
       AND fcp.source_id                = p_source_id;
 
     
 
    IF l_count = 0 THEN
 
      INSERT INTO tbdw.fact_prod_delivery
 
        (source_id,
 
         source_code,
 
         day_id,
 
         product_id,
 
         customer_site_id,
 
         factory_id,
 
         org_id,
 
         transaction_type_id,
 
         delivery_box_qty,
 
         delivery_unit_qty,
 
         selling_amount,
 
         list_amount,
 
         last_update_date)
 
      VALUES
 
        (p_source_id,
 
         p_source_table,
 
         l_day_id,
 
         l_product_id,
 
         l_customer_id,
 
         l_site_id,
 
         l_unit_qty,
 
         l_kkl_qty,
 
         p_last_update_date);
 
    ELSE
 
      UPDATE tbdw.fact_prod_delivery
 
         SET day_id              = l_day_id,
 
             product_id          = l_product_id,
 
             customer_id         = l_customer_id,
 
             customer_site_id    = l_site_id,
 
             delivery_box_qty    = l_unit_qty,
 
             delivery_unit_qty   = l_kkl_qty
 
       WHERE source_code         = p_source_table
 
         AND source_id           = p_source_id;
 
    END IF;
 
    
 
    COMMIT;*/
 
  END insert_operation;
 

 
  --判断逻辑
 
  PROCEDURE insert_fob(p_site_id              IN NUMBER,
 
                       p_source_site          IN VARCHAR2,
 
                       p_fob_code             IN VARCHAR2,
 
                       p_transaction_date     IN DATE,
 
                       p_inventory_item_id    IN NUMBER,
 
                       p_area_type            IN VARCHAR2,
 
                       p_customer_id          IN NUMBER,
 
                       p_org_id               IN NUMBER,
 
                       p_organization_id      IN NUMBER,
 
                       p_source_id            IN NUMBER,
 
                       p_source_table         IN VARCHAR2,
 
                       p_transaction_quantity IN NUMBER,
 
                       p_transaction_uom      IN VARCHAR2,
 
                       p_unit_selling_price   IN NUMBER,
 
                       p_unit_list_price      IN NUMBER,
 
                       p_lot_id               IN NUMBER,
 
                       p_opm_item_id          IN NUMBER,
 
                       p_lookup_type          IN VARCHAR2,
 
                       p_transaction_type_id  IN NUMBER,
 
                       p_factor               IN NUMBER,
 
                       p_last_update_date     IN DATE) IS
 
    l_unit_qty             NUMBER;
 
    l_kkl_qty              NUMBER;
 
    l_secondary_region_id  NUMBER;
 
    l_day_id               NUMBER;
 
    l_product_id           NUMBER;
 
    l_customer_id          NUMBER;
 
    l_count                NUMBER;
 
    l_region_id            NUMBER;
 
    l_factory_code         VARCHAR2(10);
 
    l_factory_id           NUMBER;
 
    l_actual_shipment_date DATE;
 
    l_selling_amount       NUMBER;
 
    l_list_amount          NUMBER;
 
    l_lot_number           VARCHAR2(10);
 
    l_site_id              NUMBER;
 
    l_exist_fob            NUMBER :=0;
 
    l_fob_code             VARCHAR2(30);
 
  BEGIN
 
    /*IF p_lookup_type IS NOT NULL OR p_lot_id != 0 THEN
 
      IF p_source_table = 'MMT' THEN
 
        FOR s IN (SELECT mtln.transaction_quantity * p_factor transaction_quantity,
 
                         substr(mtln.lot_number, 1, 2) lot_number,
 
                         mtln.last_update_date
 
                    FROM erps.mtl_transaction_lot_numbers mtln
 
                   WHERE mtln.transaction_id = p_source_id) LOOP
 
          l_unit_qty             := s.transaction_quantity;
 
          l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                     l_unit_qty,
 
                                                     p_transaction_uom);
 
          l_actual_shipment_date := p_transaction_date;
 
        
 
          get_factory_id(s.lot_number, 1, p_transaction_date, l_factory_code);
 
          l_selling_amount := p_unit_selling_price * s.transaction_quantity;
 
          l_list_amount    := p_unit_list_price * s.transaction_quantity;
 
          
 
          --取工厂
 
          BEGIN
 
            SELECT df.factory_id
 
              INTO l_factory_id
 
              FROM tbdw.dim_factory df
 
             WHERE substr(df.lot_number,
 
                          1,
 
                          decode(instr(df.lot_number, '.'),
 
                                 0,
 
                                 length(df.lot_number),
 
                                 instr(df.lot_number, '.') - 1)) = l_factory_code
 
               AND rownum = 1
 
             ORDER BY lot_number;
 
          EXCEPTION
 
            WHEN no_data_found THEN
 
              l_factory_id := -99;
 
            WHEN OTHERS THEN
 
              dbms_output.put_line(l_factory_code);
 
              raise_application_error(-20001, l_factory_code);
 
          END;
 
          
 
          --取区域
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT drs.secondary_region_id
 
              INTO l_secondary_region_id
 
              FROM dim_region_secondary                 drs,
 
                   erps.ra_territories                  rt
 
             WHERE to_char(drs.secondary_region_src_id) = rt.attribute14
 
               AND rt.territory_id                      = p_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN 
 
              l_secondary_region_id := NULL;
 
          END;
 
     
 
          --取日期
 
          l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
          
 
          --取品种
 
          BEGIN
 
            SELECT p.product_id
 
              INTO l_product_id
 
              FROM tbdw.dim_product p
 
             WHERE p.product_src_id = p_inventory_item_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN 
 
              l_product_id := NULL;
 
          END;
 
          
 
          --将数据插入目标表
 
          \*查找是否存在，存在则更新，不存在就插入*\
 
          SELECT COUNT(1) 
 
            INTO l_count
 
            FROM tbdw.fact_fob_prod_delivery fcp
 
           WHERE fcp.source_code              = p_source_table
 
             AND fcp.source_id                = p_source_id;
 
     
 
          IF l_count = 0 THEN
 
            INSERT INTO tbdw.fact_fob_prod_delivery
 
              (source_id,
 
               source_code,
 
               day_id,
 
               product_id,
 
               customer_id,
 
               secondary_region_id,
 
               factory_id,
 
               org_id,
 
               transaction_type_id,
 
               delivery_box_qty,
 
               delivery_unit_qty,
 
               selling_amount,
 
               list_amount,
 
               last_update_date)
 
              VALUES
 
              (p_source_id,
 
               p_source_table,
 
               l_day_id,
 
               l_product_id,
 
               l_customer_id,
 
               l_secondary_region_id,
 
               l_factory_id,
 
               p_org_id,
 
               p_transaction_type_id,
 
               l_unit_qty,
 
               l_kkl_qty,
 
               l_selling_amount,
 
               l_list_amount,
 
               p_last_update_date);
 
          ELSE
 
            UPDATE tbdw.fact_fob_prod_delivery
 
               SET day_id                  = l_day_id,
 
                   product_id              = l_product_id,
 
                   customer_id             = l_customer_id,
 
                   secondary_region_id     = l_secondary_region_id,
 
                   factory_id              = l_factory_id,
 
                   org_id                  = p_org_id,
 
                   transaction_type_id     = p_transaction_type_id,
 
                   delivery_box_qty        = l_unit_qty,
 
                   delivery_unit_qty       = l_kkl_qty,
 
                   selling_amount          = l_selling_amount,
 
                   list_amount             = l_list_amount,
 
                   last_update_date        = p_last_update_date     
 
             WHERE source_code             = p_source_table
 
               AND source_id               = p_source_id;
 
          END IF;
 
    
 
          COMMIT;
 
        END LOOP;
 
      ELSIF p_source_table = 'OPM' THEN
 
        SELECT substr(ilm.lot_no, 1, 2) lot_number
 
          INTO l_lot_number
 
          FROM erps.ic_lots_mst ilm
 
         WHERE ilm.lot_id = p_lot_id
 
           AND ilm.item_id = p_opm_item_id;
 
        l_unit_qty             := p_transaction_quantity;
 
        l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                   l_unit_qty,
 
                                                   p_transaction_uom);
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        get_factory_id(l_lot_number, 1, p_transaction_date, l_factory_id);
 
        l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
        l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
        
 
        --取工厂
 
        BEGIN
 
          SELECT df.factory_id
 
            INTO l_factory_id
 
            FROM tbdw.dim_factory df
 
           WHERE substr(df.lot_number,
 
                        1,
 
                        decode(instr(df.lot_number, '.'),
 
                               0,
 
                               length(df.lot_number),
 
                               instr(df.lot_number, '.') - 1)) = l_factory_code
 
             AND rownum = 1
 
           ORDER BY lot_number;
 
        EXCEPTION
 
          WHEN no_data_found THEN
 
            l_factory_id := -99;
 
          WHEN OTHERS THEN
 
            dbms_output.put_line(l_factory_code);
 
            raise_application_error(-20001, l_factory_code);
 
        END;
 
          
 
        --取区域
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT drs.secondary_region_id
 
            INTO l_secondary_region_id
 
            FROM dim_region_secondary                 drs,
 
                 erps.ra_territories                  rt
 
           WHERE to_char(drs.secondary_region_src_id) = rt.attribute14
 
             AND rt.territory_id                      = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN 
 
            l_secondary_region_id := NULL;
 
        END;
 
     
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
          
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN 
 
            l_product_id := NULL;
 
        END;
 
        
 
        --将数据插入目标表
 
        \*查找是否存在，存在则更新，不存在就插入*\
 
        SELECT COUNT(1) 
 
          INTO l_count
 
          FROM tbdw.fact_fob_prod_delivery fcp
 
         WHERE fcp.source_code              = p_source_table
 
           AND fcp.source_id                = p_source_id;
 
     
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_fob_prod_delivery
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_id,
 
             secondary_region_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
            VALUES
 
            (p_source_id,
 
             p_source_table,
 
             l_day_id,
 
             l_product_id,
 
             l_customer_id,
 
             l_secondary_region_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_fob_prod_delivery
 
             SET day_id                  = l_day_id,
 
                 product_id              = l_product_id,
 
                 customer_id             = l_customer_id,
 
                 secondary_region_id     = l_secondary_region_id,
 
                 factory_id              = l_factory_id,
 
                 org_id                  = p_org_id,
 
                 transaction_type_id     = p_transaction_type_id,
 
                 delivery_box_qty        = l_unit_qty,
 
                 delivery_unit_qty       = l_kkl_qty,
 
                 selling_amount          = l_selling_amount,
 
                 list_amount             = l_list_amount,
 
                 last_update_date        = p_last_update_date     
 
           WHERE source_code             = p_source_table
 
             AND source_id               = p_source_id;
 
        END IF;
 
    
 
        COMMIT;
 
      ELSE
 
        l_unit_qty             := p_transaction_quantity;
 
        l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                   l_unit_qty,
 
                                                   p_transaction_uom);
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        --get_factory_id(l_lot_number, 1, p_actual_shipment_date, l_factory_id);
 
        l_factory_id := -99;
 
        l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
        l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
        
 
        --取区域
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT drs.secondary_region_id
 
            INTO l_secondary_region_id
 
            FROM dim_region_secondary                 drs,
 
                 erps.ra_territories                  rt
 
           WHERE to_char(drs.secondary_region_src_id) = rt.attribute14
 
             AND rt.territory_id                      = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN 
 
            l_secondary_region_id := NULL;
 
        END;
 
     
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
          
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN 
 
            l_product_id := NULL;
 
        END;
 
        
 
        --将数据插入目标表
 
        \*查找是否存在，存在则更新，不存在就插入*\
 
        SELECT COUNT(1) 
 
          INTO l_count
 
          FROM tbdw.fact_fob_prod_delivery fcp
 
         WHERE fcp.source_code              = p_source_table
 
           AND fcp.source_id                = p_source_id;
 
     
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_fob_prod_delivery
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_id,
 
             secondary_region_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
            VALUES
 
            (p_source_id,
 
             p_source_table,
 
             l_day_id,
 
             l_product_id,
 
             l_customer_id,
 
             l_secondary_region_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_fob_prod_delivery
 
             SET day_id                  = l_day_id,
 
                 product_id              = l_product_id,
 
                 customer_id             = l_custoemr_id,
 
                 secondary_region_id     = l_secondary_region_id,
 
                 factory_id              = l_factory_id,
 
                 org_id                  = p_org_id,
 
                 transaction_type_id     = p_transaction_type_id,
 
                 delivery_box_qty        = l_unit_qty,
 
                 delivery_unit_qty       = l_kkl_qty,
 
                 selling_amount          = l_selling_amount,
 
                 list_amount             = l_list_amount,
 
                 last_update_date        = p_last_update_date     
 
           WHERE source_code             = p_source_table
 
             AND source_id               = p_source_id;
 
        END IF;
 
    
 
        COMMIT;
 
      END IF;
 
    ELSE*/
 
    l_actual_shipment_date := p_transaction_date;
 
    SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
      INTO l_lot_number
 
      FROM erps.mtl_system_items_b msi
 
     WHERE msi.inventory_item_id = p_inventory_item_id
 
       AND msi.organization_id = p_organization_id;
 
    l_unit_qty := p_transaction_quantity;
 
    l_kkl_qty  := get_kkl_quantity(p_inventory_item_id,
 
                                   l_unit_qty,
 
                                   p_transaction_uom);
 
    get_factory_id(l_lot_number, 0, p_transaction_date, l_factory_code);
 
    l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
    l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
  
 
    --取工厂
 
    BEGIN
 
      SELECT df.factory_id
 
        INTO l_factory_id
 
        FROM tbdw.dim_factory df
 
       WHERE substr(df.lot_number,
 
                    1,
 
                    decode(instr(df.lot_number, '.'),
 
                           0,
 
                           length(df.lot_number),
 
                           instr(df.lot_number, '.') - 1)) = l_factory_code
 
         AND rownum = 1
 
       ORDER BY lot_number;
 
    EXCEPTION
 
      WHEN no_data_found THEN
 
        l_factory_id := -99;
 
      WHEN OTHERS THEN
 
        dbms_output.put_line(l_factory_code);
 
        raise_application_error(-20001, l_factory_code);
 
    END;
 
  
 
    --取区域
 
    /*BEGIN
 
      --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
      SELECT drs.secondary_region_id
 
        INTO l_secondary_region_id
 
        FROM dim_region_secondary drs, erps.ra_territories rt
 
       WHERE to_char(drs.secondary_region_src_id) = rt.attribute14
 
         AND rt.territory_id = p_site_id;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        l_secondary_region_id := NULL;
 
    END;*/
 
  
 
    /*IF p_source_site = 'OOD' THEN*/
 
    BEGIN
 
      --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
      SELECT dcs.customer_site_id
 
        INTO l_site_id
 
        FROM dim_customer_site dcs
 
       WHERE dcs.customer_site_src_id = p_site_id;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        l_site_id := NULL;
 
    END;
 
    /*END IF;*/
 
  
 
    --取日期
 
    l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
  
 
    --取品种
 
    BEGIN
 
      SELECT p.product_id
 
        INTO l_product_id
 
        FROM tbdw.dim_product p
 
       WHERE p.product_src_id = p_inventory_item_id;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        l_product_id := NULL;
 
    END;
 
  
 
    --取客户
 
    BEGIN
 
      SELECT dc.customer_id
 
        INTO l_customer_id
 
        FROM dim_customer dc
 
       WHERE dc.customer_src_id = p_customer_id;
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
        l_customer_id := NULL;
 
    END;
 
  
 
    --判段FOB的取值
 
    /*BEGIN
 
      SELECT COUNT(1)
 
      INTO l_exist_fob
 
        FROM  erps.bsm_customer_mapping bcm
 
               WHERE bcm.customer_id = p_customer_id
 
                 AND bcm.primary_customer_id IN (12264, 11743, 11564);
 
    EXCEPTION
 
      WHEN OTHERS THEN
 
         l_fob_code :=NULL;
 
    END;
 
    
 
    IF l_exist_fob = 0 THEN
 
       l_fob_code :=NULL;
 
    ELSE
 
       l_fob_code := p_fob_code;
 
    END IF;*/
 
    --将数据插入目标表
 
    /*查找是否存在，存在则更新，不存在就插入*/
 
    SELECT COUNT(1)
 
      INTO l_count
 
      FROM tbdw.fact_fob_prod_delivery fcp
 
     WHERE fcp.source_code = p_source_table
 
       AND fcp.source_id = p_source_id;
 
  
 
    IF l_count = 0 THEN
 
      INSERT INTO tbdw.fact_fob_prod_delivery
 
        (source_id,
 
         source_code,
 
         day_id,
 
         product_id,
 
         customer_id,
 
         customer_site_id,
 
         factory_id,
 
         org_id,
 
         transaction_type_id,
 
         delivery_box_qty,
 
         delivery_unit_qty,
 
         selling_amount,
 
         list_amount,
 
         last_update_date,
 
         fob_code)
 
      VALUES
 
        (p_source_id,
 
         p_source_table,
 
         l_day_id,
 
         l_product_id,
 
         l_customer_id,
 
         l_site_id,
 
         l_factory_id,
 
         p_org_id,
 
         p_transaction_type_id,
 
         l_unit_qty,
 
         l_kkl_qty,
 
         l_selling_amount,
 
         l_list_amount,
 
         p_last_update_date,
 
         p_fob_code);
 
    ELSE
 
      UPDATE tbdw.fact_fob_prod_delivery
 
         SET day_id              = l_day_id,
 
             product_id          = l_product_id,
 
             customer_id         = l_customer_id,
 
             customer_site_id    = l_site_id,
 
             factory_id          = l_factory_id,
 
             org_id              = p_org_id,
 
             transaction_type_id = p_transaction_type_id,
 
             delivery_box_qty    = l_unit_qty,
 
             delivery_unit_qty   = l_kkl_qty,
 
             selling_amount      = l_selling_amount,
 
             list_amount         = l_list_amount,
 
             last_update_date    = p_last_update_date,
 
             fob_code            = p_fob_code
 
       WHERE source_code = p_source_table
 
         AND source_id = p_source_id;
 
    END IF;
 
  
 
    COMMIT;
 
    /*END IF;*/
 
  END insert_fob;
 

 
  /*  PROCEDURE insert_fob(p_site_id              IN NUMBER,
 
                       p_transaction_date     IN DATE,
 
                       p_inventory_item_id    IN NUMBER,
 
                       p_area_type            IN VARCHAR2,
 
                       p_customer_id          IN NUMBER,
 
                       p_org_id               IN NUMBER,
 
                       p_organization_id      IN NUMBER,
 
                       p_source_id            IN NUMBER,
 
                       p_source_table         IN VARCHAR2,
 
                       p_transaction_quantity IN NUMBER,
 
                       p_transaction_uom      IN VARCHAR2,
 
                       p_unit_selling_price   IN NUMBER,
 
                       p_unit_list_price      IN NUMBER,
 
                       p_lot_id               IN NUMBER,
 
                       p_opm_item_id          IN NUMBER,
 
                       p_lookup_type          IN VARCHAR2,
 
                       p_transaction_type_id  IN NUMBER,
 
                       p_factor               IN NUMBER,
 
                       p_last_update_date     IN DATE ) IS
 
    l_unit_qty             NUMBER;
 
    l_kkl_qty              NUMBER;
 
    l_secondary_region_id  NUMBER;
 
    l_day_id               NUMBER;         
 
    l_product_id           NUMBER;
 
    l_customer_id          NUMBER;
 
    l_count                NUMBER; 
 
    l_region_id            NUMBER;
 
  BEGIN
 
    \*IF p_source_table = 'MMT' THEN*\
 
      l_unit_qty := p_transaction_quantity;
 
      
 
      l_kkl_qty  := dw_load_delivery_etl.get_kkl_quantity(p_item_id      => p_inventory_item_id,
 
                                                          p_quantity     => l_unit_qty,
 
                                                          p_quantity_uom => p_transaction_uom);
 
       
 
      --将数据插入目标表
 
      --取区域
 
      BEGIN
 
        --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
        SELECT drs.secondary_region_id
 
          INTO l_secondary_region_id
 
          FROM dim_region_secondary                 drs,
 
               erps.ra_territories                  rt
 
         WHERE to_char(drs.secondary_region_src_id) = rt.attribute14
 
           AND rt.territory_id                      = p_site_id;
 
      EXCEPTION
 
        \*WHEN no_data_found THEN
 
          dbms_output.put_line('Site id '||p_site_id||' not exists.');
 
          raise_application_error(-20001, 'Site id '||p_site_id||' not exists.');
 
        WHEN OTHERS THEN 
 
          dbms_output.put_line(SQLERRM);
 
          raise_application_error(-20001, SQLERRM);*\
 
        WHEN OTHERS THEN 
 
          l_secondary_region_id := NULL;
 
      END;
 
     
 
    --取日期
 
    l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
    
 
    --取品种
 
    BEGIN
 
      SELECT p.product_id
 
        INTO l_product_id
 
        FROM tbdw.dim_product p
 
       WHERE p.product_src_id = p_inventory_item_id;
 
    EXCEPTION
 
      \*WHEN no_data_found THEN
 
        dbms_output.put_line('Item id '||p_inventory_item_id||' not exists.');
 
        raise_application_error(-20001, 'Item id '||p_inventory_item_id||' not exists.');
 
      WHEN OTHERS THEN 
 
        dbms_output.put_line(SQLERRM);
 
        raise_application_error(-20001, SQLERRM);*\
 
      WHEN OTHERS THEN 
 
        l_product_id := NULL;
 
    END;
 
    
 
    --取客户
 
    BEGIN
 
      SELECT c.customer_id
 
        INTO l_customer_id
 
        FROM tbdw.dim_customer c
 
       WHERE c.customer_src_id = p_customer_id;
 
    EXCEPTION
 
      \*WHEN no_data_found THEN
 
        dbms_output.put_line('Customer id '||p_customer_id||' not exists.');
 
        raise_application_error(-20001, 'Customer id '||p_customer_id||' not exists.');
 
      WHEN OTHERS THEN 
 
        dbms_output.put_line(SQLERRM);
 
        raise_application_error(-20001, SQLERRM);*\
 
      WHEN OTHERS THEN 
 
        l_customer_id := NULL;
 
    END;
 
     
 
    \*--取区域
 
    IF p_area_type = 'QUBAN' THEN
 
      BEGIN
 
        SELECT dcs.region_id
 
          INTO l_region_id
 
          FROM dim_customer_site        dcs
 
         WHERE dcs.customer_site_src_id = p_site_id;
 
      EXCEPTION
 
        \*WHEN no_data_found THEN
 
          dbms_output.put_line('Site id '||p_site_id||' not exists.');
 
          raise_application_error(-20001, 'Site id '||p_site_id||' not exists.');
 
        WHEN OTHERS THEN 
 
          dbms_output.put_line(SQLERRM);
 
          raise_application_error(-20001, SQLERRM);*\
 
        WHEN OTHERS THEN 
 
          l_region_id := NULL;
 
      END; 
 
    ELSIF p_area_type = 'HN' THEN
 
      l_region_id := 164323;
 
    ELSIF p_area_type = 'LN' THEN
 
      l_region_id := 2246;
 
    ELSE
 
      BEGIN
 
        SELECT dra.region_id
 
          INTO l_region_id
 
          FROM dim_region_area                  dra,
 
               erps.hr_all_organization_units   hou,               
 
               stgs.stg_ou_area_v               area
 
         WHERE dra.region_name_alt              = area.area_name
 
           AND hou.attribute17                  = area.area_code(+)
 
           AND hou.organization_id              = p_org_id
 
           AND rownum                           = 1;
 
      EXCEPTION
 
        \*WHEN no_data_found THEN
 
          dbms_output.put_line('Org id '||p_org_id||' does not have region.');
 
          raise_application_error(-20001, 'Org id '||p_org_id||' does not have region.');
 
        WHEN OTHERS THEN 
 
          dbms_output.put_line(SQLERRM);
 
          raise_application_error(-20001, SQLERRM);*\
 
        WHEN OTHERS THEN 
 
          l_region_id := NULL;
 
      END;         
 
    END IF;
 
    
 
    IF l_region_id IS NULL THEN
 
      IF p_org_id = 8557 THEN 
 
        l_region_id := 164608; --四川
 
      ELSIF p_org_id = 1374 THEN
 
        l_region_id := 164531;  --北京
 
      END IF;
 
    END IF;*\
 
    
 
    \*查找是否存在，存在则更新，不存在就插入*\
 
    SELECT COUNT(1) 
 
      INTO l_count
 
      FROM tbdw.fact_fob_prod_delivery fcp
 
     WHERE fcp.source_code              = p_source_table
 
       AND fcp.source_id                = p_source_id;
 
     
 
    IF l_count = 0 THEN
 
      INSERT INTO tbdw.fact_fob_prod_delivery
 
        (source_id,
 
         source_code,
 
         day_id,
 
         product_id,
 
         customer_id,
 
         secondary_region_id,
 
         delivery_box_qty,
 
         delivery_unit_qty,
 
         last_update_date)
 
      VALUES
 
        (p_source_id,
 
         p_source_table,
 
         l_day_id,
 
         l_product_id,
 
         l_customer_id,
 
         l_secondary_region_id,
 
         l_unit_qty,
 
         l_kkl_qty,
 
         p_last_update_date);
 
    ELSE
 
      UPDATE tbdw.fact_fob_prod_delivery
 
         SET day_id              = l_day_id,
 
             product_id          = l_product_id,
 
             customer_id         = l_customer_id,
 
             secondary_region_id = l_secondary_region_id,
 
             delivery_box_qty    = l_unit_qty,
 
             delivery_unit_qty   = l_kkl_qty
 
       WHERE source_code         = p_source_table
 
         AND source_id           = p_source_id;
 
    END IF;
 
     \*END IF;*\
 
    COMMIT;
 
  END insert_fob;*/
 

 
  PROCEDURE purge_deleted_data IS
 
    l_count NUMBER;
 
  BEGIN
 
    -- 1. lock日志记录
 
    UPDATE soau.j$mtl_material_transactions mmt
 
       SET mmt.jrn_consumed = 1
 
     WHERE mmt.jrn_subscriber = 'STG-DW';
 
  
 
    UPDATE soau.j$oe_order_lines_all ool
 
       SET ool.jrn_consumed = 1
 
     WHERE ool.jrn_subscriber = 'STG-DW';
 
  
 
    -- 2.检查是否存在删除的日志
 
    SELECT COUNT(1)
 
      INTO l_count
 
      FROM soau.j$mtl_material_transactions mmt
 
     WHERE mmt.jrn_consumed = 1
 
       AND mmt.jrn_subscriber = 'STG-DW'
 
       AND mmt.jrn_flag = 'D';
 
  
 
    IF l_count > 0 THEN
 
      -- 删除事实表数据
 
      DELETE FROM fact_prod_delivery fpd
 
       WHERE fpd.source_code = 'MMT'
 
         AND EXISTS
 
       (SELECT 1
 
                FROM soau.j$mtl_material_transactions mmt
 
               WHERE mmt.transaction_id = fpd.source_id
 
                 AND mmt.jrn_subscriber = 'STG-DW'
 
                 AND mmt.jrn_consumed = 1
 
                 AND NOT EXISTS
 
               (SELECT 1
 
                        FROM erps.mtl_material_transactions mmt2
 
                       WHERE mmt2.transaction_id = mmt.transaction_id));
 
    END IF;
 
  
 
    SELECT COUNT(1)
 
      INTO l_count
 
      FROM soau.j$oe_order_lines_all ool
 
     WHERE ool.jrn_consumed = 1
 
       AND ool.jrn_subscriber = 'STG-DW'
 
       AND ool.jrn_flag = 'D';
 
  
 
    IF l_count > 0 THEN
 
      DELETE FROM fact_prod_delivery fpd
 
       WHERE fpd.source_code IN ('OPM', 'OOL', 'OTHERS')
 
         AND EXISTS
 
       (SELECT 1
 
                FROM soau.j$oe_order_lines_all ool
 
               WHERE ool.line_id = fpd.source_id
 
                 AND ool.jrn_subscriber = 'STG-DW'
 
                 AND ool.jrn_consumed = 1
 
                 AND NOT EXISTS
 
               (SELECT 1
 
                        FROM erps.oe_order_lines_all ool2
 
                       WHERE ool2.line_id = ool.line_id));
 
      
 
      DELETE FROM fact_fob_prod_delivery fpd
 
       WHERE EXISTS
 
       (SELECT 1
 
                FROM soau.j$oe_order_lines_all ool
 
               WHERE ool.line_id = fpd.source_id
 
                 AND ool.jrn_subscriber = 'STG-DW'
 
                 AND ool.jrn_consumed = 1
 
                 AND NOT EXISTS
 
               (SELECT 1
 
                        FROM erps.oe_order_lines_all ool2
 
                       WHERE ool2.line_id = ool.line_id));
 
    END IF;
 
  
 
    -- 3. 删除日志表
 
    DELETE FROM soau.j$mtl_material_transactions mmt
 
     WHERE mmt.jrn_consumed = 1
 
       AND mmt.jrn_subscriber = 'STG-DW';
 
  
 
    DELETE FROM soau.j$oe_order_lines_all ool
 
     WHERE ool.jrn_consumed = 1
 
       AND ool.jrn_subscriber = 'STG-DW';
 
  END purge_deleted_data;
 
/* 
  *得到销售单位当期的增长率 
  */
 
  function get_increase_rate(p_month_id number, p_region_id number)
    return number is
    l_rate          number := 0;
    l_cur_quantity  number := 0;
    l_last_quantity number := 0;
  begin
  --
    select sum(p0.delivery_unit_qty)
      into l_cur_quantity
      from fact_prod_delivery_global_mv p0, dim_region_zone_v drz
     where 1 = 1
       and drz.REGION_ID = p_region_id
       and drz.ZONE_ID = p0.zone_id
       and p0.month_id = p_month_id;
       --
    select sum(p0.delivery_unit_qty)
      into l_last_quantity
      from fact_prod_delivery_global_mv p0,
           dim_region_zone_v            drz
     where 1 = 1
       and drz.REGION_ID = p_region_id
       and drz.ZONE_ID = p0.zone_id
       and p0.month_id = p_month_id-100;
       --
    if (nvl(l_last_quantity, 0) <> 0) then
      l_rate := (nvl(l_cur_quantity, 0) / l_last_quantity) -1;
    else
      l_rate := 0;
    end if;
    return l_rate;
  exception
    when others then
      return 0;
  end get_increase_rate;
 
/* 
  *得到销售单位当期的增长率 --YTD
  */
 
  function get_ytd_increase_rate(p_month_id number, p_region_id number)
    return number is
    l_rate          number := 0;
    l_cur_quantity  number := 0;
    l_last_quantity number := 0;
  begin
  --
    select sum(p0.delivery_unit_qty)
      into l_cur_quantity
      from fact_prod_delivery_global_mv p0,
           dim_region_zone_v drz,
           dim_time_gl_month dtg1,
           dim_time_gl_month dtg2
     where 1 = 1
       --and drz.REGION_ID = p_region_id
       and drz.ZONE_ID = p0.zone_id
       and drz.REGION_NAME<>'银麦'
       and p0.month_id =dtg2.gl_month_id
       and dtg2.gl_month_id<=dtg1.gl_month_id
       and dtg2.year_id=dtg1.year_id
       and dtg1.gl_month_id= p_month_id;
       --
    select sum(p0.delivery_unit_qty)
      into l_last_quantity
      from fact_prod_delivery_global_mv p0,
           dim_region_zone_v            drz,
           dim_time_gl_month dtg1,
           dim_time_gl_month dtg2
     where 1 = 1
       --and drz.REGION_ID = p_region_id
       and drz.ZONE_ID = p0.zone_id
       and drz.REGION_NAME<>'银麦'
       and p0.month_id =dtg2.gl_month_id
       and dtg2.gl_month_id<=dtg1.gl_month_id
       and dtg2.year_id=dtg1.year_id
       and dtg1.gl_month_id= p_month_id-100;
       --
    if (nvl(l_last_quantity, 0) <> 0) then
      l_rate := (nvl(l_cur_quantity, 0) / l_last_quantity) -1;
    else
      l_rate := 0;
    end if;
    return l_rate;
  exception
    when others then
      return 0;
  end get_ytd_increase_rate;
 
  PROCEDURE main IS
 
  BEGIN
 
  
 
    --1.根据时间戳先删除
 
     DELETE FROM tbdw.fact_prod_delivery fpd
 
     WHERE fpd.last_update_date >= g_timespan_date
 
       AND fpd.source_code IN ('MMT', 'OPM', 'OTHERS', 'OOL');
 
    
 
    DELETE FROM tbdw.fact_fob_prod_delivery ffpd
 
     WHERE ffpd.last_update_date >= g_timespan_date;
 
  
 
    FOR r_mmt IN ( --2010之后营销中心
 
                  SELECT /*+ CARDINALITY(mmt 1)*/
 
                   ool.org_id org_id,
 
                    ool.line_id,
 
                    --ool.actual_shipment_date,
 
                    mmt.transaction_date actual_shipment_date,
 
                    mmt.inventory_item_id,
 
                    /*ool.ship_to_org_id site_id,*/
 
                    ooh.invoice_to_org_id site_id,
 
                    ool.unit_selling_price,
 
                    ool.unit_list_price,
 
                    ooh.sold_to_org_id customer_id,
 
                    mmt.transaction_type_id,
 
                    lot.transaction_quantity * (-1) transaction_quantity,
 
                    mmt.organization_id,
 
                    mmt.transaction_uom,
 
                    /*mmt.transaction_id,*/
 
                    mmt.last_update_date,
 
                    -mmt.transaction_id source_id,
 
                    (CASE
 
                      WHEN ooh.header_id IN
 
                           (7062417, 7062480, 7068597, 7068601, 7105221) THEN
 
                       'OTHERS'
 
                      ELSE
 
                       'MMT'
 
                    END) source_code,
 
                    decode(ool.org_id, 9517, 'QUBAN', 3314, 'QUBAN', 'OTHERS') area_type,
 
                    NULL lot_id,
 
                    NULL opm_item_id,
 
                    flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                          erps.oe_order_lines_all          ool,
 
                          erps.oe_order_headers_all        ooh,
 
                          erps.mtl_material_transactions   mmt,
 
                          erps.mtl_parameters              mp,
 
                          erps.fnd_lookup_values           flv2,
 
                          erps.oe_transaction_types_all    ott
 
                   WHERE decode(ool.org_id, 9517, ott.attribute15, '成品酒') =
 
                         '成品酒'
 
                     AND ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 9517
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                        --促销品广告品不需要
 
                        --AND mmt.organization_id != 9537
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND mmt.last_update_date >= g_timespan_date
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ooh.invoice_to_org_id
 
                             AND d.region_id = 3224) AND
                             mmt.transaction_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
                  --龙东省办于201212重新上线，销量取营销中心下订单出库信息，这之前还是取兴凯湖销量
                  --add by parton@hand 2010-3-10
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         --ool.actual_shipment_date,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         /*ool.ship_to_org_id            site_id,*/
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         /*itp.trans_id                  transaction_id,*/
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         decode(ool.org_id,
 
                                9517,
 
                                'QUBAN',
 
                                3314,
 
                                'QUBAN',
 
                                'OTHERS') area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 9517
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                        --促销品广告品不需要
 
                        --AND mmt.organization_id != 9537
 
                     AND itp.last_update_date >= g_timespan_date
 
                        --add by parton@hand 2010-3-10
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND decode(ool.org_id, 9517, ott.attribute15, '成品酒') =
 
                         '成品酒'
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ooh.invoice_to_org_id
 
                             AND d.region_id = 3224) AND
                             itp.trans_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
                      --龙东省办于201212重新上线，销量取营销中心下订单出库信息，这之前还是取兴凯湖销量
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         --ool.actual_shipment_date,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         /*ool.ship_to_org_id site_id,*/
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         /*itp.trans_id                  transaction_id,*/
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         decode(ool.org_id,
 
                                9517,
 
                                'QUBAN',
 
                                3314,
 
                                'QUBAN',
 
                                'OTHERS') area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 9517
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                        --add by parton@hand 2010-3-10
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND decode(ool.org_id, 9517, ott.attribute15, '成品酒') =
 
                         '成品酒'
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ool.invoice_to_org_id
 
                             AND d.region_id = 3224) AND
                             itp.trans_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
                  --龙东省办于201212重新上线，销量取营销中心下订单出库信息，这之前还是取兴凯湖销量
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ool.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ool.sold_to_org_id customer_id,
 
                         NULL transaction_type_id,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) transaction_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         /*ool.shipping_quantity_uom transaction_uom,*/ --modify by betty.he 2010.7.31
 
                         ool.order_quantity_uom transaction_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'LN' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ooh,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE ooh.org_id = 9517 -- cux_hb_common_pub.get_hb_org_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ooh.header_id IN
 
                         (7062417, 7062480, 7068597, 7068601, 7105221)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.inventory_item_id = msib.inventory_item_id
 
                     AND ool.ship_from_org_id = msib.organization_id
 
                     AND msib.inventory_item_id = mic.inventory_item_id(+)
 
                     AND mic.organization_id(+) = 113
 
                     AND mic.category_set_id(+) = 1100000061 --营销中心成品分类
 
                        --  AND msi.organization_id = mic.organization_id(+)
 
                     AND mic.category_id = mc.category_id(+)
 
                     AND ooh.order_type_id = trans.transaction_type_id
 
                     AND trans.attribute15 = '成品酒'
 
                        /*AND nvl(rt.attribute13, 1000) =
 
                                                                                                                                                                                                                                                                         nvl(fnd_profile.value('BSM_SEGMENT1_CODE'),
 
                                                                                                                                                                                                                                                                             nvl(rt.attribute13, 1000))*/
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ool.invoice_to_org_id
 
                             AND d.region_id = 3224) AND
                             decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
                       --龙东省办于201212重新上线，销量取营销中心下订单出库信息，这之前还是取兴凯湖销量
                  UNION ALL
 
                  --华南营销
 
         SELECT hn.org_id,
 
                hn.source_id line_id,
 
                to_date(hn.transaction_date, 'yyyymmdd') actual_shipment_date,
 
                hn.item_id inventory_item_id,
 
                /*nvl(ool.invoice_to_org_id,-1) site_id,*/
 
                nvl(hn.site_use_id,
 
                    nvl((SELECT d.site_use_id
 
                          FROM erps.hz_parties             a,
 
                               erps.hz_cust_accounts       b,
 
                               erps.hz_cust_acct_sites_all c,
 
                               erps.hz_cust_site_uses_all  d
 
                         WHERE b.cust_account_id = hn.customer_id
 
                           AND a.party_id = b.party_id
 
                           AND b.cust_account_id = c.cust_account_id
 
                           AND a.party_type = 'ORGANIZATION'
 
                           AND c.org_id = hn.org_id
 
                           AND c.cust_acct_site_id =
 
                               nvl(hn.attribute3, c.cust_acct_site_id)
 
                              --update by liugd for 在事务处理历史纪录弹性域中选择客户地址，来限制销量统计的区域
 
                           AND c.org_id = d.org_id
 
                           AND c.cust_acct_site_id = d.cust_acct_site_id
 
                           AND d.site_use_code = 'BILL_TO'
 
                           AND ((hn.attribute3 IS NULL AND
 
                               d.primary_flag = 'Y') OR
 
                               hn.attribute3 IS NOT NULL)
 
                           AND d.status = 'A'
 
                           AND rownum = 1),
 
                        (SELECT d.site_use_id
 
                           FROM erps.hz_parties             a,
 
                                erps.hz_cust_accounts       b,
 
                                erps.hz_cust_acct_sites_all c,
 
                                erps.hz_cust_site_uses_all  d
 
                          WHERE b.cust_account_id = hn.customer_id
 
                            AND a.party_id = b.party_id
 
                            AND b.cust_account_id = c.cust_account_id
 
                            AND a.party_type = 'ORGANIZATION'
 
                            AND c.org_id = hn.org_id
 
                            AND c.org_id = d.org_id
 
                            AND c.cust_acct_site_id = d.cust_acct_site_id
 
                            AND d.site_use_code = 'BILL_TO'
 
                            AND d.primary_flag = 'Y'
 
                            AND d.status = 'A'
 
                            AND rownum = 1))) site_id,
 
                ool.unit_selling_price,
 
                ool.unit_list_price,
 
                nvl(hn.customer_id, ool.sold_to_org_id) customer_id,
 
                NULL transaction_type_id,
 
                hn.transaction_qty transaction_quantity,
 
                hn.organization_id,
 
                hn.item_uom transaction_uom,
 
                hn.last_update_date,
 
                hn.source_id source_id,
 
                (CASE
 
                  WHEN ool.line_id IS NOT NULL AND
 
                       hn.site_use_id IS NOT NULL THEN
 
                   'OOL'
 
                  ELSE
 
                   'MMT'
 
                END) source_code,
 
                'HN' area_type,
 
                NULL lot_id,
 
                NULL opm_item_id,
 
                NULL lookup_type
 
           FROM erps.oe_order_lines_all ool,
 
                (select ORDER_NUMBER,
 
                        ORGANIZATION_ID,
 
                        SOURCE_ID,
 
                        ITEM_ID,
 
                        ITEM_NO,
 
                        ITEM_DESC,
 
                        ITEM_UOM,
 
                        sum(TRANSACTION_QTY) transaction_qty,
 
                        SITE_USE_ID,
 
                        CUSTOMER_ID,
 
                        TRANSACTION_DATE,
 
                        ORG_ID,
 
                        LAST_UPDATE_DATE,
 
                        ATTRIBUTE3
 
                   from erps.xxcn_sales_data_b
 
                  group by ORDER_NUMBER,
 
                           ORGANIZATION_ID,
 
                           SOURCE_ID,
 
                           ITEM_ID,
 
                           ITEM_NO,
 
                           ITEM_DESC,
 
                           ITEM_UOM,
 
                           SITE_USE_ID,
 
                           CUSTOMER_ID,
 
                           TRANSACTION_DATE,
 
                           ORG_ID,
 
                           LAST_UPDATE_DATE,
 
                           ATTRIBUTE3) hn,--用以上子查询代替erps.xxcn_sales_data_b 2011-03-14 by xieyt
 
                erps.mtl_item_categories mic,
 
                erps.mtl_categories_b mc,
 
                erps.mtl_system_items_b msib
 
         --WHERE HN.OU_ID = NVL(P_ORG_ID, HN.OU_ID)
 
          WHERE ool.line_id(+) = hn.source_id
 
            AND hn.item_id = msib.inventory_item_id(+)
 
            AND msib.organization_id(+) = 113
 
            AND msib.inventory_item_id = mic.inventory_item_id(+)
 
            AND msib.organization_id = mic.organization_id(+)
 
            AND mic.category_set_id(+) = 1100000061
 
            AND mic.category_id = mc.category_id(+)
 
            AND hn.last_update_date >= g_timespan_date
 
            AND hn.item_no LIKE '1%'
 
                  
 
                  UNION ALL
 
                  --甘肃销售
 
                  SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         /*ool.invoice_to_org_id site_id,*/ --modify by betty.he 2010.7.31
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         /*ool.shipping_quantity_uom,*/ --modify by betty.he 2010.7.31
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND trans.transaction_type_id = ood.order_type_id
 
                        /*AND jrs.org_id = ood.org_id ----- add by Chris Huang*/
 
                     AND ood.org_id = /*nvl(*/
 
                         4237 /*, ood.org_id)*/
 
                     AND ood.header_id = ool.header_id
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 4237
                     
                     UNION ALL
                     --湖北销售 added by guojuan 2012/4/5
                     --begin
                     SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND trans.transaction_type_id = ood.order_type_id
 
                     AND ood.org_id = 17942 
 
                     AND ood.header_id = ool.header_id
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 17942
                     --end;
                     
                 UNION ALL
                     --湖南销售 added by guojuan 2012/6/29
                     --begin
                     SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND trans.transaction_type_id = ood.order_type_id
 
                     AND ood.org_id = 18483 
 
                     AND ood.header_id = ool.header_id
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 18483
                     --end;
                     
                     UNION ALL
                     --安徽销售 added by guojuan 2012/7/31
                     --begin
                     SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND trans.transaction_type_id = ood.order_type_id
 
                     AND ood.org_id = 19086 
 
                     AND ood.header_id = ool.header_id
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 19086
                     --end;
                     
                  UNION ALL
                     --上海销售重新上线，原来的上海销售改名为上海营销 added by guojuan 2012/10/12
                     --begin
                     SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND trans.transaction_type_id = ood.order_type_id
 
                     AND ood.org_id = 20106 
 
                     AND ood.header_id = ool.header_id
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 20106
                     --end;
                UNION ALL
                --上海苏南 added by guojuan 2012/11/30
                --begin
                     SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_rcv_date(ool.line_id, ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND trans.transaction_type_id = ood.order_type_id
 
                     AND ood.org_id = 20346 
 
                     AND ood.header_id = ool.header_id
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 20346
                     --end;
                  
 
                  UNION ALL
 
                  --北方销售
 
                  SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         /*ool.invoice_to_org_id site_id,*/ --modify by betty.he 2010.7.31
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         /*ool.shipping_quantity_uom,*/
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_transaction_types_all trans,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND trans.transaction_type_id(+) = ood.order_type_id
                     --updaed by guojuan 2011/12/14 北销订单优化，订单类型弹性域“是否统计销量”由attribute13改为attribute6
                     --begin
                     --AND nvl(trans.attribute13, 'Y') = 'Y'
                     AND nvl(trans.attribute6, 'Y') = 'Y'
                     --end;
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.organization_id(+) = 113
 
                     AND msib.inventory_item_id(+) = ool.inventory_item_id
 
                     AND ood.sold_to_org_id NOT IN
 
                         (56136, 120515, 137322, 60735, 60763, 118081)
 
                     AND ood.org_id = 1374
 
                     AND ood.header_id = ool.header_id
 
                     AND ood.cancelled_flag <> 'Y'
 
                     AND ool.cancelled_flag <> 'Y'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 1374
 
                  
 
                  UNION ALL
 
                  -- 华东营销
 
                  SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         /*ool.invoice_to_org_id site_id,*/ --modify by betty.he 2010.7.31
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         /*ool.shipping_quantity_uom,*/ --modify by betty.he 2010.7.31
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_transaction_types_all trans,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.organization_id = 113
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.inventory_item_id = ool.inventory_item_id
 
                     AND ood.sold_to_org_id NOT IN (28106, 90960, 120696)
 
                     AND ood.order_type_id = trans.transaction_type_id(+)
 
                     AND ood.org_id IN
 
                         (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                     AND ood.header_id = ool.header_id
 
                     AND ood.cancelled_flag <> 'Y'
 
                     AND ool.cancelled_flag <> 'Y'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id IN
 
                         (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                  
 
                  UNION ALL
 
                  --东南营销
 
                  SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         /*ool.invoice_to_org_id site_id,*/ --modify by betty.he 2010.7.31
 
                         ood.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ood.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         /*ool.shipping_quantity_uom,*/ --modify by betty.he 2010.7.31
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_transaction_types_all trans,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_order_headers_all     ood,
 
                         erps.oe_order_lines_all       ool
 
                   WHERE decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                     AND mic.organization_id(+) = msib.organization_id
 
                     AND msib.segment1 LIKE '1%'
 
                     AND msib.organization_id(+) = 113
 
                     AND msib.inventory_item_id(+) = ool.inventory_item_id
 
                     AND trans.transaction_type_id(+) = ood.order_type_id
 
                     AND ood.sold_to_org_id NOT IN (61677, 137976) -- added by jiangyq
 
                     AND ood.org_id = 454
 
                     AND ood.header_id = ool.header_id
 
                     AND ood.org_id = ool.org_id
 
                     AND ood.cancelled_flag <> 'Y'
 
                     AND ool.cancelled_flag <> 'Y'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND ool.org_id = 454
 
                  
 
                  UNION ALL
 
                  -- 西南营销
 
                  
 
                  SELECT l.org_id,
 
                         l.line_id,
 
                         decode(ott.order_category_code,
 
                                'RETURN',
 
                                get_return_date_xn(l.header_id,
 
                                                   l.line_id,
 
                                                   l.ship_from_org_id),
 
                                nvl(l.actual_shipment_date, l.fulfillment_date)) actual_shipment_date,
 
                         l.inventory_item_id,
 
                         /*l.invoice_to_org_id site_id,*/
 
                         h.ship_to_org_id site_id,
 
                         l.unit_selling_price,
 
                         l.unit_list_price,
 
                         h.sold_to_org_id customer_id,
 
                         NULL,
 
                         nvl(l.invoiced_quantity, 0) shipped_quantity,
 
                         l.ship_from_org_id organization_id,
 
                         /*l.shipping_quantity_uom,*/ --modify by betty.he 2010.7.31
 
                         l.order_quantity_uom,
 
                         l.last_update_date,
 
                         l.line_id source_id,
 
                         'OOL' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     h,
 
                         erps.oe_order_lines_all       l,
 
                         erps.mtl_system_items_b       msi,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE decode(ott.order_category_code,
 
                                'RETURN',
 
                                get_return_date_xn(l.header_id,
 
                                                   l.line_id,
 
                                                   l.ship_from_org_id),
 
                                nvl(l.actual_shipment_date, l.fulfillment_date)) IS NOT NULL
 
                     AND ott.transaction_type_id = h.order_type_id
 
                     AND ott.org_id = h.org_id
 
                     AND mc.category_id(+) = mic.category_id
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.inventory_item_id(+) = msi.inventory_item_id
 
                     AND mic.organization_id(+) = msi.organization_id
 
                     AND msi.organization_id = 113
 
                     AND msi.segment1 LIKE '1%'
 
                     AND msi.inventory_item_id = l.inventory_item_id
 
                     AND h.cancelled_flag <> 'Y'
 
                     AND h.booked_flag = 'Y'
 
                     AND h.sold_to_org_id NOT IN (95324, 95326, 95322)
 
                     AND h.header_id = l.header_id
 
                     AND h.org_id IN (8557, 1874, 1895)
 
                     AND l.booked_flag = 'Y'
 
                     AND l.cancelled_flag <> 'Y'
 
                     AND l.last_update_date >= g_timespan_date
 
                     AND l.org_id IN (8557, 1874, 1895)
 
                  UNION ALL
 
                  --2009之前营销中心
 
                  SELECT decode(ool.org_id, 3314, 9517, ool.org_id) org_id,
 
                         ool.line_id,
 
                         decode(ott.order_category_code,
 
                                'RETURN',
 
                                get_return_date(ool.header_id,
 
                                                ool.line_id,
 
                                                ool.ship_from_org_id),
 
                                nvl(trunc(ool.actual_shipment_date),
 
                                    trunc(ool.fulfillment_date))) shipped_date,
 
                         ool.inventory_item_id,
 
                         ooh.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         ott.transaction_type_id,
 
                         nvl(ool.invoiced_quantity,
 
                             ool.shipped_quantity *
 
                             decode(ool.line_category_code, 'RETURN', -1, 1)) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         decode(ool.org_id, 3314, 'QUBAN', 'OTHERS') area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ooh.header_id = ool.header_id
 
                     AND ott.transaction_type_id = ooh.order_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 3314
 
                     AND ooh.booked_flag = 'Y'
 
                     AND ool.booked_flag = 'Y'
 
                     AND ool.cancelled_flag <> 'Y'
 
                     AND ooh.cancelled_flag <> 'Y' --added
 
                     AND ool.last_update_date >= g_timespan_date
 
                  UNION ALL
 
                  --新科=青啤一厂+青啤二厂
 
                  /*SELECT \*+ CARDINALITY(mmt 1)*\
 
                                                                         ool.org_id,
 
                                                                         ool.line_id,
 
                                                                         --ool.actual_shipment_date,
 
                                                                         mmt.transaction_date actual_shipment_date,
 
                                                                         mmt.inventory_item_id,
 
                                                                         ool.ship_to_org_id site_id,
 
                                                                         ool.unit_selling_price,
 
                                                                         ool.unit_list_price,
 
                                                                         ooh.sold_to_org_id customer_id,
 
                                                                         mmt.transaction_type_id,
 
                                                                         lot.transaction_quantity * (-1) transaction_quantity,
 
                                                                         mmt.organization_id,
 
                                                                         mmt.transaction_uom,
 
                                                                         \*mmt.transaction_id,*\
 
                                                                         mmt.last_update_date,
 
                                                                         -mmt.transaction_id source_id,
 
                                                                         (CASE
 
                                                                           WHEN ooh.header_id IN
 
                                                                                (7062417, 7062480, 7068597, 7068601, 7105221) THEN
 
                                                                            'OTHERS'
 
                                                                           ELSE
 
                                                                            'MMT'
 
                                                                         END) source_code,
 
                                                                         decode(ool.org_id, 226, 'TB1', 227, 'TB2', 'OTHERS') area_type,
 
                                                                         NULL lot_id,
 
                                                                         NULL opm_item_id,
 
                                                                         flv2.lookup_type
 
                                                                          FROM erps.mtl_transaction_lot_numbers lot,
 
                                                                               erps.oe_order_lines_all          ool,
 
                                                                               erps.oe_order_headers_all        ooh,
 
                                                                               erps.mtl_material_transactions   mmt,
 
                                                                               erps.mtl_parameters              mp,
 
                                                                               erps.fnd_lookup_values           flv2,
 
                                                                               erps.oe_transaction_types_all    ott
 
                                                                         WHERE ott.transaction_type_id = ooh.order_type_id
 
                                                                           AND ooh.header_id = ool.header_id
 
                                                                           AND ool.ordered_item LIKE '1%'
 
                                                                           AND ool.org_id IN (226, 227)
 
                                                                           AND ool.line_id = mmt.trx_source_line_id
 
                                                                           AND mmt.organization_id = mp.organization_id
 
                                                                           AND mmt.transaction_id = lot.transaction_id
 
                                                                           AND flv2.lookup_code(+) = mp.organization_code
 
                                                                           AND flv2.LANGUAGE(+) = 'ZHS'
 
                                                                           AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                                                                           AND mmt.transaction_type_id IN (37, 33, 15)
 
                                                                           AND mmt.last_update_date >= g_timespan_date*/
 
                  --龙东  201212之前销量
 
                  SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ott.order_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_return_date(ool.header_id,
 
                                                                     ool.line_id,
 
                                                                     ool.ship_from_org_id),
 
                                nvl(trunc(ool.actual_shipment_date),
 
                                    trunc(ool.fulfillment_date))) shipped_date,
 
                         ool.inventory_item_id,
 
                         ooh.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         ott.transaction_type_id,
 
                         nvl(ool.invoiced_quantity,
 
                             ool.shipped_quantity *
 
                             decode(ool.line_category_code, 'RETURN', -1, 1)) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'LD' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ooh.header_id = ool.header_id
 
                     AND ott.transaction_type_id = ooh.order_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 2213
 
                     AND ooh.booked_flag = 'Y'
 
                     AND ool.booked_flag = 'Y'
 
                     AND ooh.cancelled_flag <> 'Y'
 
                     AND ool.cancelled_flag <> 'Y'
 
                     AND ool.last_update_date >= g_timespan_date
                     AND decode(ott.order_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_return_date(ool.header_id,
 
                                                                     ool.line_id,
 
                                                                     ool.ship_from_org_id),
 
                                nvl(trunc(ool.actual_shipment_date),
 
                                    trunc(ool.fulfillment_date)))<to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss')
 
                  UNION ALL
 
                  --重庆200906前
 
                  SELECT ool.org_id,
 
                         ool.line_id,
 
                         decode(ott.order_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_return_date(ool.header_id,
 
                                                                     ool.line_id,
 
                                                                     ool.ship_from_org_id),
 
                                nvl(trunc(ool.actual_shipment_date),
 
                                    trunc(ool.fulfillment_date))) shipped_date,
 
                         ool.inventory_item_id,
 
                         ooh.ship_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         ott.transaction_type_id,
 
                         nvl(ool.invoiced_quantity, 0) shipped_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'CQ' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ooh.header_id = ool.header_id
 
                     AND ott.transaction_type_id = ooh.order_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 1896
 
                     AND ooh.booked_flag = 'Y'
 
                     AND ool.booked_flag = 'Y'
 
                     AND ooh.cancelled_flag <> 'Y'
 
                     AND ool.cancelled_flag <> 'Y'
 
                     AND decode(ott.order_category_code,
 
                                'RETURN',
 
                                dw_load_delivery_etl.get_return_date(ool.header_id,
 
                                                                     ool.line_id,
 
                                                                     ool.ship_from_org_id),
 
                                nvl(trunc(ool.actual_shipment_date),
 
                                    trunc(ool.fulfillment_date))) <
 
                         to_date('20090629', 'yyyymmdd')
 
                     AND ool.last_update_date >= g_timespan_date) LOOP
 
      --检查是否存在退货,取日期和销售数量
 
      insert_operation(p_site_id              => r_mmt.site_id,
 
                       p_transaction_date     => r_mmt.actual_shipment_date,
 
                       p_inventory_item_id    => r_mmt.inventory_item_id,
 
                       p_area_type            => r_mmt.area_type,
 
                       p_customer_id          => r_mmt.customer_id,
 
                       p_org_id               => r_mmt.org_id,
 
                       p_organization_id      => r_mmt.organization_id,
 
                       p_source_id            => r_mmt.source_id,
 
                       p_source_table         => r_mmt.source_code,
 
                       p_transaction_quantity => r_mmt.transaction_quantity,
 
                       p_transaction_uom      => r_mmt.transaction_uom,
 
                       p_unit_selling_price   => r_mmt.unit_selling_price,
 
                       p_unit_list_price      => r_mmt.unit_list_price,
 
                       p_lot_id               => r_mmt.lot_id,
 
                       p_opm_item_id          => r_mmt.opm_item_id,
 
                       p_lookup_type          => r_mmt.lookup_type,
 
                       p_transaction_type_id  => r_mmt.transaction_type_id,
 
                       p_factor               => -1,
 
                       p_last_update_date     => r_mmt.last_update_date);
 
    END LOOP;
 
    FOR sx_mmt IN ( --陕西销售
 
                   SELECT ool.org_id,
 
                           ool.line_id,
 
                           ool.actual_shipment_date actual_shipment_date,
 
                           ool.inventory_item_id,
 
                           /*to_number(flv.attribute13)*/ /*ool.invoice_to_org_id*/
 
                           decode(flv.lookup_code, NULL, 'OOD', 'FOB') site_source,
 
                           ood.ship_to_org_id site_id,
 
                           flv.lookup_code fob_code,
 
                           ool.unit_selling_price,
 
                           ool.unit_list_price,
 
                           ood.sold_to_org_id customer_id,
 
                           NULL transaction_type_id,
 
                           nvl(ool.shipped_quantity, 0) transaction_quantity,
 
                           ool.ship_from_org_id organization_id,
 
                           /*ool.shipping_quantity_uom transaction_uom,*/ --modify by betty.he 2010.7.31
 
                           ool.order_quantity_uom transaction_uom,
 
                           ool.last_update_date,
 
                           ool.line_id source_id,
 
                           'OOL' source_code,
 
                           'SX' area_type,
 
                           NULL lot_id,
 
                           NULL opm_item_id,
 
                           NULL lookup_type
 
                     FROM erps.fnd_lookup_values    flv,
 
                           erps.mtl_system_items_b   msib,
 
                           erps.mtl_item_categories  mic,
 
                           erps.mtl_categories_b     mc,
 
                           erps.oe_order_headers_all ood,
 
                           erps.oe_order_lines_all   ool
 
                    WHERE flv.LANGUAGE(+) = 'ZHS'
 
                      AND flv.lookup_type(+) = 'FOB'
 
                      AND flv.lookup_code(+) = ood.fob_point_code
 
                      AND ool.actual_shipment_date IS NOT NULL
 
                      AND mc.category_id(+) = mic.category_id
 
                      AND mic.category_set_id(+) = 1100000061
 
                      AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                      AND mic.organization_id(+) = msib.organization_id
 
                      AND msib.organization_id(+) = 113
 
                      AND msib.inventory_item_id(+) = ool.inventory_item_id
 
                      AND ood.order_category_code = 'ORDER'
 
                      AND ood.sold_to_org_id NOT IN (7165, 7163, 7203) -- added by jiangyq                     
 
                      AND ood.header_id = ool.header_id
 
                      AND ood.org_id = 16542 --200  陕西销售自2012开始调整OU  updated by guojuan 2012/1/10
 
                      AND ool.flow_status_code <> 'CANCELLED'
 
                      AND ool.last_update_date >= g_timespan_date
 
                      AND ool.org_id = 16542 --200  陕西销售自2012开始调整OU  updated by guojuan 2012/1/10
 
                   
 
                   UNION ALL
 
                   --陕西销售
 
                   SELECT ool.org_id,
 
                          ool.line_id,
 
                          /*get_return_date(ool.header_id,
 
                                          ool.line_id,
 
                                          ool.ship_from_org_id) actual_shipment_date,*/
                          rcv.transaction_date actual_shipment_date,
                          ool.inventory_item_id,
 
                          /*to_number(flv.attribute13) \*ool.invoice_to_org_id*\ site_id,*/
 
                          decode(flv.lookup_code, NULL, 'OOD', 'FOB') site_source,
 
                          ood.ship_to_org_id site_id,
 
                          flv.lookup_code fob_code,
 
                          ool.unit_selling_price,
 
                          ool.unit_list_price,
 
                          ood.sold_to_org_id customer_id,
 
                          NULL transaction_type_id,
 
                          ---rcv.primary_quantity shipped_quantity,
                          -rcv.quantity shipped_quantity,
 
                          ool.ship_from_org_id organization_id,
 
                          /*ool.shipping_quantity_uom,*/ --modify by betty.he 2010.7.31
 
                          rcv.uom_code,--ool.order_quantity_uom,
 
                          ool.last_update_date,
 
                          ool.line_id source_id,
 
                          'OOL' source_code,
 
                          'SX' area_type,
 
                          NULL lot_id,
 
                          NULL opm_item_id,
 
                          NULL lookup_type
 
                     FROM erps.fnd_lookup_values    flv,
 
                          erps.rcv_transactions     rcv,
 
                          erps.mtl_system_items_b   msib,
 
                          erps.mtl_item_categories  mic,
 
                          erps.mtl_categories_b     mc,
 
                          erps.oe_order_headers_all ood,
 
                          erps.oe_order_lines_all   ool
 
                    WHERE flv.LANGUAGE(+) = 'ZHS'
 
                      AND flv.lookup_type(+) = 'FOB'
 
                      AND flv.lookup_code(+) = ood.fob_point_code
 
                      AND get_return_date(ool.header_id,
 
                                          ool.line_id,
 
                                          ool.ship_from_org_id) IS NOT NULL
 
                      AND mc.category_id(+) = mic.category_id
 
                      AND mic.category_set_id(+) = 1100000061
 
                      AND mic.inventory_item_id(+) = msib.inventory_item_id
 
                      AND mic.organization_id(+) = msib.organization_id
 
                      AND msib.segment1 LIKE '1%'
 
                      AND msib.organization_id(+) = 113
 
                      AND msib.inventory_item_id(+) = ool.inventory_item_id
 
                      AND rcv.transaction_type = 'DELIVER'
 
                      AND rcv.oe_order_line_id = ool.line_id
 
                      AND ood.order_category_code = 'RETURN'
 
                      AND ood.sold_to_org_id NOT IN (7165, 7163, 7203) -- added by jiangyq
 
                      AND ood.header_id = ool.header_id
 
                      AND ood.org_id = 16542 --200  陕西销售自2012开始调整OU  updated by guojuan 2012/1/10
 
                      AND ool.flow_status_code <> 'CANCELLED'
 
                      AND ool.last_update_date >= g_timespan_date
 
                      AND ool.org_id = 16542 --200  陕西销售自2012开始调整OU   updated by guojuan 2012/1/10
                      ) LOOP
 
    
 
      insert_fob(p_site_id              => sx_mmt.site_id,
 
                 p_source_site          => sx_mmt.site_source,
 
                 p_fob_code             => sx_mmt.fob_code,
 
                 p_transaction_date     => sx_mmt.actual_shipment_date,
 
                 p_inventory_item_id    => sx_mmt.inventory_item_id,
 
                 p_area_type            => sx_mmt.area_type,
 
                 p_customer_id          => sx_mmt.customer_id,
 
                 p_org_id               => sx_mmt.org_id,
 
                 p_organization_id      => sx_mmt.organization_id,
 
                 p_source_id            => sx_mmt.source_id,
 
                 p_source_table         => sx_mmt.source_code,
 
                 p_transaction_quantity => sx_mmt.transaction_quantity,
 
                 p_transaction_uom      => sx_mmt.transaction_uom,
 
                 p_unit_selling_price   => sx_mmt.unit_selling_price,
 
                 p_unit_list_price      => sx_mmt.unit_list_price,
 
                 p_lot_id               => sx_mmt.lot_id,
 
                 p_opm_item_id          => sx_mmt.opm_item_id,
 
                 p_lookup_type          => sx_mmt.lookup_type,
 
                 p_transaction_type_id  => sx_mmt.transaction_type_id,
 
                 p_factor               => -1,
 
                 p_last_update_date     => sx_mmt.last_update_date);
 
    
 
    END LOOP;
 
  
 
    purge_deleted_data;
 
    main_mmt;--modified by xieyt 2011-03-30 调用mmt过程用来生成分工厂销量
    
    
    --根据销售部要求，部分客户不进行抽取，bi里面不保留历史数据
    --begin
    --删除“青岛啤酒股份有限公司郴州销售分公司、青岛啤酒股份有限公司安徽销售分公司、青岛啤酒股份有限公司湖北销售分公司、南京青岛啤酒华东销售有限公司”
    --"上海青岛啤酒销售有限公司"、“青岛啤酒（徐州）淮海营销有限公司”、“青岛啤酒（徐州）彭城有限公司”
      DELETE FROM Fact_Prod_Delivery t
       WHERE EXISTS (SELECT 1
                FROM dim_customer_site ds
               WHERE t.customer_site_id = ds.customer_site_id
                 AND ds.customer_id IN (1135,
                                          1136,
                                          692684,
                                          692364,
                                          699512,
                                          687854,
                                          704403,
                                          693119,
                                          693120,
                                          699962,
                                          685943,
                                          692054,
                                          692137,
                                          653588,
                                          653763,
                                          5060,
                                          5061,
                                          5062,
                                          28780,
                                          703856,
                                          710976,
                                          374016,
                                          325981));
       DELETE FROM Fact_Prod_Delivery_mmt t
       WHERE EXISTS (SELECT 1
                FROM dim_customer_site ds
               WHERE t.customer_site_id = ds.customer_site_id
                 AND ds.customer_id IN (1135,
                                          1136,
                                          692684,
                                          692364,
                                          699512,
                                          687854,
                                          704403,
                                          693119,
                                          693120,
                                          699962,
                                          685943,
                                          692054,
                                          692137,
                                          653588,
                                          653763,
                                          5060,
                                          5061,
                                          5062,
                                          28780,
                                          703856,
                                          710976,
                                          374016,
                                          325981));
    --end；
 
  END main;
 
  
 
  /*================================
 
  过程名：insert_operation_mmt  created by xieyt 2011-03-30
 
  该过程主要是为插入分工厂销量数据
 
  目标表：FACT_PROD_DELIVERY_MMT
 
  由于华南采用客户化表xxcn_sales_data_b，故其逻辑单独处理
 
  其中取工厂的逻辑采用下面优先级
 
  1、MMT或者OPM中的批次
 
  2、取编码中第12、13位
 
  
 
  =================================*/
 
  PROCEDURE insert_operation_mmt(p_site_id              IN NUMBER,
 
                               p_transaction_date     IN DATE,
 
                               p_inventory_item_id    IN NUMBER,
 
                               p_area_type            IN VARCHAR2,
 
                               p_customer_id          IN NUMBER,
 
                               p_org_id               IN NUMBER,
 
                               p_organization_id      IN NUMBER,
 
                               p_source_id            IN NUMBER,
 
                               p_source_table         IN VARCHAR2,
 
                               p_transaction_quantity IN NUMBER,
 
                               p_transaction_uom      IN VARCHAR2,
 
                               p_unit_selling_price   IN NUMBER,
 
                               p_unit_list_price      IN NUMBER,
 
                               p_lot_id               IN NUMBER,
 
                               p_opm_item_id          IN NUMBER,
 
                               p_lookup_type          IN VARCHAR2,
 
                               p_transaction_type_id  IN NUMBER,
 
                               p_factor               IN NUMBER,
 
                               p_last_update_date     IN DATE,
 
                               p_line_id              in number) IS
 
  l_unit_qty             NUMBER;
 
  l_kkl_qty              NUMBER;
 
  l_site_id              NUMBER;
 
  l_day_id               NUMBER;
 
  l_product_id           NUMBER;
 
  l_customer_id          NUMBER;
 
  l_count                NUMBER;
 
  l_region_id            NUMBER;
 
  l_factory_code         VARCHAR2(10);
 
  l_factory_id           NUMBER;
 
  l_actual_shipment_date DATE;
 
  l_selling_amount       NUMBER;
 
  l_list_amount          NUMBER;
 
  l_lot_number           VARCHAR2(10);
 
  l_cust_id              NUMBER;
 
  l_cust_site_id         NUMBER;
 
  --
 
  l_temp_count       number;
 
  l_temp_lot_id      number;
 
  l_temp_opm_item_id number;
 
BEGIN
 

 
  if p_area_type = 'HN' then
 
    begin
 
      select lot_id, item_id
 
        into l_temp_lot_id, l_temp_opm_item_id
 
        from (SELECT mtln.line_id,
 
                     mtln.transaction_type,
 
                     mtln.organization_id,
 
                     mtln.trans_date transaction_date,
 
                     1 source_transaction_type,
 
                     mtln.transaction_id,
 
                     mtln.lot_id,
 
                     mtln.item_id
 
                FROM (SELECT itv.trans_id            transaction_id,
 
                             iwm.mtl_organization_id organization_id,
 
                             --  iim.item_no,
 
                             ilm.lot_no lot_number,
 
                             itv.line_id,
 
                             itv.trans_qty transaction_quantity,
 
                             
 
                             33 transaction_type,
 
                             itv.trans_date,
 
                             itv.lot_id,
 
                             itv.item_id
 
                        FROM erps.ic_tran_pnd itv,
 
                             erps.ic_whse_mst iwm,
 
                             erps.ic_lots_mst ilm
 
                       WHERE iwm.whse_code = itv.whse_code
 
                         AND ilm.item_id = itv.item_id
 
                         AND ilm.lot_id = itv.lot_id
 
                            -- AND iim.item_id = itv.item_id
 
                         AND itv.completed_ind = 1
 
                         AND itv.doc_type = 'OMSO'
 
                         AND itv.delete_mark = 0) mtln
 
              
 
              UNION ALL
 
              
 
              --opm 退货
 
              SELECT mtln.line_id,
 
                     mtln.transaction_type,
 
                     mtln.organization_id,
 
                     mtln.trans_date transaction_date,
 
                     1 source_transaction_type,
 
                     mtln.transaction_id,
 
                     mtln.lot_id,
 
                     mtln.item_id
 
                FROM (SELECT itv.trans_id            transaction_id,
 
                             iwm.mtl_organization_id organization_id,
 
                             --   iim.item_no,
 
                             ilm.lot_no          lot_number,
 
                             rt.oe_order_line_id line_id,
 
                             itv.trans_qty       transaction_quantity,
 
                             
 
                             15 transaction_type,
 
                             rt.transaction_date trans_date,
 
                             itv.lot_id,
 
                             itv.item_id
 
                        FROM erps.ic_tran_pnd      itv,
 
                             erps.ic_whse_mst      iwm,
 
                             erps.ic_lots_mst      ilm,
 
                             erps.rcv_transactions rt
 
                      --   ic_item_mst      iim
 
                       WHERE iwm.whse_code = itv.whse_code
 
                         AND ilm.item_id = itv.item_id
 
                         AND ilm.lot_id = itv.lot_id
 
                            -- AND iim.item_id = itv.item_id
 
                         AND itv.completed_ind = 1
 
                         AND itv.delete_mark = 0
 
                         AND itv.doc_type = 'PORC'
 
                         AND rt.transaction_id = itv.line_id) mtln)
 
       where line_id = p_line_id
 
         and organization_id = p_organization_id
 
         and transaction_id = p_source_id;
 
    EXCEPTION
 
      WHEN no_data_found THEN
 
        l_temp_lot_id := 0;
 
      WHEN OTHERS THEN
 
        dbms_output.put_line(l_factory_code);
 
        raise_application_error(-20001, l_factory_code);
 
    end;
 
    if l_temp_lot_id <> 0 then
 
      SELECT substr(ilm.lot_no, 1, 2) lot_number
 
        INTO l_lot_number
 
        FROM erps.ic_lots_mst ilm
 
       WHERE ilm.lot_id = l_temp_lot_id
 
         AND ilm.item_id = l_temp_opm_item_id;
 
    
 
      l_unit_qty             := p_transaction_quantity;
 
      l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                 l_unit_qty,
 
                                                 p_transaction_uom);
 
      l_actual_shipment_date := p_transaction_date;
 
    
 
      get_factory_id(l_lot_number, 1, p_transaction_date, l_factory_code);
 
      l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
      l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
    
 
      --取工厂
 
      BEGIN
 
        SELECT df.factory_id
 
          INTO l_factory_id
 
          FROM tbdw.dim_factory df
 
         WHERE substr(df.lot_number,
 
                      1,
 
                      decode(instr(df.lot_number, '.'),
 
                             0,
 
                             length(df.lot_number),
 
                             instr(df.lot_number, '.') - 1)) =
 
               l_factory_code
 
           AND rownum = 1
 
         ORDER BY lot_number;
 
      
 
      EXCEPTION
 
        WHEN no_data_found THEN
 
          --
 
          begin
 
            select df.factory_id
 
              into l_factory_id
 
              from erps.oe_order_headers_all      ooh,
 
                   erps.oe_order_lines_all        ool,
 
                   erps.mtl_parameters            mp,
 
                   erps.hr_all_organization_units ou,
 
                   tbdw.dim_factory               df
 
             where ool.line_id = p_line_id
 
               and ooh.header_id = ool.header_id
 
               and ool.ship_from_org_id = mp.organization_id
 
               and mp.organization_id = ou.organization_id
 
               and ou.attribute16 = '01'
 
               and mp.organization_code = df.factory_code;
 
          exception
 
            when no_data_found then
 
              begin
 
              
 
                SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
                  INTO l_lot_number
 
                  FROM erps.mtl_system_items_b msi
 
                 WHERE msi.inventory_item_id = p_inventory_item_id
 
                   AND msi.organization_id = p_organization_id;
 
              
 
                SELECT df.factory_id
 
                  INTO l_factory_id
 
                  FROM factory_lookup_code flc,
 
                       erps.mtl_parameters mp,
 
                       dim_factory         df
 
                 WHERE flc.organization_id = mp.organization_id
 
                   AND flc.lot_number = l_lot_number
 
                   and mp.organization_code = df.factory_code
 
                   and rownum = 1;
 
              
 
              exception
 
                when no_data_found then
 
                  l_factory_id := -99;
 
                WHEN OTHERS THEN
 
                  dbms_output.put_line(l_factory_code);
 
                  raise_application_error(-20001, l_factory_code);
 
                
 
              end;
 
            
 
            WHEN OTHERS THEN
 
              dbms_output.put_line(l_factory_code);
 
              raise_application_error(-20001, l_factory_code);
 
            
 
          end;
 
          --
 
        --    l_factory_id := -99;
 
        WHEN OTHERS THEN
 
          dbms_output.put_line(l_factory_code);
 
          raise_application_error(-20001, l_factory_code);
 
      END;
 
    
 
      --取地点
 
      
 
         IF p_site_id = -1 AND p_area_type = 'HN' THEN
 
        BEGIN
 
          SELECT to_number(mmt.attribute1), to_number(mmt.attribute2)
 
            INTO l_cust_id, l_cust_site_id
 
            FROM erps.mtl_material_transactions mmt
 
           WHERE mmt.transaction_id = p_source_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_cust_id      := NULL;
 
            l_cust_site_id := NULL;
 
        END;
 
      
 
        IF l_cust_site_id IS NOT NULL THEN
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site dcs
 
             WHERE dcs.customer_site_src_id = l_cust_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        ELSIF l_cust_id IS NOT NULL THEN
 
          BEGIN
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site           dcs,
 
                   erps.hz_cust_site_uses_all  hcsu,
 
                   erps.hz_cust_acct_sites_all hcas
 
             WHERE dcs.customer_site_src_id = hcsu.site_use_id
 
               AND hcsu.primary_flag = 'Y'
 
               AND hcsu.status = 'A'
 
               AND hcsu.site_use_code = 'BILL_TO'
 
               AND hcsu.org_id = hcas.org_id
 
               AND hcsu.cust_acct_site_id = hcas.cust_acct_site_id
 
               AND hcas.org_id = p_org_id
 
               AND hcas.cust_account_id = l_cust_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        END IF;
 
      ELSE
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      END IF;
 
/*      
 
      BEGIN
 
        --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
        SELECT dcs.customer_site_id
 
          INTO l_site_id
 
          FROM dim_customer_site dcs
 
         WHERE dcs.customer_site_src_id = p_site_id;
 
      EXCEPTION
 
        WHEN OTHERS THEN
 
          l_site_id := NULL;
 
      END;*/
 
    
 
      --取日期
 
      l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
    
 
      --取品种
 
      BEGIN
 
        SELECT p.product_id
 
          INTO l_product_id
 
          FROM tbdw.dim_product p
 
         WHERE p.product_src_id = p_inventory_item_id;
 
      EXCEPTION
 
        WHEN OTHERS THEN
 
          l_product_id := NULL;
 
      END;
 
    
 
      SELECT COUNT(1)
 
        INTO l_count
 
        FROM tbdw.fact_prod_delivery_mmt fcp
 
       WHERE fcp.source_code = 'OPM'
 
         AND fcp.source_id = p_source_id;
 
    
 
      IF l_count = 0 THEN
 
        INSERT INTO tbdw.fact_prod_delivery_mmt
 
          (source_id,
 
           source_code,
 
           day_id,
 
           product_id,
 
           customer_site_id,
 
           factory_id,
 
           org_id,
 
           transaction_type_id,
 
           delivery_box_qty,
 
           delivery_unit_qty,
 
           selling_amount,
 
           list_amount,
 
           last_update_date)
 
        VALUES
 
          (p_source_id,
 
           'OPM',
 
           l_day_id,
 
           l_product_id,
 
           l_site_id,
 
           l_factory_id,
 
           p_org_id,
 
           p_transaction_type_id,
 
           l_unit_qty,
 
           l_kkl_qty,
 
           l_selling_amount,
 
           l_list_amount,
 
           p_last_update_date);
 
      ELSE
 
        UPDATE tbdw.fact_prod_delivery_mmt
 
           SET day_id              = l_day_id,
 
               product_id          = l_product_id,
 
               customer_site_id    = l_site_id,
 
               factory_id          = l_factory_id,
 
               org_id              = p_org_id,
 
               transaction_type_id = p_transaction_type_id,
 
               delivery_box_qty    = l_unit_qty,
 
               delivery_unit_qty   = l_kkl_qty,
 
               selling_amount      = l_selling_amount,
 
               list_amount         = l_list_amount,
 
               last_update_date    = p_last_update_date
 
         WHERE source_code = 'OPM'
 
           AND source_id = p_source_id;
 
      END IF;
 
    
 
      COMMIT;
 
    else
 
      FOR s IN (SELECT mtln.transaction_quantity * p_factor transaction_quantity,
 
                       substr(mtln.lot_number, 1, 2) lot_number,
 
                       mtln.last_update_date
 
                  FROM erps.mtl_transaction_lot_numbers mtln
 
                 WHERE mtln.transaction_id = p_source_id) LOOP
 
        l_unit_qty             := s.transaction_quantity;
 
        l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                   l_unit_qty,
 
                                                   p_transaction_uom);
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        get_factory_id(s.lot_number, 1, p_transaction_date, l_factory_code);
 
        l_selling_amount := p_unit_selling_price * s.transaction_quantity;
 
        l_list_amount    := p_unit_list_price * s.transaction_quantity;
 
      
 
        --取工厂
 
        BEGIN
 
          SELECT df.factory_id
 
            INTO l_factory_id
 
            FROM tbdw.dim_factory df
 
           WHERE substr(df.lot_number,
 
                        1,
 
                        decode(instr(df.lot_number, '.'),
 
                               0,
 
                               length(df.lot_number),
 
                               instr(df.lot_number, '.') - 1)) =
 
                 l_factory_code
 
             AND rownum = 1
 
           ORDER BY lot_number;
 
        EXCEPTION
 
          WHEN no_data_found THEN
 
            --     l_factory_id := -99;
 
            begin
 
            
 
              select df.factory_id
 
                into l_factory_id
 
                from erps.oe_order_headers_all      ooh,
 
                     erps.oe_order_lines_all        ool,
 
                     erps.mtl_parameters            mp,
 
                     erps.hr_all_organization_units ou,
 
                     tbdw.dim_factory               df
 
               where ool.line_id = p_line_id
 
                 and ooh.header_id = ool.header_id
 
                 and ool.ship_from_org_id = mp.organization_id
 
                 and mp.organization_id = ou.organization_id
 
                 and ou.attribute16 = '01'
 
                 and mp.organization_code = df.factory_code;
 
            exception
 
              when no_data_found then
 
                begin
 
                
 
                  SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
                    INTO l_lot_number
 
                    FROM erps.mtl_system_items_b msi
 
                   WHERE msi.inventory_item_id = p_inventory_item_id
 
                     AND msi.organization_id = p_organization_id;
 
                
 
                  SELECT df.factory_id
 
                    INTO l_factory_id
 
                    FROM factory_lookup_code flc,
 
                         erps.mtl_parameters mp,
 
                         dim_factory         df
 
                   WHERE flc.organization_id = mp.organization_id
 
                     AND flc.lot_number = l_lot_number
 
                     and mp.organization_code = df.factory_code
 
                     and rownum = 1;
 
                
 
                exception
 
                  when no_data_found then
 
                    l_factory_id := -99;
 
                  WHEN OTHERS THEN
 
                    dbms_output.put_line(l_factory_code);
 
                    raise_application_error(-20001, l_factory_code);
 
                  
 
                end;
 
              WHEN OTHERS THEN
 
                dbms_output.put_line(l_factory_code);
 
                raise_application_error(-20001, l_factory_code);
 
            end;
 
          WHEN OTHERS THEN
 
            dbms_output.put_line(l_factory_code);
 
            raise_application_error(-20001, l_factory_code);
 
        END;
 
      
 
        --取地点
 
      /*  BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;*/
 
         --取地点
 
      
 
         IF p_site_id = -1 AND p_area_type = 'HN' THEN
 
        BEGIN
 
          SELECT to_number(mmt.attribute1), to_number(mmt.attribute2)
 
            INTO l_cust_id, l_cust_site_id
 
            FROM erps.mtl_material_transactions mmt
 
           WHERE mmt.transaction_id = p_source_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_cust_id      := NULL;
 
            l_cust_site_id := NULL;
 
        END;
 
      
 
        IF l_cust_site_id IS NOT NULL THEN
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site dcs
 
             WHERE dcs.customer_site_src_id = l_cust_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        ELSIF l_cust_id IS NOT NULL THEN
 
          BEGIN
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site           dcs,
 
                   erps.hz_cust_site_uses_all  hcsu,
 
                   erps.hz_cust_acct_sites_all hcas
 
             WHERE dcs.customer_site_src_id = hcsu.site_use_id
 
               AND hcsu.primary_flag = 'Y'
 
               AND hcsu.status = 'A'
 
               AND hcsu.site_use_code = 'BILL_TO'
 
               AND hcsu.org_id = hcas.org_id
 
               AND hcsu.cust_acct_site_id = hcas.cust_acct_site_id
 
               AND hcas.org_id = p_org_id
 
               AND hcas.cust_account_id = l_cust_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        END IF;
 
      ELSE
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      END IF;
 
      
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
      
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_product_id := NULL;
 
        END;
 
      
 
        --将数据插入目标表
 
        /*查找是否存在，存在则更新，不存在就插入*/
 
        SELECT COUNT(1)
 
          INTO l_count
 
          FROM tbdw.fact_prod_delivery_mmt fcp
 
         WHERE fcp.source_code = 'MMT'
 
           AND fcp.source_id = p_source_id;
 
      
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_prod_delivery_mmt
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_site_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
          VALUES
 
            (p_source_id,
 
             'MMT',
 
             l_day_id,
 
             l_product_id,
 
             l_site_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_prod_delivery_mmt
 
             SET day_id              = l_day_id,
 
                 product_id          = l_product_id,
 
                 customer_site_id    = l_site_id,
 
                 factory_id          = l_factory_id,
 
                 org_id              = p_org_id,
 
                 transaction_type_id = p_transaction_type_id,
 
                 delivery_box_qty    = l_unit_qty,
 
                 delivery_unit_qty   = l_kkl_qty,
 
                 selling_amount      = l_selling_amount,
 
                 list_amount         = l_list_amount,
 
                 last_update_date    = p_last_update_date
 
           WHERE source_code = 'MMT'
 
             AND source_id = p_source_id;
 
        END IF;
 
      
 
        COMMIT;
 
      END LOOP;
 
    end if;
 
  
 
  else
 
    IF p_lookup_type IS NOT NULL OR p_lot_id != 0 THEN
 
      IF p_source_table = 'MMT' THEN
 
        FOR s IN (SELECT mtln.transaction_quantity * p_factor transaction_quantity,
 
                         substr(mtln.lot_number, 1, 2) lot_number,
 
                         mtln.last_update_date
 
                    FROM erps.mtl_transaction_lot_numbers mtln
 
                   WHERE mtln.transaction_id = -p_source_id) LOOP
 
          l_unit_qty             := s.transaction_quantity;
 
          l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                     l_unit_qty,
 
                                                     p_transaction_uom);
 
          l_actual_shipment_date := p_transaction_date;
 
        
 
          get_factory_id(s.lot_number,
 
                         1,
 
                         p_transaction_date,
 
                         l_factory_code);
 
          l_selling_amount := p_unit_selling_price * s.transaction_quantity;
 
          l_list_amount    := p_unit_list_price * s.transaction_quantity;
 
        
 
          --取工厂
 
          BEGIN
 
            SELECT df.factory_id
 
              INTO l_factory_id
 
              FROM tbdw.dim_factory df
 
             WHERE substr(df.lot_number,
 
                          1,
 
                          decode(instr(df.lot_number, '.'),
 
                                 0,
 
                                 length(df.lot_number),
 
                                 instr(df.lot_number, '.') - 1)) =
 
                   l_factory_code
 
               AND rownum = 1
 
             ORDER BY lot_number;
 
          EXCEPTION
 
            WHEN no_data_found THEN
 
              --     l_factory_id := -99;
 
              begin
 
              
 
                select df.factory_id
 
                  into l_factory_id
 
                  from erps.oe_order_headers_all      ooh,
 
                       erps.oe_order_lines_all        ool,
 
                       erps.mtl_parameters            mp,
 
                       erps.hr_all_organization_units ou,
 
                       tbdw.dim_factory               df
 
                 where ool.line_id = p_line_id
 
                   and ooh.header_id = ool.header_id
 
                   and ool.ship_from_org_id = mp.organization_id
 
                   and mp.organization_id = ou.organization_id
 
                   and ou.attribute16 = '01'
 
                   and mp.organization_code = df.factory_code;
 
              exception
 
                when no_data_found then
 
                  begin
 
                  
 
                    SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
                      INTO l_lot_number
 
                      FROM erps.mtl_system_items_b msi
 
                     WHERE msi.inventory_item_id = p_inventory_item_id
 
                       AND msi.organization_id = p_organization_id;
 
                  
 
                    SELECT df.factory_id
 
                      INTO l_factory_id
 
                      FROM factory_lookup_code flc,
 
                           erps.mtl_parameters mp,
 
                           dim_factory         df
 
                     WHERE flc.organization_id = mp.organization_id
 
                       AND flc.lot_number = l_lot_number
 
                       and mp.organization_code = df.factory_code
 
                       and rownum = 1;
 
                  
 
                  exception
 
                    when no_data_found then
 
                      l_factory_id := -99;
 
                    WHEN OTHERS THEN
 
                      dbms_output.put_line(l_factory_code);
 
                      raise_application_error(-20001, l_factory_code);
 
                    
 
                  end;
 
                WHEN OTHERS THEN
 
                  dbms_output.put_line(l_factory_code);
 
                  raise_application_error(-20001, l_factory_code);
 
                
 
              end;
 
            WHEN OTHERS THEN
 
              dbms_output.put_line(l_factory_code);
 
              raise_application_error(-20001, l_factory_code);
 
          END;
 
        
 
          --取地点
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site dcs
 
             WHERE dcs.customer_site_src_id = p_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        
 
          --取日期
 
          l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
        
 
          --取品种
 
          BEGIN
 
            SELECT p.product_id
 
              INTO l_product_id
 
              FROM tbdw.dim_product p
 
             WHERE p.product_src_id = p_inventory_item_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_product_id := NULL;
 
          END;
 
        
 
          --将数据插入目标表
 
          /*查找是否存在，存在则更新，不存在就插入*/
 
          SELECT COUNT(1)
 
            INTO l_count
 
            FROM tbdw.fact_prod_delivery_mmt fcp
 
           WHERE fcp.source_code = p_source_table
 
             AND fcp.source_id = p_source_id;
 
        
 
          IF l_count = 0 THEN
 
            INSERT INTO tbdw.fact_prod_delivery_mmt
 
              (source_id,
 
               source_code,
 
               day_id,
 
               product_id,
 
               customer_site_id,
 
               factory_id,
 
               org_id,
 
               transaction_type_id,
 
               delivery_box_qty,
 
               delivery_unit_qty,
 
               selling_amount,
 
               list_amount,
 
               last_update_date)
 
            VALUES
 
              (p_source_id,
 
               p_source_table,
 
               l_day_id,
 
               l_product_id,
 
               l_site_id,
 
               l_factory_id,
 
               p_org_id,
 
               p_transaction_type_id,
 
               l_unit_qty,
 
               l_kkl_qty,
 
               l_selling_amount,
 
               l_list_amount,
 
               p_last_update_date);
 
          ELSE
 
            UPDATE tbdw.fact_prod_delivery_mmt
 
               SET day_id              = l_day_id,
 
                   product_id          = l_product_id,
 
                   customer_site_id    = l_site_id,
 
                   factory_id          = l_factory_id,
 
                   org_id              = p_org_id,
 
                   transaction_type_id = p_transaction_type_id,
 
                   delivery_box_qty    = l_unit_qty,
 
                   delivery_unit_qty   = l_kkl_qty,
 
                   selling_amount      = l_selling_amount,
 
                   list_amount         = l_list_amount,
 
                   last_update_date    = p_last_update_date
 
             WHERE source_code = p_source_table
 
               AND source_id = p_source_id;
 
          END IF;
 
        
 
          COMMIT;
 
        END LOOP;
 
      ELSIF p_source_table = 'OPM' THEN
 
        SELECT substr(ilm.lot_no, 1, 2) lot_number
 
          INTO l_lot_number
 
          FROM erps.ic_lots_mst ilm
 
         WHERE ilm.lot_id = p_lot_id
 
           AND ilm.item_id = p_opm_item_id;
 
        l_unit_qty             := p_transaction_quantity;
 
        l_kkl_qty              := get_kkl_quantity(p_inventory_item_id,
 
                                                   l_unit_qty,
 
                                                   p_transaction_uom);
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        get_factory_id(l_lot_number, 1, p_transaction_date, l_factory_code);
 
        l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
        l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
      
 
        --取工厂
 
        BEGIN
 
          SELECT df.factory_id
 
            INTO l_factory_id
 
            FROM tbdw.dim_factory df
 
           WHERE substr(df.lot_number,
 
                        1,
 
                        decode(instr(df.lot_number, '.'),
 
                               0,
 
                               length(df.lot_number),
 
                               instr(df.lot_number, '.') - 1)) =
 
                 l_factory_code
 
             AND rownum = 1
 
           ORDER BY lot_number;
 
        EXCEPTION
 
          WHEN no_data_found THEN
 
            -- l_factory_id := -99;
 
            begin
 
            
 
              select df.factory_id
 
                into l_factory_id
 
                from erps.oe_order_headers_all      ooh,
 
                     erps.oe_order_lines_all        ool,
 
                     erps.mtl_parameters            mp,
 
                     erps.hr_all_organization_units ou,
 
                     tbdw.dim_factory               df
 
               where ool.line_id = p_line_id
 
                 and ooh.header_id = ool.header_id
 
                 and ool.ship_from_org_id = mp.organization_id
 
                 and mp.organization_id = ou.organization_id
 
                 and ou.attribute16 = '01'
 
                 and mp.organization_code = df.factory_code;
 
            exception
 
              when no_data_found then
 
                begin
 
                
 
                  SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
                    INTO l_lot_number
 
                    FROM erps.mtl_system_items_b msi
 
                   WHERE msi.inventory_item_id = p_inventory_item_id
 
                     AND msi.organization_id = p_organization_id;
 
                
 
                  SELECT df.factory_id
 
                    INTO l_factory_id
 
                    FROM factory_lookup_code flc,
 
                         erps.mtl_parameters mp,
 
                         dim_factory         df
 
                   WHERE flc.organization_id = mp.organization_id
 
                     AND flc.lot_number = l_lot_number
 
                     and mp.organization_code = df.factory_code
 
                     and rownum = 1;
 
                
 
                exception
 
                  when no_data_found then
 
                    l_factory_id := -99;
 
                  WHEN OTHERS THEN
 
                    dbms_output.put_line(l_factory_code);
 
                    raise_application_error(-20001, l_factory_code);
 
                  
 
                end;
 
              WHEN OTHERS THEN
 
                dbms_output.put_line(l_factory_code);
 
                raise_application_error(-20001, l_factory_code);
 
            end;
 
          WHEN OTHERS THEN
 
            dbms_output.put_line(l_factory_code);
 
            raise_application_error(-20001, l_factory_code);
 
        END;
 
      
 
        --取地点
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
      
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_product_id := NULL;
 
        END;
 
      
 
        --将数据插入目标表
 
        /*查找是否存在，存在则更新，不存在就插入*/
 
        SELECT COUNT(1)
 
          INTO l_count
 
          FROM tbdw.fact_prod_delivery_mmt fcp
 
         WHERE fcp.source_code = p_source_table
 
           AND fcp.source_id = p_source_id;
 
      
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_prod_delivery_mmt
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_site_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
          VALUES
 
            (p_source_id,
 
             p_source_table,
 
             l_day_id,
 
             l_product_id,
 
             l_site_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_prod_delivery_mmt
 
             SET day_id              = l_day_id,
 
                 product_id          = l_product_id,
 
                 customer_site_id    = l_site_id,
 
                 factory_id          = l_factory_id,
 
                 org_id              = p_org_id,
 
                 transaction_type_id = p_transaction_type_id,
 
                 delivery_box_qty    = l_unit_qty,
 
                 delivery_unit_qty   = l_kkl_qty,
 
                 selling_amount      = l_selling_amount,
 
                 list_amount         = l_list_amount,
 
                 last_update_date    = p_last_update_date
 
           WHERE source_code = p_source_table
 
             AND source_id = p_source_id;
 
        END IF;
 
      
 
        COMMIT;
 
      ELSE
 
        l_unit_qty := p_transaction_quantity;
 
      
 
        l_kkl_qty := get_kkl_quantity(p_inventory_item_id,
 
                                      l_unit_qty,
 
                                      p_transaction_uom);
 
      
 
        l_actual_shipment_date := p_transaction_date;
 
      
 
        --get_factory_id(l_lot_number, 1, p_actual_shipment_date, l_factory_code);
 
      
 
        --  l_factory_id     := -99;
 
      
 
        begin
 
        
 
          select df.factory_id
 
            into l_factory_id
 
            from erps.oe_order_headers_all      ooh,
 
                 erps.oe_order_lines_all        ool,
 
                 erps.mtl_parameters            mp,
 
                 erps.hr_all_organization_units ou,
 
                 tbdw.dim_factory               df
 
           where ool.line_id = p_line_id
 
             and ooh.header_id = ool.header_id
 
             and ool.ship_from_org_id = mp.organization_id
 
             and mp.organization_id = ou.organization_id
 
             and ou.attribute16 = '01'
 
             and mp.organization_code = df.factory_code;
 
        exception
 
          when no_data_found then
 
            begin
 
            
 
              SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
                INTO l_lot_number
 
                FROM erps.mtl_system_items_b msi
 
               WHERE msi.inventory_item_id = p_inventory_item_id
 
                 AND msi.organization_id = p_organization_id;
 
            
 
              SELECT df.factory_id
 
                INTO l_factory_id
 
                FROM factory_lookup_code flc,
 
                     erps.mtl_parameters mp,
 
                     dim_factory         df
 
               WHERE flc.organization_id = mp.organization_id
 
                 AND flc.lot_number = l_lot_number
 
                 and mp.organization_code = df.factory_code
 
                 and rownum = 1;
 
            
 
            exception
 
              when no_data_found then
 
                l_factory_id := -99;
 
              WHEN OTHERS THEN
 
                dbms_output.put_line(l_factory_code);
 
                raise_application_error(-20001, l_factory_code);
 
            end;
 
          WHEN OTHERS THEN
 
            dbms_output.put_line(l_factory_code);
 
            raise_application_error(-20001, l_factory_code);
 
        end;
 
      
 
        l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
        l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
      
 
        --取地点
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      
 
        --取日期
 
        l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
      
 
        --取品种
 
        BEGIN
 
          SELECT p.product_id
 
            INTO l_product_id
 
            FROM tbdw.dim_product p
 
           WHERE p.product_src_id = p_inventory_item_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_product_id := NULL;
 
        END;
 
      
 
        --将数据插入目标表
 
        /*查找是否存在，存在则更新，不存在就插入*/
 
        SELECT COUNT(1)
 
          INTO l_count
 
          FROM tbdw.fact_prod_delivery_mmt fcp
 
         WHERE fcp.source_code = p_source_table
 
           AND fcp.source_id = p_source_id;
 
      
 
        IF l_count = 0 THEN
 
          INSERT INTO tbdw.fact_prod_delivery_mmt
 
            (source_id,
 
             source_code,
 
             day_id,
 
             product_id,
 
             customer_site_id,
 
             factory_id,
 
             org_id,
 
             transaction_type_id,
 
             delivery_box_qty,
 
             delivery_unit_qty,
 
             selling_amount,
 
             list_amount,
 
             last_update_date)
 
          VALUES
 
            (p_source_id,
 
             p_source_table,
 
             l_day_id,
 
             l_product_id,
 
             l_site_id,
 
             l_factory_id,
 
             p_org_id,
 
             p_transaction_type_id,
 
             l_unit_qty,
 
             l_kkl_qty,
 
             l_selling_amount,
 
             l_list_amount,
 
             p_last_update_date);
 
        ELSE
 
          UPDATE tbdw.fact_prod_delivery_mmt
 
             SET day_id              = l_day_id,
 
                 product_id          = l_product_id,
 
                 customer_site_id    = l_site_id,
 
                 factory_id          = l_factory_id,
 
                 org_id              = p_org_id,
 
                 transaction_type_id = p_transaction_type_id,
 
                 delivery_box_qty    = l_unit_qty,
 
                 delivery_unit_qty   = l_kkl_qty,
 
                 selling_amount      = l_selling_amount,
 
                 list_amount         = l_list_amount,
 
                 last_update_date    = p_last_update_date
 
           WHERE source_code = p_source_table
 
             AND source_id = p_source_id;
 
        END IF;
 
      
 
        COMMIT;
 
      END IF;
 
    ELSE
 
      l_actual_shipment_date := p_transaction_date;
 
      SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
        INTO l_lot_number
 
        FROM erps.mtl_system_items_b msi
 
       WHERE msi.inventory_item_id = p_inventory_item_id
 
         AND msi.organization_id = p_organization_id;
 
      l_unit_qty := p_transaction_quantity;
 
      --updated by yanghe 20111116 begin
 
      --IF p_area_type IN ('LD', 'CQ') THEN
 
      IF p_area_type IN ('CQ') THEN
 
        --updated by yanghe 20111116 end
 
        l_kkl_qty := get_uom_conversion_rate(p_inventory_item_id,
 
                                             p_organization_id,
 
                                             'kL') * p_transaction_quantity;
 
      
 
      ELSE
 
        l_kkl_qty := get_kkl_quantity(p_inventory_item_id,
 
                                      l_unit_qty,
 
                                      p_transaction_uom);
 
      END IF;
 
      get_factory_id(l_lot_number, 0, p_transaction_date, l_factory_code);
 
      l_selling_amount := p_unit_selling_price * p_transaction_quantity;
 
      l_list_amount    := p_unit_list_price * p_transaction_quantity;
 
    
 
      --取工厂
 
      BEGIN
 
        SELECT df.factory_id
 
          INTO l_factory_id
 
          FROM tbdw.dim_factory df
 
         WHERE substr(df.lot_number,
 
                      1,
 
                      decode(instr(df.lot_number, '.'),
 
                             0,
 
                             length(df.lot_number),
 
                             instr(df.lot_number, '.') - 1)) =
 
               l_factory_code
 
           AND rownum = 1
 
         ORDER BY lot_number;
 
      EXCEPTION
 
        WHEN no_data_found THEN
 
          --  l_factory_id := -99;
 
          begin
 
          
 
            select df.factory_id
 
              into l_factory_id
 
              from erps.oe_order_headers_all      ooh,
 
                   erps.oe_order_lines_all        ool,
 
                   erps.mtl_parameters            mp,
 
                   erps.hr_all_organization_units ou,
 
                   tbdw.dim_factory               df
 
             where ool.line_id = p_line_id
 
               and ooh.header_id = ool.header_id
 
               and ool.ship_from_org_id = mp.organization_id
 
               and mp.organization_id = ou.organization_id
 
               and ou.attribute16 = '01'
 
               and mp.organization_code = df.factory_code;
 
          exception
 
            when no_data_found then
 
              begin
 
              
 
                SELECT substr(msi.segment1, length(msi.segment1) - 4, 2)
 
                  INTO l_lot_number
 
                  FROM erps.mtl_system_items_b msi
 
                 WHERE msi.inventory_item_id = p_inventory_item_id
 
                   AND msi.organization_id = p_organization_id;
 
              
 
                SELECT df.factory_id
 
                  INTO l_factory_id
 
                  FROM factory_lookup_code flc,
 
                       erps.mtl_parameters mp,
 
                       dim_factory         df
 
                 WHERE flc.organization_id = mp.organization_id
 
                   AND flc.lot_number = l_lot_number
 
                   and mp.organization_code = df.factory_code
 
                   and rownum = 1;
 
              
 
              exception
 
                when no_data_found then
 
                  l_factory_id := -99;
 
                WHEN OTHERS THEN
 
                  dbms_output.put_line(l_factory_code);
 
                  raise_application_error(-20001, l_factory_code);
 
              end;
 
            WHEN OTHERS THEN
 
              dbms_output.put_line(l_factory_code);
 
              raise_application_error(-20001, l_factory_code);
 
          end;
 
        WHEN OTHERS THEN
 
          dbms_output.put_line(l_factory_code);
 
          raise_application_error(-20001, l_factory_code);
 
      END;
 
    
 
      --取地点
 
      IF p_site_id = -1 AND p_area_type = 'HN' THEN
 
        BEGIN
 
          SELECT to_number(mmt.attribute1), to_number(mmt.attribute2)
 
            INTO l_cust_id, l_cust_site_id
 
            FROM erps.mtl_material_transactions mmt
 
           WHERE mmt.transaction_id = p_source_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_cust_id      := NULL;
 
            l_cust_site_id := NULL;
 
        END;
 
      
 
        IF l_cust_site_id IS NOT NULL THEN
 
          BEGIN
 
            --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site dcs
 
             WHERE dcs.customer_site_src_id = l_cust_site_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        ELSIF l_cust_id IS NOT NULL THEN
 
          BEGIN
 
            SELECT dcs.customer_site_id
 
              INTO l_site_id
 
              FROM dim_customer_site           dcs,
 
                   erps.hz_cust_site_uses_all  hcsu,
 
                   erps.hz_cust_acct_sites_all hcas
 
             WHERE dcs.customer_site_src_id = hcsu.site_use_id
 
               AND hcsu.primary_flag = 'Y'
 
               AND hcsu.status = 'A'
 
               AND hcsu.site_use_code = 'BILL_TO'
 
               AND hcsu.org_id = hcas.org_id
 
               AND hcsu.cust_acct_site_id = hcas.cust_acct_site_id
 
               AND hcas.org_id = p_org_id
 
               AND hcas.cust_account_id = l_cust_id;
 
          EXCEPTION
 
            WHEN OTHERS THEN
 
              l_site_id := NULL;
 
          END;
 
        END IF;
 
      ELSE
 
        BEGIN
 
          --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
          SELECT dcs.customer_site_id
 
            INTO l_site_id
 
            FROM dim_customer_site dcs
 
           WHERE dcs.customer_site_src_id = p_site_id;
 
        EXCEPTION
 
          WHEN OTHERS THEN
 
            l_site_id := NULL;
 
        END;
 
      END IF;
 
    
 
      --取日期
 
      l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
    
 
      --取品种
 
      BEGIN
 
        SELECT p.product_id
 
          INTO l_product_id
 
          FROM tbdw.dim_product p
 
         WHERE p.product_src_id = p_inventory_item_id;
 
      EXCEPTION
 
        WHEN OTHERS THEN
 
          l_product_id := NULL;
 
      END;
 
    
 
      --将数据插入目标表
 
      /*查找是否存在，存在则更新，不存在就插入*/
 
      SELECT COUNT(1)
 
        INTO l_count
 
        FROM tbdw.fact_prod_delivery_mmt fcp
 
       WHERE fcp.source_code = p_source_table
 
         AND fcp.source_id = p_source_id;
 
    
 
      IF l_count = 0 THEN
 
        INSERT INTO tbdw.fact_prod_delivery_mmt
 
          (source_id,
 
           source_code,
 
           day_id,
 
           product_id,
 
           customer_site_id,
 
           factory_id,
 
           org_id,
 
           transaction_type_id,
 
           delivery_box_qty,
 
           delivery_unit_qty,
 
           selling_amount,
 
           list_amount,
 
           last_update_date)
 
        VALUES
 
          (p_source_id,
 
           p_source_table,
 
           l_day_id,
 
           l_product_id,
 
           l_site_id,
 
           l_factory_id,
 
           p_org_id,
 
           p_transaction_type_id,
 
           l_unit_qty,
 
           l_kkl_qty,
 
           l_selling_amount,
 
           l_list_amount,
 
           p_last_update_date);
 
      ELSE
 
        UPDATE tbdw.fact_prod_delivery_mmt
 
           SET day_id              = l_day_id,
 
               product_id          = l_product_id,
 
               customer_site_id    = l_site_id,
 
               factory_id          = l_factory_id,
 
               org_id              = p_org_id,
 
               transaction_type_id = p_transaction_type_id,
 
               delivery_box_qty    = l_unit_qty,
 
               delivery_unit_qty   = l_kkl_qty,
 
               selling_amount      = l_selling_amount,
 
               list_amount         = l_list_amount,
 
               last_update_date    = p_last_update_date
 
         WHERE source_code = p_source_table
 
           AND source_id = p_source_id;
 
      END IF;
 
    
 
      COMMIT;
 
    END IF;
 
  end if;
 

 
  /*--IF p_source_table = 'MMT' THEN
 
    l_unit_qty := p_transaction_quantity;
 
    
 
    l_kkl_qty  := dw_load_delivery_etl.get_kkl_quantity(p_item_id      => p_inventory_item_id,
 
                                                        p_quantity     => l_unit_qty,
 
                                                        p_quantity_uom => p_transaction_uom);
 
     
 
    --将数据插入目标表
 
    --取地点
 
    BEGIN
 
      --SELECT dr.region_id INTO l_site_id FROM dim_region_area dr WHERE dr.region_src_id = p_site_id;
 
      SELECT dcs.customer_site_id
 
        INTO l_site_id
 
        FROM dim_customer_site dcs
 
       WHERE dcs.customer_site_src_id = p_site_id;
 
    EXCEPTION
 
      WHEN OTHERS THEN 
 
        l_site_id := NULL;
 
    END;
 
   
 
  --取日期
 
  l_day_id := to_number(to_char(p_transaction_date, 'yyyymmdd'));
 
  
 
  --取品种
 
  BEGIN
 
    SELECT p.product_id
 
      INTO l_product_id
 
      FROM tbdw.dim_product p
 
     WHERE p.product_src_id = p_inventory_item_id;
 
  EXCEPTION
 
    WHEN OTHERS THEN 
 
      l_product_id := NULL;
 
  END;
 
  
 
  
 
  \*查找是否存在，存在则更新，不存在就插入*\
 
  SELECT COUNT(1) 
 
    INTO l_count
 
    FROM tbdw.fact_prod_delivery fcp
 
   WHERE fcp.source_code              = p_source_table
 
     AND fcp.source_id                = p_source_id;
 
   
 
  IF l_count = 0 THEN
 
    INSERT INTO tbdw.fact_prod_delivery
 
      (source_id,
 
       source_code,
 
       day_id,
 
       product_id,
 
       customer_site_id,
 
       factory_id,
 
       org_id,
 
       transaction_type_id,
 
       delivery_box_qty,
 
       delivery_unit_qty,
 
       selling_amount,
 
       list_amount,
 
       last_update_date)
 
    VALUES
 
      (p_source_id,
 
       p_source_table,
 
       l_day_id,
 
       l_product_id,
 
       l_customer_id,
 
       l_site_id,
 
       l_unit_qty,
 
       l_kkl_qty,
 
       p_last_update_date);
 
  ELSE
 
    UPDATE tbdw.fact_prod_delivery
 
       SET day_id              = l_day_id,
 
           product_id          = l_product_id,
 
           customer_id         = l_customer_id,
 
           customer_site_id    = l_site_id,
 
           delivery_box_qty    = l_unit_qty,
 
           delivery_unit_qty   = l_kkl_qty
 
     WHERE source_code         = p_source_table
 
       AND source_id           = p_source_id;
 
  END IF;
 
  
 
  COMMIT;*/
 
END insert_operation_mmt;
 
/*=======================================
 
 过程名： main_mmt   created by xieyt 2011-03-30
 
该过程用来生成分工厂销量，销量数据时间上从20060101开始
 
数据目标：fact_prod_delivery_mmt
 
在该程序中销量的取数逻辑主要有下面几部分构成
 
1、2010年之后营销中心（包括五省区、九省办）（9517 ou）、甘肃销售、北方销售、
 
华东营销、东南营销、西南营销、陕西销售、龙东全部取自库存事物处理和OPM
 

 
2、华南取自销量生成器的表--xxcn_sales_data_b 该表的逻辑之前是取订单行后来全部改成取库存事物处理和OPM
 

 
3、2010年之前营销中心（九省办）（3314 ou）取订单行销量
 

 
4、重庆200906前 取订单行销量
 

 
5、06-10 五省区销量（B系统销量）取库存事物处理 采用 import_sales_data_b直接导入
 

 

 
=========================================*/
 
PROCEDURE main_mmt IS
 
BEGIN
 

 
    --1.根据时间戳先删除
 
  DELETE FROM tbdw.fact_prod_delivery_mmt fpd
 
  WHERE fpd.last_update_date >= g_timespan_date
 
    AND fpd.source_code IN ('MMT', 'OPM', 'OTHERS', 'OOL');
 

 
  FOR r_mmt IN ( --2010之后营销中心
 
                  SELECT /*+ CARDINALITY(mmt 1)*/
 
                   ool.org_id org_id,
 
                   ool.line_id,
 
                   mmt.transaction_date actual_shipment_date,
 
                   mmt.inventory_item_id,
 
                   ooh.invoice_to_org_id site_id,
 
                   ool.unit_selling_price,
 
                   ool.unit_list_price,
 
                   ooh.sold_to_org_id customer_id,
 
                   mmt.transaction_type_id,
 
                   lot.transaction_quantity * (-1) transaction_quantity,
 
                   mmt.organization_id,
 
                   mmt.transaction_uom,
 
                   mmt.last_update_date,
 
                   -mmt.transaction_id source_id,
 
                   (CASE
 
                     WHEN ooh.header_id IN
 
                          (7062417, 7062480, 7068597, 7068601, 7105221) THEN
 
                      'OTHERS'
 
                     ELSE
 
                      'MMT'
 
                   END) source_code,
 
                   decode(ool.org_id,
 
                          9517,
 
                          'QUBAN',
 
                          3314,
 
                          'QUBAN',
 
                          'OTHERS') area_type,
 
                   NULL lot_id,
 
                   NULL opm_item_id,
 
                   flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE decode(ool.org_id, 9517, ott.attribute15, '成品酒') =
 
                         '成品酒'
 
                     AND ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 9517
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND mmt.last_update_date >= g_timespan_date
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ooh.invoice_to_org_id
 
                             AND d.region_id = 3224) AND 
                             mmt.transaction_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         decode(ool.org_id,
 
                                9517,
 
                                'QUBAN',
 
                                3314,
 
                                'QUBAN',
 
                                'OTHERS') area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 9517
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND decode(ool.org_id, 9517, ott.attribute15, '成品酒') =
 
                         '成品酒'
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ooh.invoice_to_org_id
 
                             AND d.region_id = 3224) AND 
                            itp.trans_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         decode(ool.org_id,
 
                                9517,
 
                                'QUBAN',
 
                                3314,
 
                                'QUBAN',
 
                                'OTHERS') area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 9517
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND decode(ool.org_id, 9517, ott.attribute15, '成品酒') =
 
                         '成品酒'
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ool.invoice_to_org_id
 
                             AND d.region_id = 3224) AND
                             itp.trans_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id,
 
                                             ool.ship_from_org_id),
 
                                ool.actual_shipment_date) actual_shipment_date,
 
                         ool.inventory_item_id,
 
                         ool.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ool.sold_to_org_id customer_id,
 
                         NULL transaction_type_id,
 
                         nvl(decode(trans.order_category_code,
 
                                    'ORDER',
 
                                    ool.shipped_quantity,
 
                                    'RETURN',
 
                                    -ool.shipped_quantity,
 
                                    ool.shipped_quantity),
 
                             0) transaction_quantity,
 
                         ool.ship_from_org_id organization_id,
 
                         ool.order_quantity_uom transaction_uom,
 
                         ool.last_update_date,
 
                         ool.line_id source_id,
 
                         'OOL' source_code,
 
                         'LN' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_headers_all     ooh,
 
                         erps.oe_order_lines_all       ool,
 
                         erps.mtl_system_items_b       msib,
 
                         erps.mtl_item_categories      mic,
 
                         erps.mtl_categories_b         mc,
 
                         erps.oe_transaction_types_all trans
 
                   WHERE ooh.org_id = 9517 -- cux_hb_common_pub.get_hb_org_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ooh.header_id IN
 
                         (7062417, 7062480, 7068597, 7068601, 7105221)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND ool.inventory_item_id = msib.inventory_item_id
 
                     AND ool.ship_from_org_id = msib.organization_id
 
                     AND msib.inventory_item_id = mic.inventory_item_id(+)
 
                     AND mic.organization_id(+) = 113
 
                     AND mic.category_set_id(+) = 1100000061 --营销中心成品分类
 
                        --  AND msi.organization_id = mic.organization_id(+)
 
                     AND mic.category_id = mc.category_id(+)
 
                     AND ooh.order_type_id = trans.transaction_type_id
 
                     AND trans.attribute15 = '成品酒'
 
                     AND ool.last_update_date >= g_timespan_date
 
                     AND decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id,
 
                                             ool.ship_from_org_id),
 
                                ool.actual_shipment_date) IS NOT NULL
 
                     AND NOT (EXISTS (SELECT 1
 
                            FROM dim_customer_site d
 
                           WHERE d.customer_site_src_id =
 
                                 ool.invoice_to_org_id
 
                             AND d.region_id = 3224) AND 
                             decode(ool.line_category_code,
 
                                'RETURN',
 
                                get_rcv_date(ool.line_id,
 
                                             ool.ship_from_org_id),
 
                                ool.actual_shipment_date) < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss'))
 
                  UNION ALL
 
                  --华南营销
 
                  SELECT hn.org_id,
 
                         hn.source_id line_id,
 
                         to_date(hn.transaction_date, 'yyyymmdd') actual_shipment_date,
 
                         hn.item_id inventory_item_id,
 
                         nvl(hn.site_use_id,
 
                             nvl((SELECT d.site_use_id
 
                                   FROM erps.hz_parties             a,
 
                                        erps.hz_cust_accounts       b,
 
                                        erps.hz_cust_acct_sites_all c,
 
                                        erps.hz_cust_site_uses_all  d
 
                                  WHERE b.cust_account_id = hn.customer_id
 
                                    AND a.party_id = b.party_id
 
                                    AND b.cust_account_id =
 
                                        c.cust_account_id
 
                                    AND a.party_type = 'ORGANIZATION'
 
                                    AND c.org_id = hn.org_id
 
                                    AND c.cust_acct_site_id =
 
                                        nvl(hn.attribute3,
 
                                            c.cust_acct_site_id)
 
                                       --update by liugd for 在事务处理历史纪录弹性域中选择客户地址，来限制销量统计的区域
 
                                    AND c.org_id = d.org_id
 
                                    AND c.cust_acct_site_id =
 
                                        d.cust_acct_site_id
 
                                    AND d.site_use_code = 'BILL_TO'
 
                                    AND ((hn.attribute3 IS NULL AND
 
                                        d.primary_flag = 'Y') OR
 
                                        hn.attribute3 IS NOT NULL)
 
                                    AND d.status = 'A'
 
                                    AND rownum = 1),
 
                                 (SELECT d.site_use_id
 
                                    FROM erps.hz_parties             a,
 
                                         erps.hz_cust_accounts       b,
 
                                         erps.hz_cust_acct_sites_all c,
 
                                         erps.hz_cust_site_uses_all  d
 
                                   WHERE b.cust_account_id = hn.customer_id
 
                                     AND a.party_id = b.party_id
 
                                     AND b.cust_account_id = c.cust_account_id
 
                                     AND a.party_type = 'ORGANIZATION'
 
                                     AND c.org_id = hn.org_id
 
                                     AND c.org_id = d.org_id
 
                                     AND c.cust_acct_site_id =
 
                                         d.cust_acct_site_id
 
                                     AND d.site_use_code = 'BILL_TO'
 
                                     AND d.primary_flag = 'Y'
 
                                     AND d.status = 'A'
 
                                     AND rownum = 1))) site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         nvl(hn.customer_id, ool.sold_to_org_id) customer_id,
 
                         NULL transaction_type_id,
 
                         hn.transaction_qty transaction_quantity,
 
                         hn.organization_id,
 
                         hn.item_uom transaction_uom,
 
                         hn.last_update_date,
 
                         to_number(hn.attribute5) source_id,
 
                         (CASE
 
                           WHEN ool.line_id IS NOT NULL AND
 
                                hn.site_use_id IS NOT NULL THEN
 
                            'OOL'
 
                           ELSE
 
                            'MMT'
 
                         END) source_code,
 
                         'HN' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all  ool,
 
                         erps.xxcn_sales_data_b   hn,
 
                         erps.mtl_item_categories mic,
 
                         erps.mtl_categories_b    mc,
 
                         erps.mtl_system_items_b  msib
 
                  --WHERE HN.OU_ID = NVL(P_ORG_ID, HN.OU_ID)
 
                   WHERE ool.line_id(+) = hn.source_id
 
                     AND hn.item_id = msib.inventory_item_id(+)
 
                     AND msib.organization_id(+) = 113
 
                     AND msib.inventory_item_id = mic.inventory_item_id(+)
 
                     AND msib.organization_id = mic.organization_id(+)
 
                     AND mic.category_set_id(+) = 1100000061
 
                     AND mic.category_id = mc.category_id(+)
 
                     AND hn.last_update_date >= g_timespan_date
 
                     AND hn.item_no LIKE '1%'
 
                
 
                 UNION ALL
 
                      --甘肃销售                                                                               
 
                  SELECT /*+CARDINALITY(mmt 1) */ool.org_id org_id,
 
                         ool.line_id,
 
                         --ool.actual_shipment_date,
 
                         mmt.transaction_date actual_shipment_date,
 
                         mmt.inventory_item_id,
 
                         
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         mmt.transaction_type_id,
 
                         lot.transaction_quantity * (-1) transaction_quantity,
 
                         mmt.organization_id,
 
                         mmt.transaction_uom,
 
                         
 
                         mmt.last_update_date,
 
                         -mmt.transaction_id source_id,
 
                         'MMT' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 4237
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                        --促销品广告品不需要
 
                        --AND mmt.organization_id != 9537
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND mmt.last_update_date >= g_timespan_date
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         --ool.actual_shipment_date,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 4237
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                        --促销品广告品不需要
 
                        --AND mmt.organization_id != 9537
 
                     AND itp.last_update_date >= g_timespan_date
 
                        --add by parton@hand 2010-3-10
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         --ool.actual_shipment_date,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 4237
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
                     
                     UNION ALL
 
               --added by guojuan 2012/4/10 湖北销售上线
               --begin
               --湖北销售                                                                               
 
                  SELECT /*+CARDINALITY(mmt 1) */ool.org_id org_id,
 
                         ool.line_id,
 
                         mmt.transaction_date actual_shipment_date,
 
                         mmt.inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         mmt.transaction_type_id,
 
                         lot.transaction_quantity * (-1) transaction_quantity,
 
                         mmt.organization_id,
 
                         mmt.transaction_uom,
 
                         mmt.last_update_date,
 
                         -mmt.transaction_id source_id,
 
                         'MMT' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 17942
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND mmt.last_update_date >= g_timespan_date
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 17942
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 17942
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
               --end; 
              UNION ALL
              --added by guojuan 2012/6/29 湖南销售上线
               --begin
               --湖南销售                                                                               
 
                  SELECT /*+CARDINALITY(mmt 1) */ool.org_id org_id,
 
                         ool.line_id,
 
                         mmt.transaction_date actual_shipment_date,
 
                         mmt.inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         mmt.transaction_type_id,
 
                         lot.transaction_quantity * (-1) transaction_quantity,
 
                         mmt.organization_id,
 
                         mmt.transaction_uom,
 
                         mmt.last_update_date,
 
                         -mmt.transaction_id source_id,
 
                         'MMT' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 18483
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND mmt.last_update_date >= g_timespan_date
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 18483
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 18483
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
               --end;   
               
               UNION ALL
              --added by guojuan 2012/7/31 安徽销售上线
               --begin
               --安徽销售                                                                               
 
                  SELECT /*+CARDINALITY(mmt 1) */ool.org_id org_id,
 
                         ool.line_id,
 
                         mmt.transaction_date actual_shipment_date,
 
                         mmt.inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         mmt.transaction_type_id,
 
                         lot.transaction_quantity * (-1) transaction_quantity,
 
                         mmt.organization_id,
 
                         mmt.transaction_uom,
 
                         mmt.last_update_date,
 
                         -mmt.transaction_id source_id,
 
                         'MMT' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 19086
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND mmt.last_update_date >= g_timespan_date
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 19086
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 19086
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
               --end;  
               
               UNION ALL
              --added by guojuan 2012/10/12 上海销售上线，原上海销售改名为上海营销
               --begin
               --上海销售                                                                               
 
                  SELECT /*+CARDINALITY(mmt 1) */ool.org_id org_id,
 
                         ool.line_id,
 
                         mmt.transaction_date actual_shipment_date,
 
                         mmt.inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         mmt.transaction_type_id,
 
                         lot.transaction_quantity * (-1) transaction_quantity,
 
                         mmt.organization_id,
 
                         mmt.transaction_uom,
 
                         mmt.last_update_date,
 
                         -mmt.transaction_id source_id,
 
                         'MMT' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 20106
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND mmt.last_update_date >= g_timespan_date
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 20106
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 20106
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
               --end; 
               UNION ALL
              --added by guojuan 2012/11/30 
               --begin
               --上海苏南                                                                               
 
                  SELECT /*+CARDINALITY(mmt 1) */ool.org_id org_id,
 
                         ool.line_id,
 
                         mmt.transaction_date actual_shipment_date,
 
                         mmt.inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         mmt.transaction_type_id,
 
                         lot.transaction_quantity * (-1) transaction_quantity,
 
                         mmt.organization_id,
 
                         mmt.transaction_uom,
 
                         mmt.last_update_date,
 
                         -mmt.transaction_id source_id,
 
                         'MMT' source_code,
 
                         'OTHERS' area_type,
 
                         NULL lot_id,
 
                         NULL opm_item_id,
 
                         flv2.lookup_type
 
                    FROM erps.mtl_transaction_lot_numbers lot,
 
                         erps.oe_order_lines_all          ool,
 
                         erps.oe_order_headers_all        ooh,
 
                         erps.mtl_material_transactions   mmt,
 
                         erps.mtl_parameters              mp,
 
                         erps.fnd_lookup_values           flv2,
 
                         erps.oe_transaction_types_all    ott
 
                   WHERE ott.transaction_type_id = ooh.order_type_id
 
                     AND ooh.header_id = ool.header_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.org_id = 20346
 
                     AND ool.line_id = mmt.trx_source_line_id
 
                     AND mmt.organization_id = mp.organization_id
 
                     AND mmt.transaction_id = lot.transaction_id
 
                     AND flv2.lookup_code(+) = mp.organization_code
 
                     AND flv2.LANGUAGE(+) = 'ZHS'
 
                     AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                     AND mmt.transaction_type_id IN (37, 33, 15)
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                     AND mmt.last_update_date >= g_timespan_date
 
                  
 
                  UNION ALL
 
                  
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         33 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 20346
 
                     AND ooh.header_id = ool.header_id
 
                     AND itp.line_id = ool.line_id
 
                     AND itp.doc_type = 'OMSO'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
 
                  UNION ALL
 
                  SELECT ool.org_id org_id,
 
                         ool.line_id,
 
                         itp.trans_date        actual_shipment_date,
 
                         ool.inventory_item_id inventory_item_id,
 
                         ooh.invoice_to_org_id site_id,
 
                         ool.unit_selling_price,
 
                         ool.unit_list_price,
 
                         ooh.sold_to_org_id customer_id,
 
                         15 transaction_type_id,
 
                         -itp.trans_qty transaction_quantity,
 
                         iwm.mtl_organization_id organization_id,
 
                         itp.trans_um transaction_uom,
 
                         itp.last_update_date,
 
                         -itp.trans_id source_id,
 
                         'OPM' source_code,
 
                         'OTHERS' area_type,
 
                         itp.lot_id lot_id,
 
                         itp.item_id opm_item_id,
 
                         NULL lookup_type
 
                    FROM erps.oe_order_lines_all       ool,
 
                         erps.oe_order_headers_all     ooh,
 
                         erps.ic_tran_pnd              itp,
 
                         erps.rcv_transactions         rt,
 
                         erps.ic_whse_mst              iwm,
 
                         erps.oe_transaction_types_all ott
 
                   WHERE ool.org_id = 20346
 
                     AND ooh.header_id = ool.header_id
 
                     AND rt.oe_order_line_id = ool.line_id
 
                     AND itp.line_id = rt.transaction_id
 
                     AND itp.doc_type = 'PORC'
 
                     AND rt.destination_type_code = 'INVENTORY'
 
                     AND rt.source_document_code = 'RMA'
 
                     AND itp.whse_code = iwm.whse_code
 
                     AND itp.delete_mark = 0
 
                     AND itp.completed_ind = 1
 
                     AND itp.last_update_date >= g_timespan_date
 
                     AND ooh.order_type_id = ott.transaction_type_id
 
                     AND ool.ordered_item LIKE '1%'
 
                     AND ool.open_flag = 'N'
 
                     AND ool.flow_status_code <> 'CANCELLED'
               --end;                                                                     
 
              UNION ALL
 
                --北方销售
 
                SELECT /*+ CARDINALITY(mmt 1)*/
 
                 ool.org_id org_id,
 
                 ool.line_id,
 
                 --ool.actual_shipment_date,
 
                 mmt.transaction_date actual_shipment_date,
 
                 mmt.inventory_item_id,
 
                 
 
                 ooh.invoice_to_org_id site_id,
 
                 ool.unit_selling_price,
 
                 ool.unit_list_price,
 
                 ooh.sold_to_org_id customer_id,
 
                 mmt.transaction_type_id,
 
                 lot.transaction_quantity * (-1) transaction_quantity,
 
                 mmt.organization_id,
 
                 mmt.transaction_uom,
 
                 
 
                 mmt.last_update_date,
 
                 -mmt.transaction_id source_id,
 
                 'MMT' source_code,
 
                 'OTHERS' area_type,
 
                 NULL lot_id,
 
                 NULL opm_item_id,
 
                 flv2.lookup_type
 
                  FROM erps.mtl_transaction_lot_numbers lot,
 
                       erps.oe_order_lines_all          ool,
 
                       erps.oe_order_headers_all        ooh,
 
                       erps.mtl_material_transactions   mmt,
 
                       erps.mtl_parameters              mp,
 
                       erps.fnd_lookup_values           flv2,
 
                       erps.oe_transaction_types_all    ott
 
                 WHERE ott.transaction_type_id = ooh.order_type_id
 
                   AND ooh.header_id = ool.header_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ool.org_id = 1374
 
                   AND ooh.sold_to_org_id NOT IN
 
                       (56136, 120515, 137322, 60735, 60763, 118081)
 
                   AND ool.line_id = mmt.trx_source_line_id
 
                   AND mmt.organization_id = mp.organization_id
 
                   AND mmt.transaction_id = lot.transaction_id
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND flv2.lookup_code(+) = mp.organization_code
 
                   AND flv2.LANGUAGE(+) = 'ZHS'
 
                   AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                   AND mmt.transaction_type_id IN (37, 33, 15)
 
                   AND mmt.last_update_date >= g_timespan_date
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                
 
                UNION ALL
 
                
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       --ool.actual_shipment_date,
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       33 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'OTHERS' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ool.org_id = 1374
 
                   AND ooh.sold_to_org_id NOT IN
 
                       (56136, 120515, 137322, 60735, 60763, 118081)
 
                   AND ooh.header_id = ool.header_id
 
                   AND itp.line_id = ool.line_id
 
                   AND itp.doc_type = 'OMSO'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND itp.last_update_date >= g_timespan_date
 
                      --add by parton@hand 2010-3-10
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                   AND ooh.sold_to_org_id NOT IN
 
                       (56136, 120515, 137322, 60735, 60763, 118081)
 
                UNION ALL
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       --ool.actual_shipment_date,
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       15 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'OTHERS' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.rcv_transactions         rt,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ool.org_id = 1374
 
                   AND ooh.header_id = ool.header_id
 
                   AND rt.oe_order_line_id = ool.line_id
 
                   AND itp.line_id = rt.transaction_id
 
                   AND itp.doc_type = 'PORC'
 
                   AND rt.destination_type_code = 'INVENTORY'
 
                   AND rt.source_document_code = 'RMA'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                   AND itp.last_update_date >= g_timespan_date
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                   AND ooh.sold_to_org_id NOT IN
 
                       (56136, 120515, 137322, 60735, 60763, 118081)
 
                
 
                UNION ALL
 
                -- 华东营销
 
                
 
                    SELECT /*+ CARDINALITY(mmt 1)*/
 
                     ool.org_id org_id,
 
                     ool.line_id,
 
                     --ool.actual_shipment_date,
 
                     mmt.transaction_date actual_shipment_date,
 
                     mmt.inventory_item_id,
 
                     
 
                     ooh.invoice_to_org_id site_id,
 
                     ool.unit_selling_price,
 
                     ool.unit_list_price,
 
                     ooh.sold_to_org_id customer_id,
 
                     mmt.transaction_type_id,
 
                     lot.transaction_quantity * (-1) transaction_quantity,
 
                     mmt.organization_id,
 
                     mmt.transaction_uom,
 
                     
 
                     mmt.last_update_date,
 
                     -mmt.transaction_id source_id,
 
                     'MMT' source_code,
 
                     'OTHERS' area_type,
 
                     NULL lot_id,
 
                     NULL opm_item_id,
 
                     flv2.lookup_type
 
                      FROM erps.mtl_transaction_lot_numbers lot,
 
                           erps.oe_order_lines_all          ool,
 
                           erps.oe_order_headers_all        ooh,
 
                           erps.mtl_material_transactions   mmt,
 
                           erps.mtl_parameters              mp,
 
                           erps.fnd_lookup_values           flv2,
 
                           erps.oe_transaction_types_all    ott
 
                     WHERE ott.transaction_type_id = ooh.order_type_id
 
                       AND ooh.header_id = ool.header_id
 
                       AND ool.ordered_item LIKE '1%'
 
                          
 
                       AND ooh.sold_to_org_id NOT IN (28106, 90960, 120696)
 
                       AND ooh.org_id IN
 
                           (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                       AND ool.org_id IN
 
                           (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                       AND ool.line_id = mmt.trx_source_line_id
 
                       AND mmt.organization_id = mp.organization_id
 
                       AND mmt.transaction_id = lot.transaction_id
 
                          --促销品广告品不需要
 
                          --AND mmt.organization_id != 9537
 
                       AND flv2.lookup_code(+) = mp.organization_code
 
                       AND flv2.LANGUAGE(+) = 'ZHS'
 
                       AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                       AND mmt.transaction_type_id IN (37, 33, 15)
 
                       AND mmt.last_update_date >= g_timespan_date
 
                       AND ooh.cancelled_flag <> 'Y'
 
                       AND ool.cancelled_flag <> 'Y'
 
                       AND ool.flow_status_code <> 'CANCELLED'
 
                    
 
                    UNION ALL
 
                    
 
                    SELECT ool.org_id org_id,
 
                           ool.line_id,
 
                           --ool.actual_shipment_date,
 
                           itp.trans_date        actual_shipment_date,
 
                           ool.inventory_item_id inventory_item_id,
 
                           
 
                           ooh.invoice_to_org_id site_id,
 
                           ool.unit_selling_price,
 
                           ool.unit_list_price,
 
                           ooh.sold_to_org_id customer_id,
 
                           33 transaction_type_id,
 
                           -itp.trans_qty transaction_quantity,
 
                           iwm.mtl_organization_id organization_id,
 
                           itp.trans_um transaction_uom,
 
                           
 
                           itp.last_update_date,
 
                           -itp.trans_id source_id,
 
                           'OPM' source_code,
 
                           'OTHERS' area_type,
 
                           itp.lot_id lot_id,
 
                           itp.item_id opm_item_id,
 
                           NULL lookup_type
 
                      FROM erps.oe_order_lines_all       ool,
 
                           erps.oe_order_headers_all     ooh,
 
                           erps.ic_tran_pnd              itp,
 
                           erps.ic_whse_mst              iwm,
 
                           erps.oe_transaction_types_all ott
 
                     WHERE ooh.sold_to_org_id NOT IN (28106, 90960, 120696)
 
                       AND ooh.header_id = ool.header_id
 
                       AND itp.line_id = ool.line_id
 
                       AND itp.doc_type = 'OMSO'
 
                       AND itp.whse_code = iwm.whse_code
 
                       AND itp.delete_mark = 0
 
                       AND itp.completed_ind = 1
 
                          --促销品广告品不需要
 
                          --AND mmt.organization_id != 9537
 
                       AND itp.last_update_date >= g_timespan_date
 
                          --add by parton@hand 2010-3-10
 
                       AND ooh.order_type_id = ott.transaction_type_id
 
                       AND ool.ordered_item LIKE '1%'
 
                       AND ooh.cancelled_flag <> 'Y'
 
                       AND ool.cancelled_flag <> 'Y'
 
                       AND ool.flow_status_code <> 'CANCELLED'
 
                       AND ooh.org_id IN
 
                           (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                       AND ool.org_id IN
 
                           (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                    UNION ALL
 
                    SELECT ool.org_id org_id,
 
                           ool.line_id,
 
                           --ool.actual_shipment_date,
 
                           itp.trans_date        actual_shipment_date,
 
                           ool.inventory_item_id inventory_item_id,
 
                           
 
                           ooh.invoice_to_org_id site_id,
 
                           ool.unit_selling_price,
 
                           ool.unit_list_price,
 
                           ooh.sold_to_org_id customer_id,
 
                           15 transaction_type_id,
 
                           -itp.trans_qty transaction_quantity,
 
                           iwm.mtl_organization_id organization_id,
 
                           itp.trans_um transaction_uom,
 
                           
 
                           itp.last_update_date,
 
                           -itp.trans_id source_id,
 
                           'OPM' source_code,
 
                           'OTHERS' area_type,
 
                           itp.lot_id lot_id,
 
                           itp.item_id opm_item_id,
 
                           NULL lookup_type
 
                      FROM erps.oe_order_lines_all       ool,
 
                           erps.oe_order_headers_all     ooh,
 
                           erps.ic_tran_pnd              itp,
 
                           erps.rcv_transactions         rt,
 
                           erps.ic_whse_mst              iwm,
 
                           erps.oe_transaction_types_all ott
 
                     WHERE ooh.header_id = ool.header_id
 
                       AND rt.oe_order_line_id = ool.line_id
 
                       AND itp.line_id = rt.transaction_id
 
                       AND itp.doc_type = 'PORC'
 
                       AND rt.destination_type_code = 'INVENTORY'
 
                       AND rt.source_document_code = 'RMA'
 
                       AND itp.whse_code = iwm.whse_code
 
                       AND itp.delete_mark = 0
 
                       AND itp.completed_ind = 1
 
                       AND itp.last_update_date >= g_timespan_date
 
                       AND ooh.order_type_id = ott.transaction_type_id
 
                       AND ool.ordered_item LIKE '1%'
 
                       AND ooh.cancelled_flag <> 'Y'
 
                       AND ool.cancelled_flag <> 'Y'
 
                       AND ool.flow_status_code <> 'CANCELLED'
 
                       AND ooh.sold_to_org_id NOT IN (28106, 90960, 120696)
 
                       AND ooh.org_id IN
 
                           (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                       AND ool.org_id IN
 
                           (896, 898, 901, 1094, 900, 899, 897, 1414)
 
                    
 
                    UNION ALL
 
                --东南营销
 
                
 
                    SELECT /*+ CARDINALITY(mmt 1)*/
 
                     ool.org_id org_id,
 
                     ool.line_id,
 
                     --ool.actual_shipment_date,
 
                     mmt.transaction_date actual_shipment_date,
 
                     mmt.inventory_item_id,
 
                     
 
                     ooh.invoice_to_org_id site_id,
 
                     ool.unit_selling_price,
 
                     ool.unit_list_price,
 
                     ooh.sold_to_org_id customer_id,
 
                     mmt.transaction_type_id,
 
                     lot.transaction_quantity * (-1) transaction_quantity,
 
                     mmt.organization_id,
 
                     mmt.transaction_uom,
 
                     
 
                     mmt.last_update_date,
 
                     -mmt.transaction_id source_id,
 
                     'MMT' source_code,
 
                     'OTHERS' area_type,
 
                     NULL lot_id,
 
                     NULL opm_item_id,
 
                     flv2.lookup_type
 
                      FROM erps.mtl_transaction_lot_numbers lot,
 
                           erps.oe_order_lines_all          ool,
 
                           erps.oe_order_headers_all        ooh,
 
                           erps.mtl_material_transactions   mmt,
 
                           erps.mtl_parameters              mp,
 
                           erps.fnd_lookup_values           flv2,
 
                           erps.oe_transaction_types_all    ott
 
                     WHERE ott.transaction_type_id = ooh.order_type_id
 
                       AND ooh.header_id = ool.header_id
 
                       AND ool.ordered_item LIKE '1%'
 
                       AND ool.org_id = 454
 
                       AND ooh.sold_to_org_id NOT IN (61677, 137976)
 
                          
 
                       AND ool.line_id = mmt.trx_source_line_id
 
                       AND mmt.organization_id = mp.organization_id
 
                       AND mmt.transaction_id = lot.transaction_id
 
                          --促销品广告品不需要
 
                          --AND mmt.organization_id != 9537
 
                       AND flv2.lookup_code(+) = mp.organization_code
 
                       AND flv2.LANGUAGE(+) = 'ZHS'
 
                       AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                       AND mmt.transaction_type_id IN (37, 33, 15)
 
                       AND mmt.last_update_date >= g_timespan_date
 
                       AND ooh.cancelled_flag <> 'Y'
 
                       AND ool.cancelled_flag <> 'Y'
 
                       AND ool.flow_status_code <> 'CANCELLED'
 
                    
 
                    UNION ALL
 
                    
 
                    SELECT ool.org_id org_id,
 
                           ool.line_id,
 
                           --ool.actual_shipment_date,
 
                           itp.trans_date        actual_shipment_date,
 
                           ool.inventory_item_id inventory_item_id,
 
                           
 
                           ooh.invoice_to_org_id site_id,
 
                           ool.unit_selling_price,
 
                           ool.unit_list_price,
 
                           ooh.sold_to_org_id customer_id,
 
                           33 transaction_type_id,
 
                           -itp.trans_qty transaction_quantity,
 
                           iwm.mtl_organization_id organization_id,
 
                           itp.trans_um transaction_uom,
 
                           
 
                           itp.last_update_date,
 
                           -itp.trans_id source_id,
 
                           'OPM' source_code,
 
                           'OTHERS' area_type,
 
                           itp.lot_id lot_id,
 
                           itp.item_id opm_item_id,
 
                           NULL lookup_type
 
                      FROM erps.oe_order_lines_all       ool,
 
                           erps.oe_order_headers_all     ooh,
 
                           erps.ic_tran_pnd              itp,
 
                           erps.ic_whse_mst              iwm,
 
                           erps.oe_transaction_types_all ott
 
                     WHERE ool.org_id = 454
 
                       AND ooh.sold_to_org_id NOT IN (61677, 137976)
 
                       AND ooh.header_id = ool.header_id
 
                       AND itp.line_id = ool.line_id
 
                       AND itp.doc_type = 'OMSO'
 
                       AND itp.whse_code = iwm.whse_code
 
                       AND itp.delete_mark = 0
 
                       AND itp.completed_ind = 1
 
                          --促销品广告品不需要
 
                          --AND mmt.organization_id != 9537
 
                       AND itp.last_update_date >= g_timespan_date
 
                          --add by parton@hand 2010-3-10
 
                       AND ooh.order_type_id = ott.transaction_type_id
 
                       AND ool.ordered_item LIKE '1%'
 
                       AND ooh.cancelled_flag <> 'Y'
 
                       AND ool.cancelled_flag <> 'Y'
 
                       AND ool.flow_status_code <> 'CANCELLED'
 
                    
 
                    UNION ALL
 
                    SELECT ool.org_id org_id,
 
                           ool.line_id,
 
                           --ool.actual_shipment_date,
 
                           itp.trans_date        actual_shipment_date,
 
                           ool.inventory_item_id inventory_item_id,
 
                           
 
                           ooh.invoice_to_org_id site_id,
 
                           ool.unit_selling_price,
 
                           ool.unit_list_price,
 
                           ooh.sold_to_org_id customer_id,
 
                           15 transaction_type_id,
 
                           -itp.trans_qty transaction_quantity,
 
                           iwm.mtl_organization_id organization_id,
 
                           itp.trans_um transaction_uom,
 
                           
 
                           itp.last_update_date,
 
                           -itp.trans_id source_id,
 
                           'OPM' source_code,
 
                           'OTHERS' area_type,
 
                           itp.lot_id lot_id,
 
                           itp.item_id opm_item_id,
 
                           NULL lookup_type
 
                      FROM erps.oe_order_lines_all       ool,
 
                           erps.oe_order_headers_all     ooh,
 
                           erps.ic_tran_pnd              itp,
 
                           erps.rcv_transactions         rt,
 
                           erps.ic_whse_mst              iwm,
 
                           erps.oe_transaction_types_all ott
 
                     WHERE ool.org_id = 454
 
                       AND ooh.header_id = ool.header_id
 
                       AND rt.oe_order_line_id = ool.line_id
 
                       AND itp.line_id = rt.transaction_id
 
                       AND itp.doc_type = 'PORC'
 
                       AND rt.destination_type_code = 'INVENTORY'
 
                       AND rt.source_document_code = 'RMA'
 
                       AND itp.whse_code = iwm.whse_code
 
                       AND itp.delete_mark = 0
 
                       AND itp.completed_ind = 1
 
                       AND itp.last_update_date >= g_timespan_date
 
                       AND ooh.order_type_id = ott.transaction_type_id
 
                       AND ool.ordered_item LIKE '1%'
 
                       AND ooh.cancelled_flag <> 'Y'
 
                       AND ool.cancelled_flag <> 'Y'
 
                       AND ool.flow_status_code <> 'CANCELLED'
 
                       AND ooh.sold_to_org_id NOT IN (61677, 137976)
 
                    
 
                    UNION ALL
 
                -- 西南营销                
 
                SELECT /*+ CARDINALITY(mmt 1)*/
 
                 ool.org_id org_id,
 
                  ool.line_id,
 
                  --ool.actual_shipment_date,
 
                  mmt.transaction_date actual_shipment_date,
 
                  mmt.inventory_item_id,
 
                  
 
                  ooh.invoice_to_org_id site_id,
 
                  ool.unit_selling_price,
 
                  ool.unit_list_price,
 
                  ooh.sold_to_org_id customer_id,
 
                  mmt.transaction_type_id,
 
                  lot.transaction_quantity * (-1) transaction_quantity,
 
                  mmt.organization_id,
 
                  mmt.transaction_uom,
 
                  
 
                  mmt.last_update_date,
 
                  -mmt.transaction_id source_id,
 
                  'MMT' source_code,
 
                  'OTHERS' area_type,
 
                  NULL lot_id,
 
                  NULL opm_item_id,
 
                  flv2.lookup_type
 
                  FROM erps.mtl_transaction_lot_numbers lot,
 
                        erps.oe_order_lines_all          ool,
 
                        erps.oe_order_headers_all        ooh,
 
                        erps.mtl_material_transactions   mmt,
 
                        erps.mtl_parameters              mp,
 
                        erps.fnd_lookup_values           flv2,
 
                        erps.oe_transaction_types_all    ott
 
                 WHERE ott.transaction_type_id = ooh.order_type_id
 
                   AND ooh.header_id = ool.header_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   and ooh.org_id IN (8557, 1874, 1895)
 
                   AND ool.org_id IN (8557, 1874, 1895)
 
                   AND ool.booked_flag = 'Y'
 
                   AND ooh.sold_to_org_id NOT IN (95324, 95326, 95322)
 
                      
 
                   AND ool.line_id = mmt.trx_source_line_id
 
                   AND mmt.organization_id = mp.organization_id
 
                   AND mmt.transaction_id = lot.transaction_id
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND flv2.lookup_code(+) = mp.organization_code
 
                   AND flv2.LANGUAGE(+) = 'ZHS'
 
                   AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                   AND mmt.transaction_type_id IN (37, 33, 15)
 
                   AND mmt.last_update_date >= g_timespan_date
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                
 
                UNION ALL
 
                
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       --ool.actual_shipment_date,
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       33 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'OTHERS' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ooh.org_id IN (8557, 1874, 1895)
 
                   AND ool.org_id IN (8557, 1874, 1895)
 
                   AND ool.booked_flag = 'Y'
 
                   AND ooh.sold_to_org_id NOT IN (95324, 95326, 95322)
 
                   AND ooh.header_id = ool.header_id
 
                   AND itp.line_id = ool.line_id
 
                   AND itp.doc_type = 'OMSO'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND itp.last_update_date >= g_timespan_date
 
                      --add by parton@hand 2010-3-10
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                
 
                UNION ALL
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       15 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'OTHERS' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.rcv_transactions         rt,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ooh.header_id = ool.header_id
 
                   AND rt.oe_order_line_id = ool.line_id
 
                   AND itp.line_id = rt.transaction_id
 
                   AND itp.doc_type = 'PORC'
 
                   AND rt.destination_type_code = 'INVENTORY'
 
                   AND rt.source_document_code = 'RMA'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                   AND itp.last_update_date >= g_timespan_date
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                   AND ooh.sold_to_org_id NOT IN (95324, 95326, 95322)
 
                   AND ooh.org_id IN (8557, 1874, 1895)
 
                   AND ool.org_id IN (8557, 1874, 1895)
 
                   AND ool.booked_flag = 'Y'
 
                
 
                UNION ALL
 
                --2009之前营销中心
 
                SELECT decode(ool.org_id, 3314, 9517, ool.org_id) org_id,
 
                       ool.line_id,
 
                       decode(ott.order_category_code,
 
                              'RETURN',
 
                              get_return_date(ool.header_id,
 
                                              ool.line_id,
 
                                              ool.ship_from_org_id),
 
                              nvl(trunc(ool.actual_shipment_date),
 
                                  trunc(ool.fulfillment_date))) actual_shipment_date,
 
                       ool.inventory_item_id,
 
                       ooh.ship_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       ott.transaction_type_id,
 
                       nvl(ool.invoiced_quantity,
 
                           ool.shipped_quantity *
 
                           decode(ool.line_category_code, 'RETURN', -1, 1)) transaction_quantity,
 
                       ool.ship_from_org_id organization_id,
 
                       ool.order_quantity_uom transaction_uom,
 
                       ool.last_update_date,
 
                       ool.line_id source_id,
 
                       'OOL' source_code,
 
                       decode(ool.org_id, 3314, 'QUBAN', 'OTHERS') area_type,
 
                       NULL lot_id,
 
                       NULL opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ooh.header_id = ool.header_id
 
                   AND ott.transaction_type_id = ooh.order_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ool.org_id = 3314
 
                   AND ooh.booked_flag = 'Y'
 
                   AND ool.booked_flag = 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ooh.cancelled_flag <> 'Y' --added
 
                   AND ool.last_update_date >= g_timespan_date
 
                
 
                UNION ALL
 
                --龙东  201212之前                
 
                SELECT /*+ CARDINALITY(mmt 1)*/
 
                 ool.org_id org_id,
 
                 ool.line_id,
 
                 
 
                 mmt.transaction_date actual_shipment_date,
 
                 mmt.inventory_item_id,
 
                 
 
                 ooh.invoice_to_org_id site_id,
 
                 ool.unit_selling_price,
 
                 ool.unit_list_price,
 
                 ooh.sold_to_org_id customer_id,
 
                 mmt.transaction_type_id,
 
                 lot.transaction_quantity * (-1) transaction_quantity,
 
                 mmt.organization_id,
 
                 mmt.transaction_uom,
 
                 
 
                 mmt.last_update_date,
 
                 -mmt.transaction_id source_id,
 
                 'MMT' source_code,
 
                 'LD' area_type,
 
                 NULL lot_id,
 
                 NULL opm_item_id,
 
                 flv2.lookup_type
 
                  FROM erps.mtl_transaction_lot_numbers lot,
 
                       erps.oe_order_lines_all          ool,
 
                       erps.oe_order_headers_all        ooh,
 
                       erps.mtl_material_transactions   mmt,
 
                       erps.mtl_parameters              mp,
 
                       erps.fnd_lookup_values           flv2,
 
                       erps.oe_transaction_types_all    ott
 
                 WHERE ott.transaction_type_id = ooh.order_type_id
 
                   AND ooh.header_id = ool.header_id
 
                   AND ool.ordered_item LIKE '1%'
 
                      
 
                   AND ool.org_id = 2213
 
                   AND ool.booked_flag = 'Y'
 
                      
 
                   AND ool.line_id = mmt.trx_source_line_id
 
                   AND mmt.organization_id = mp.organization_id
 
                   AND mmt.transaction_id = lot.transaction_id
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND flv2.lookup_code(+) = mp.organization_code
 
                   AND flv2.LANGUAGE(+) = 'ZHS'
 
                   AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                   AND mmt.transaction_type_id IN (37, 33, 15)
 
                   AND mmt.last_update_date >= g_timespan_date
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
                   AND mmt.transaction_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss')
 
                
 
                UNION ALL
 
                
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       33 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'LD' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ool.org_id = 2213
 
                   AND ool.booked_flag = 'Y'
 
                   AND ooh.header_id = ool.header_id
 
                   AND itp.line_id = ool.line_id
 
                   AND itp.doc_type = 'OMSO'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND itp.last_update_date >= g_timespan_date
 
                      --add by parton@hand 2010-3-10
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
                   AND itp.trans_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss')
 
                
 
                UNION ALL
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       15 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'LD' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.rcv_transactions         rt,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ooh.header_id = ool.header_id
 
                   AND rt.oe_order_line_id = ool.line_id
 
                   AND itp.line_id = rt.transaction_id
 
                   AND itp.doc_type = 'PORC'
 
                   AND rt.destination_type_code = 'INVENTORY'
 
                   AND rt.source_document_code = 'RMA'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                   AND itp.last_update_date >= g_timespan_date
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                      
 
                   AND ool.org_id = 2213
 
                   AND ool.booked_flag = 'Y'
                   AND itp.trans_date < to_date('20121129000000', 'yyyy-mm-dd hh24:mi:ss')
 
                
 
                UNION ALL
 
                --重庆200906前  
 
                SELECT ool.org_id,
 
                       ool.line_id,
 
                       decode(ott.order_category_code,
 
                              'RETURN',
 
                              dw_load_delivery_etl.get_return_date(ool.header_id,
 
                                                                   ool.line_id,
 
                                                                   ool.ship_from_org_id),
 
                              nvl(trunc(ool.actual_shipment_date),
 
                                  trunc(ool.fulfillment_date))) actual_shipment_date,
 
                       ool.inventory_item_id,
 
                       ooh.ship_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       ott.transaction_type_id,
 
                       nvl(ool.invoiced_quantity, 0) transaction_quantity,
 
                       ool.ship_from_org_id organization_id,
 
                       ool.order_quantity_uom transaction_uom,
 
                       ool.last_update_date,
 
                       ool.line_id source_id,
 
                       'OOL' source_code,
 
                       'CQ' area_type,
 
                       NULL lot_id,
 
                       NULL opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ooh.header_id = ool.header_id
 
                   AND ott.transaction_type_id = ooh.order_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ool.org_id = 1896
 
                   AND ooh.booked_flag = 'Y'
 
                   AND ool.booked_flag = 'Y'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND decode(ott.order_category_code,
 
                              'RETURN',
 
                              dw_load_delivery_etl.get_return_date(ool.header_id,
 
                                                                   ool.line_id,
 
                                                                   ool.ship_from_org_id),
 
                              nvl(trunc(ool.actual_shipment_date),
 
                                  trunc(ool.fulfillment_date))) <
 
                       to_date('20090629', 'yyyymmdd')
 
                   AND ool.last_update_date >= g_timespan_date
 
                union all
 
                --陕西销售              
 
                SELECT /* +CARDINALITY(mmt 1) */
 
                 ool.org_id org_id,
 
                 ool.line_id,
 
                 
 
                 mmt.transaction_date actual_shipment_date,
 
                 mmt.inventory_item_id,
 
                 
 
                 ooh.invoice_to_org_id site_id,
 
                 ool.unit_selling_price,
 
                 ool.unit_list_price,
 
                 ooh.sold_to_org_id customer_id,
 
                 mmt.transaction_type_id,
 
                 lot.transaction_quantity * (-1) transaction_quantity,
 
                 mmt.organization_id,
 
                 mmt.transaction_uom,
 
                 
 
                 mmt.last_update_date,
 
                 -mmt.transaction_id source_id,
 
                 'MMT' source_code,
 
                 'SX' area_type,
 
                 NULL lot_id,
 
                 NULL opm_item_id,
 
                 flv2.lookup_type
 
                  FROM erps.mtl_transaction_lot_numbers lot,
 
                       erps.oe_order_lines_all          ool,
 
                       erps.oe_order_headers_all        ooh,
 
                       erps.mtl_material_transactions   mmt,
 
                       erps.mtl_parameters              mp,
 
                       erps.fnd_lookup_values           flv2,
 
                       erps.oe_transaction_types_all    ott
 
                 WHERE ott.transaction_type_id = ooh.order_type_id
 
                   AND ooh.header_id = ool.header_id
 
                   AND ool.ordered_item LIKE '1%'
 
                      
 
                   AND ool.org_id = 16542 --200  陕西销售自2012开始调整OU   updated by guojuan 2012/1/10
 
                   and ooh.org_id = 16542 --200  陕西销售自2012开始调整OU   updated by guojuan 2012/1/10
 
                   AND ool.booked_flag = 'Y'
 
                      
 
                   AND ool.line_id = mmt.trx_source_line_id
 
                   AND mmt.organization_id = mp.organization_id
 
                   AND mmt.transaction_id = lot.transaction_id
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND flv2.lookup_code(+) = mp.organization_code
 
                   AND flv2.LANGUAGE(+) = 'ZHS'
 
                   AND flv2.lookup_type(+) = 'CUX_ORGANIZATION_LOT'
 
                   AND mmt.transaction_type_id IN (37, 33, 15)
 
                   AND mmt.last_update_date >= g_timespan_date
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                   and ooh.sold_to_org_id NOT IN (7165, 7163, 7203)
 
                
 
                UNION ALL
 
                
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       33 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'SX' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ool.org_id = 16542 --200  陕西销售自2012开始调整OU   updated by guojuan 2012/1/10
 
                   AND ool.booked_flag = 'Y'
 
                   AND ooh.header_id = ool.header_id
 
                   AND itp.line_id = ool.line_id
 
                   AND itp.doc_type = 'OMSO'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                      --促销品广告品不需要
 
                      --AND mmt.organization_id != 9537
 
                   AND itp.last_update_date >= g_timespan_date
 
                      --add by parton@hand 2010-3-10
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                   and ooh.sold_to_org_id NOT IN (7165, 7163, 7203)
 
                
 
                UNION ALL
 
                SELECT ool.org_id org_id,
 
                       ool.line_id,
 
                       
 
                       itp.trans_date        actual_shipment_date,
 
                       ool.inventory_item_id inventory_item_id,
 
                       
 
                       ooh.invoice_to_org_id site_id,
 
                       ool.unit_selling_price,
 
                       ool.unit_list_price,
 
                       ooh.sold_to_org_id customer_id,
 
                       15 transaction_type_id,
 
                       -itp.trans_qty transaction_quantity,
 
                       iwm.mtl_organization_id organization_id,
 
                       itp.trans_um transaction_uom,
 
                       
 
                       itp.last_update_date,
 
                       -itp.trans_id source_id,
 
                       'OPM' source_code,
 
                       'LD' area_type,
 
                       itp.lot_id lot_id,
 
                       itp.item_id opm_item_id,
 
                       NULL lookup_type
 
                  FROM erps.oe_order_lines_all       ool,
 
                       erps.oe_order_headers_all     ooh,
 
                       erps.ic_tran_pnd              itp,
 
                       erps.rcv_transactions         rt,
 
                       erps.ic_whse_mst              iwm,
 
                       erps.oe_transaction_types_all ott
 
                 WHERE ooh.header_id = ool.header_id
 
                   AND rt.oe_order_line_id = ool.line_id
 
                   AND itp.line_id = rt.transaction_id
 
                   AND itp.doc_type = 'PORC'
 
                   AND rt.destination_type_code = 'INVENTORY'
 
                   AND rt.source_document_code = 'RMA'
 
                   AND itp.whse_code = iwm.whse_code
 
                   AND itp.delete_mark = 0
 
                   AND itp.completed_ind = 1
 
                   AND itp.last_update_date >= g_timespan_date
 
                   AND ooh.order_type_id = ott.transaction_type_id
 
                   AND ool.ordered_item LIKE '1%'
 
                   AND ooh.cancelled_flag <> 'Y'
 
                   AND ool.cancelled_flag <> 'Y'
 
                   AND ool.flow_status_code <> 'CANCELLED'
 
                      
 
                   AND ool.org_id = 16542 --200  陕西销售自2012开始调整OU   updated by guojuan 2012/1/10
 
                   AND ool.booked_flag = 'Y'
 
                   and ooh.sold_to_org_id NOT IN (7165, 7163, 7203)) LOOP
 
    --检查是否存在退货,取日期和销售数量
 
    insert_operation_mmt(p_site_id              => r_mmt.site_id,
 
                         p_transaction_date     => r_mmt.actual_shipment_date,
 
                         p_inventory_item_id    => r_mmt.inventory_item_id,
 
                         p_area_type            => r_mmt.area_type,
 
                         p_customer_id          => r_mmt.customer_id,
 
                         p_org_id               => r_mmt.org_id,
 
                         p_organization_id      => r_mmt.organization_id,
 
                         p_source_id            => r_mmt.source_id,
 
                         p_source_table         => r_mmt.source_code,
 
                         p_transaction_quantity => r_mmt.transaction_quantity,
 
                         p_transaction_uom      => r_mmt.transaction_uom,
 
                         p_unit_selling_price   => r_mmt.unit_selling_price,
 
                         p_unit_list_price      => r_mmt.unit_list_price,
 
                         p_lot_id               => r_mmt.lot_id,
 
                         p_opm_item_id          => r_mmt.opm_item_id,
 
                         p_lookup_type          => r_mmt.lookup_type,
 
                         p_transaction_type_id  => r_mmt.transaction_type_id,
 
                         p_factor               => -1,
 
                         p_last_update_date     => r_mmt.last_update_date,
 
                         p_line_id              => r_mmt.line_id);
 
  END LOOP;
 
  -- purge_deleted_data;
 
END main_mmt;
 

 

 
/*=======================================
 
  import_sales_data_b   created by xieyt 2011-03-30
 
该过程用来为分工厂销量导入20060101-20091231 B系统内的销量
 
数据来源：fact_prod_delivery
 
    目标：fact_prod_delivery_mmt
 

 
=========================================*/
 
  procedure import_sales_data_b is
 
  i number := 0;
 
begin
 
 -- DELETE FROM tbdw.fact_prod_delivery_mmt fpd;
 

 
  for r in (select p.source_id,
 
                   p.source_code,
 
                   p.day_id,
 
                   p.product_id,
 
                   p.customer_site_id,
 
                   p.factory_id,
 
                   p.org_id,
 
                   p.transaction_type_id,
 
                   p.delivery_unit_qty,
 
                   p.delivery_box_qty,
 
                   p.selling_amount,
 
                   p.list_amount,
 
                   p.last_update_date
 
              from fact_prod_delivery p
 
             where p.org_id = 9517
 
               and p.source_code = 'B'
 
               and p.day_id >= 20060101
 
               and p.day_id < 20100101) loop
 
    i := i + 1;
 
  
 
    insert into fact_prod_delivery_mmt
 
      (source_id,
 
       source_code,
 
       day_id,
 
       product_id,
 
       customer_site_id,
 
       factory_id,
 
       org_id,
 
       transaction_type_id,
 
       delivery_unit_qty,
 
       delivery_box_qty,
 
       selling_amount,
 
       list_amount,
 
       last_update_date)
 
    values
 
      (r.source_id,
 
       r.source_code,
 
       r.day_id,
 
       r.product_id,
 
       r.customer_site_id,
 
       r.factory_id,
 
       r.org_id,
 
       r.transaction_type_id,
 
       r.delivery_unit_qty,
 
       r.delivery_box_qty,
 
       r.selling_amount,
 
       r.list_amount,
 
       r.last_update_date);
 
    if mod(i, 10000) = 0 then
 
      commit;
 
    end if;
 
  end loop;
 
  commit;
 
end import_sales_data_b;
 
FUNCTION get_time_span(p_table IN VARCHAR2) RETURN NUMBER IS
    CURSOR cur_timespan IS
      SELECT t.timespan
        FROM dwstg.stg_time_timespan t
       WHERE t.out_table = upper(p_table)
          OR t.global_flag = 'Y'
       ORDER BY decode(nvl(global_flag, 'N'), 'N', 1, 2);
  
    l_timespan NUMBER;
  BEGIN
    OPEN cur_timespan;
    FETCH cur_timespan
      INTO l_timespan;
    CLOSE cur_timespan;
  
    RETURN nvl(l_timespan, 1) / 1;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 1;
  END get_time_span;
 
END dw_load_delivery_etl;
/

prompt
prompt Creating package body DW_LOAD_DISTRIBUTOR_BUDGE_ETL
prompt ===================================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_distributor_budge_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main IS
  BEGIN
    --锁定需要操作的数据
    UPDATE soau.j$bsm_distributor_budget bsb SET bsb.jrn_consumed = 1 WHERE bsb.jrn_subscriber = 'STG-DW';
  
    --删除原表中已经删除的数据和需要更新的数据
    DELETE FROM fact_distributor_budget fsb
     WHERE EXISTS (SELECT 1
              FROM soau.j$bsm_distributor_budget bsb
             WHERE bsb.distributor_budget_id = fsb.source_id
               AND bsb.jrn_consumed = 1);
  
    --将新增的数据和更新的数据放入目标表
    INSERT INTO fact_distributor_budget
      (source_id, month_id, budget_qty, center_series_id, region_id, DISTRIBUTOR_ID)
      SELECT DISTINCT BSB.DISTRIBUTOR_BUDGET_ID SOURCE_ID,
             TO_NUMBER(TO_CHAR(BSB.YEAR, 'yyyy')) * 100 + PRG.ID + 1 MONTH_ID,
             DECODE(PRG.ID,
                    0,
                    BSB.JAN_QUANTITY,
                    1,
                    BSB.FEB_QUANTITY,
                    2,
                    BSB.MAR_QUANTITY,
                    3,
                    BSB.APR_QUANTITY,
                    4,
                    BSB.MAY_QUANTITY,
                    5,
                    BSB.JUN_QUANTITY,
                    6,
                    BSB.JUL_QUANTITY,
                    7,
                    BSB.AUG_QUANTITY,
                    8,
                    BSB.SEP_QUANTITY,
                    9,
                    BSB.OCT_QUANTITY,
                    10,
                    BSB.NOV_QUANTITY,
                    11,
                    BSB.DEC_QUANTITY,
                    NULL) QUANTITY,
             DP.CENTER_SERIES_ID,
             DRS.REGION_ID,
             CP.PRIMARY_CUSTOMER_ID
        FROM dwstg.BSM_DISTRIBUTOR_BUDGET BSB,
             DIM_PRODUCT DP,
             DIM_REGION_AREA DRS,
             DIM_CUSTOMER_PRIMARY_MV CP,
             (SELECT 0 ID
                FROM DUAL
              UNION ALL
              SELECT 1 ID
                FROM DUAL
              UNION ALL
              SELECT 2 ID
                FROM DUAL
              UNION ALL
              SELECT 3 ID
                FROM DUAL
              UNION ALL
              SELECT 4 ID
                FROM DUAL
              UNION ALL
              SELECT 5 ID
                FROM DUAL
              UNION ALL
              SELECT 6 ID
                FROM DUAL
              UNION ALL
              SELECT 7 ID
                FROM DUAL
              UNION ALL
              SELECT 8 ID
                FROM DUAL
              UNION ALL
              SELECT 9 ID
                FROM DUAL
              UNION ALL
              SELECT 10 ID
                FROM DUAL
              UNION ALL
              SELECT 11 ID FROM DUAL) PRG
       WHERE BSB.CENTER_SERIES_ID = DP.CENTER_SERIES_SRC_ID --product_src_id
         AND BSB.REGION_ID = DRS.REGION_SRC_ID
         AND EXISTS
       (SELECT 1
                FROM SOAU.J$BSM_DISTRIBUTOR_BUDGET B
               WHERE B.DISTRIBUTOR_BUDGET_ID = BSB.DISTRIBUTOR_BUDGET_ID
                 AND B.JRN_CONSUMED = 1
                 AND B.JRN_FLAG = 'I')
         AND BSB.DISTRIBUTOR_ID = -CP.PRIMARY_CUSTOMER_SRC_ID;
  
    --删除日志表中已经操作的数据
    DELETE FROM soau.j$bsm_distributor_budget bsb
     WHERE bsb.jrn_consumed = 1
       AND bsb.jrn_subscriber = 'STG-DW';
  COMMIT;
  END;
END dw_load_distributor_budge_etl;
/

prompt
prompt Creating package body DW_LOAD_HIGH_ADD_PROD_ETL
prompt ===============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_high_add_prod_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      dw_load_high_add_prod_etl
  Description:
      This program provide high add prod.
           
  History: 
      1.00  2010-07-30  carter.wang  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
     1.00  2010-07-30  carter.wang  Creation
          
  History: 
     1.00  2010-07-30  carter.wang  Creationn
  ==================================================*/

  PROCEDURE main IS
  BEGIN
 
    --更新新高附加值产品
   UPDATE DIM_PRODUCT P
   SET HIGH_ADD_PROD_FLAG = 'Y'
 	 WHERE P.PRODUCT_ID IN
    (
        SELECT p.product_id
          FROM dim_product p,
               (
                  SELECT bha.rowid row_id,
                         bha.high_add_prod_id,
                         bha.inventory_item_id,
                         bha.center_series_id,
                         ffvv.flex_value             center_series_name,
                         bha.type_code,
                         bha.row_version_number,
                         bha.creation_date,
                         bha.created_by,
                         bha.last_updated_by,
                         bha.last_update_date,
                         bha.last_update_login,
                         bha.attribute_category,
                         bha.attribute1,
                         bha.attribute2,
                         bha.attribute3,
                         bha.attribute4,
                         bha.attribute5,
                         bha.attribute6,
                         bha.attribute7,
                         bha.attribute8,
                         bha.attribute9,
                         bha.attribute10,
                         bha.attribute11,
                         bha.attribute12,
                         bha.attribute13,
                         bha.attribute14,
                         bha.attribute15
                    FROM 
                    (
                    SELECT B.ROWID ROW_ID, B.FLEX_VALUE_SET_ID, B.FLEX_VALUE_ID, B.FLEX_VALUE, B.LAST_UPDATE_DATE, B.LAST_UPDATED_BY, B.CREATION_DATE, B.CREATED_BY, B.LAST_UPDATE_LOGIN, B.ENABLED_FLAG, B.SUMMARY_FLAG, B.START_DATE_ACTIVE, B.END_DATE_ACTIVE, B.PARENT_FLEX_VALUE_LOW, B.PARENT_FLEX_VALUE_HIGH, B.STRUCTURED_HIERARCHY_LEVEL, B.HIERARCHY_LEVEL, B.COMPILED_VALUE_ATTRIBUTES, B.VALUE_CATEGORY, B.ATTRIBUTE1, B.ATTRIBUTE2, B.ATTRIBUTE3, B.ATTRIBUTE4, B.ATTRIBUTE5, B.ATTRIBUTE6, B.ATTRIBUTE7, B.ATTRIBUTE8, B.ATTRIBUTE9, B.ATTRIBUTE10, B.ATTRIBUTE11, B.ATTRIBUTE12, B.ATTRIBUTE13, B.ATTRIBUTE14, B.ATTRIBUTE15, B.ATTRIBUTE16, B.ATTRIBUTE17, B.ATTRIBUTE18, B.ATTRIBUTE19, B.ATTRIBUTE20, B.ATTRIBUTE21, B.ATTRIBUTE22, B.ATTRIBUTE23, B.ATTRIBUTE24, B.ATTRIBUTE25, B.ATTRIBUTE26, B.ATTRIBUTE27, B.ATTRIBUTE28, B.ATTRIBUTE29, B.ATTRIBUTE30, B.ATTRIBUTE31, B.ATTRIBUTE32, B.ATTRIBUTE33, B.ATTRIBUTE34, B.ATTRIBUTE35, B.ATTRIBUTE36, B.ATTRIBUTE37, B.ATTRIBUTE38, B.ATTRIBUTE39, B.ATTRIBUTE40, B.ATTRIBUTE41, B.ATTRIBUTE42, B.ATTRIBUTE43, B.ATTRIBUTE44, B.ATTRIBUTE45, B.ATTRIBUTE46, B.ATTRIBUTE47, B.ATTRIBUTE48, B.ATTRIBUTE49, B.ATTRIBUTE50, T.FLEX_VALUE_MEANING, T.DESCRIPTION, B.ATTRIBUTE_SORT_ORDER from dwstg.FND_FLEX_VALUES_TL T, dwstg.FND_FLEX_VALUES B where B.FLEX_VALUE_ID = T.FLEX_VALUE_ID and T.LANGUAGE = userenv('LANG')
                    )
                              ffvv,
                         dwstg.fnd_flex_value_sets         ffv,
                         dwstg.BSM_HIGH_ADDITIONAL_PRODUCT bha
                   WHERE SYSDATE BETWEEN nvl(ffvv.start_date_active, SYSDATE - 1) AND nvl(ffvv.end_date_active, SYSDATE + 1)
                     AND ffvv.ENABLED_FLAG           = 'Y'
                     AND ffvv.flex_value_id          = bha.center_series_id
                     AND ffvv.flex_value_set_id      = ffv.flex_value_set_id
                     AND ffv.flex_value_set_name     = 'TBYX_ZXXL'
                     AND bha.type_code               = 'CTR_SER'
                    
               ) c
         WHERE c.center_series_id = p.center_series_src_id
         
         );
		
	 UPDATE DIM_PRODUCT P
   SET HIGH_ADD_PROD_FLAG = 'Y'
 	 WHERE P.PRODUCT_ID IN
    (
        SELECT p.product_id
         FROM dim_product p,
              (
                SELECT bha.rowid row_id,
                       bha.high_add_prod_id,
                       bha.inventory_item_id,
                       msi.segment1                    item_number,
                       msi.description                 item_desc,
                       bha.center_series_id,
                       mcb.segment1                    brand_category_name,
                       mcb.segment2                    brand_series_name,
                       mcb.segment5                    center_series_name,
                       mcb.segment6                    center_detail_name,
                       bha.type_code,
                       bha.row_version_number,
                       bha.creation_date,
                       bha.created_by,
                       bha.last_updated_by,
                       bha.last_update_date,
                       bha.last_update_login,
                       bha.attribute_category,
                       bha.attribute1,
                       bha.attribute2,
                       bha.attribute3,
                       bha.attribute4,
                       bha.attribute5,
                       bha.attribute6,
                       bha.attribute7,
                       bha.attribute8,
                       bha.attribute9,
                       bha.attribute10,
                       bha.attribute11,
                       bha.attribute12,
                       bha.attribute13,
                       bha.attribute14,
                       bha.attribute15
                  FROM dwstg.mtl_categories_b                   mcb,
                       dwstg.mtl_item_categories                mic,
					   dwstg.BSM_HIGH_ADDITIONAL_PRODUCT        bha,
                       dwstg.mtl_system_items_b                 msi
                 WHERE mcb.category_id(+)                 = mic.category_id
                   AND mic.category_set_id(+)             = 1100000061
                   AND mic.organization_id(+)             = 113
                   AND mic.inventory_item_id(+)           = bha.inventory_item_id
                   AND bha.inventory_item_id              = msi.inventory_item_id
                   AND msi.organization_id                = 113
                   AND bha.type_code                      = 'ITEM'              
              
              
              )i
         WHERE i.item_number = p.product_code
         
     
     );
         
    COMMIT;
  
  END;
END dw_load_high_add_prod_etl;
/

prompt
prompt Creating package body DW_LOAD_NEW_PROD_ETL
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.DW_LOAD_NEW_PROD_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_NEW_PROD_ETL
  Description:
      This program provide util function for region dimension for ETL.

  History:
      1.00  2009-11-19  Tsingtao Technology  Creation
  ==================================================*/
  PROCEDURE main IS
    CURSOR cur_new_prod IS
      SELECT bnp.center_detail_id,
             bnp.inventory_item_id,
             bnp.type_code
        FROM dwstg.BSM_NEW_PRODUCT bnp;
  BEGIN
    UPDATE dim_product dp
       SET dp.new_prod_flag = NULL;

    FOR r_new_prod IN cur_new_prod LOOP
      IF r_new_prod.type_code  = 'CTR_DTL' THEN
        UPDATE dim_product dp
           SET dp.new_prod_flag = 'Y'
         WHERE dp.detail_series_src_id = r_new_prod.center_detail_id;
      ELSIF r_new_prod.type_code = 'ITEM' THEN
        UPDATE dim_product dp
           SET dp.new_prod_flag = 'Y'
         WHERE dp.product_src_id = r_new_prod.inventory_item_id;
      END IF;
    END LOOP;

  END main;
END DW_LOAD_NEW_PROD_ETL;
/

prompt
prompt Creating package body DW_LOAD_PROVINCE_BUDGET_ETL
prompt =================================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_province_budget_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main IS
  BEGIN
    --锁定需要操作的数据
    UPDATE soau.j$bsm_province_battle_budget bsb SET bsb.jrn_consumed = 1 WHERE bsb.jrn_subscriber = 'STG-DW';
  
    --删除原表中已经删除的数据和需要更新的数据
    DELETE FROM tbdw.FACT_PROVINCE_BATTLE_BUDGET fsb
     WHERE EXISTS (SELECT 1
              FROM soau.j$bsm_province_battle_budget bsb
             WHERE bsb.sale_budget_id = fsb.source_id
               AND bsb.jrn_consumed = 1);
  
    --将新增的数据和更新的数据放入目标表
    INSERT INTO tbdw.FACT_PROVINCE_BATTLE_BUDGET
      (source_id, month_id, budget_qty, center_series_id, branch_id)
      SELECT bsb.sale_budget_id source_id,
             to_number(to_char(bsb.YEAR, 'yyyy')) * 100 + prg.id + 1 month_id,
             decode(prg.id,
                    0,
                    bsb.jan_quantity,
                    1,
                    bsb.feb_quantity,
                    2,
                    bsb.mar_quantity,
                    3,
                    bsb.apr_quantity,
                    4,
                    bsb.may_quantity,
                    5,
                    bsb.jun_quantity,
                    6,
                    bsb.jul_quantity,
                    7,
                    bsb.aug_quantity,
                    8,
                    bsb.sep_quantity,
                    9,
                    bsb.oct_quantity,
                    10,
                    bsb.nov_quantity,
                    11,
                    bsb.dec_quantity,
                    NULL) quantity,
             dp.center_series_id,
             drs.branch_id
        FROM dwstg.BSM_PROVINCE_BATTLE_BUDGET bsb,
             tbdw.DIM_PROD_CENTER_SERIES_V dp,
             tbdw.dim_region_branch drs,
             (SELECT 0 id
                FROM dual
              UNION ALL
              SELECT 1 id
                FROM dual
              UNION ALL
              SELECT 2 id
                FROM dual
              UNION ALL
              SELECT 3 id
                FROM dual
              UNION ALL
              SELECT 4 id
                FROM dual
              UNION ALL
              SELECT 5 id
                FROM dual
              UNION ALL
              SELECT 6 id
                FROM dual
              UNION ALL
              SELECT 7 id
                FROM dual
              UNION ALL
              SELECT 8 id
                FROM dual
              UNION ALL
              SELECT 9 id
                FROM dual
              UNION ALL
              SELECT 10 id
                FROM dual
              UNION ALL
              SELECT 11 id FROM dual) prg
       WHERE bsb.CENTER_SERIES_ID = dp.CENTER_SERIES_SRC_ID
         AND bsb.branch_id = drs.branch_src_id
         AND EXISTS (SELECT 1
                FROM soau.j$bsm_province_battle_budget b
               WHERE b.sale_budget_id = bsb.sale_budget_id
                 AND b.jrn_consumed = 1
                 AND b.jrn_flag = 'I');
  
    --删除日志表中已经操作的数据
    DELETE FROM soau.j$bsm_province_battle_budget bsb
     WHERE bsb.jrn_consumed = 1
       AND bsb.jrn_subscriber = 'STG-DW';
  
  END;
END dw_load_province_budget_etl;
/

prompt
prompt Creating package body DW_LOAD_REGION_NEW_ETL
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.DW_LOAD_REGION_NEW_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_REGION_ETL
  Description:
      This program provide util function for region dimension for ETL.
  
  History:
      1.00  2009-11-19  Tsingtao Technology  Creation
      1.10  2009-11-30  updated by Tsingtao
      1.20  2010-01-25  Updated by Hand Consultant
                            1. Region dimension table change
                            2. Before region adujustment project, only load 5 provice area & 9 provice office
      1.30  2010-02-04  Updated by Hand Consultant
                            处理只将二级区域调成办事处的情况
                            
      1.40 2011-09-28    Updated by Hand Consultant
                            区域从siebel系统抽取
  ==================================================*/
  --
  FUNCTION GET_REGION_ALT(P_REGION_SRC_ID IN NUMBER) RETURN VARCHAR2 IS
    L_REGION_ALT VARCHAR2(30);
  BEGIN
    SELECT REGION_NAME_ALT
      INTO L_REGION_ALT
      FROM DIM_REGION_AREA
     WHERE REGION_SRC_ID = P_REGION_SRC_ID;
  
    RETURN L_REGION_ALT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END GET_REGION_ALT;
  --
  PROCEDURE MAIN IS
    L_REGION_ID           NUMBER;
    L_ZONE_ID             NUMBER;
    L_BRANCH_ID           NUMBER;
    L_SECONDARY_REGION_ID NUMBER;
    L_TERRITORY_ID        NUMBER;
  
    CURSOR CUR_SECONDARY IS
      SELECT RS.REGION_SRC_ID,
             RS.REGION_NAME,
             GET_REGION_ALT(RS.REGION_SRC_ID) REGION_NAME_ALT,
             RS.ZONE_SRC_ID,
             RS.ZONE_NAME,
             RS.BRANCH_SRC_ID,
             RS.BRANCH_NAME,
             RS.BASE_ATTRIBUTE,
             RS.BATTLE_ATTRIBUTE, 
             RS.FACTORY_ATTRIBUTE, --added by guojuan 2011/12/22 是否工厂所在地
             RS.FACTORY_DESC,      --added by guojuan 2012/2/6 大区工厂说明
             RS.SECONDARY_REGION_SRC_ID,
             RS.SECONDARY_REGION_NAME,
             RS.SECONDARY_BASE_ATTRIBUTE,
             RS.SECONDARY_BATTLE_ATTRIBUTE,
             RS.SECONDARY_FACTORY_ATTRIBUTE  --added by guojuan 2011/12/22 是否工厂所在地
        FROM dwstg.STG_REGION_SECONDARY_SBL_ALL RS;
  BEGIN
    -- 1. 循环二级区域，插入维表
    FOR R_REGION IN CUR_SECONDARY LOOP
      -- 1.1 region
      BEGIN
        SELECT DRA.REGION_ID
          INTO L_REGION_ID
          FROM DIM_REGION_AREA DRA
         WHERE DRA.REGION_SRC_ID = R_REGION.REGION_SRC_ID;
      
        UPDATE DIM_REGION_AREA DRA
           SET DRA.REGION_NAME     = R_REGION.REGION_NAME,
               DRA.REGION_NAME_ALT = R_REGION.REGION_NAME_ALT
         WHERE DRA.REGION_SRC_ID = R_REGION.REGION_SRC_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          SELECT DIM_REGION_S.NEXTVAL INTO L_REGION_ID FROM DUAL;
        
          INSERT INTO DIM_REGION_AREA
            (REGION_ID, REGION_SRC_ID, REGION_NAME, REGION_NAME_ALT)
          VALUES
            (L_REGION_ID,
             R_REGION.REGION_SRC_ID,
             R_REGION.REGION_NAME,
             nvl(R_REGION.REGION_NAME_ALT,R_REGION.REGION_NAME));--updated by guojuan 2012/6/29 新创建的区域简称默认为region_name
      END;
    
      -- 1.2 zone
      BEGIN
        SELECT DRZ.ZONE_ID
          INTO L_ZONE_ID
          FROM DIM_REGION_ZONE DRZ
         WHERE DRZ.ZONE_SRC_ID = R_REGION.ZONE_SRC_ID;
      
        UPDATE DIM_REGION_ZONE DRZ
           SET DRZ.REGION_ID       = L_REGION_ID,
               DRZ.REGION_SRC_ID   = R_REGION.REGION_SRC_ID,
               DRZ.REGION_NAME     = R_REGION.REGION_NAME,
               DRZ.ZONE_NAME       = R_REGION.ZONE_NAME,
               DRZ.REGION_NAME_ALT = R_REGION.REGION_NAME_ALT
         WHERE DRZ.ZONE_SRC_ID = R_REGION.ZONE_SRC_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          SELECT DIM_REGION_S.NEXTVAL INTO L_ZONE_ID FROM DUAL;
        
          INSERT INTO DIM_REGION_ZONE
            (ZONE_ID,
             ZONE_SRC_ID,
             ZONE_NAME,
             REGION_ID,
             REGION_SRC_ID,
             REGION_NAME,
             REGION_NAME_ALT)
          VALUES
            (L_ZONE_ID,
             R_REGION.ZONE_SRC_ID,
             R_REGION.ZONE_NAME,
             L_REGION_ID,
             R_REGION.REGION_SRC_ID,
             R_REGION.REGION_NAME,
             R_REGION.REGION_NAME_ALT);
      END;
    
      -- 1.3 branch
      BEGIN
        SELECT BRANCH_ID
          INTO L_BRANCH_ID
          FROM DIM_REGION_BRANCH DRB
         WHERE DRB.BRANCH_SRC_ID = R_REGION.BRANCH_SRC_ID;
      
        UPDATE DIM_REGION_BRANCH DRB
           SET DRB.REGION_ID        = L_REGION_ID,
               DRB.REGION_SRC_ID    = R_REGION.REGION_SRC_ID,
               DRB.REGION_NAME      = R_REGION.REGION_NAME,
               DRB.REGION_NAME_ALT  = R_REGION.REGION_NAME_ALT,
               DRB.ZONE_NAME        = R_REGION.ZONE_NAME,
               DRB.ZONE_ID          = L_ZONE_ID,
               DRB.ZONE_SRC_ID      = R_REGION.ZONE_SRC_ID,
               DRB.BRANCH_NAME      = R_REGION.BRANCH_NAME,
               DRB.BASE_ATTRIBUTE   = R_REGION.BASE_ATTRIBUTE,
               DRB.BATTLE_ATTRIBUTE = R_REGION.BATTLE_ATTRIBUTE,
               DRB.FACTORY_ATTRIBUTE= R_REGION.FACTORY_ATTRIBUTE, --added by guojuan 2011/12/22 是否工厂所在地
               DRB.FACTORY_DESC     = R_REGION.FACTORY_DESC --added by guojuan 2012/2/6 大区工厂说明
         WHERE DRB.BRANCH_SRC_ID = R_REGION.BRANCH_SRC_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          SELECT DIM_REGION_S.NEXTVAL INTO L_BRANCH_ID FROM DUAL;
        
          INSERT INTO DIM_REGION_BRANCH
            (BRANCH_ID,
             BRANCH_SRC_ID,
             BRANCH_NAME,
             ZONE_ID,
             ZONE_SRC_ID,
             ZONE_NAME,
             REGION_ID,
             REGION_SRC_ID,
             REGION_NAME,
             REGION_NAME_ALT,
             BASE_ATTRIBUTE,
             BATTLE_ATTRIBUTE,
             FACTORY_ATTRIBUTE, --added by guojuan 2011/12/22 是否工厂所在地
             FACTORY_DESC       --added by guojuan 2012/2/6 大区工厂说明
             )
          VALUES
            (L_BRANCH_ID,
             R_REGION.BRANCH_SRC_ID,
             R_REGION.BRANCH_NAME,
             L_ZONE_ID,
             R_REGION.ZONE_SRC_ID,
             R_REGION.ZONE_NAME,
             L_REGION_ID,
             R_REGION.REGION_SRC_ID,
             R_REGION.REGION_NAME,
             R_REGION.REGION_NAME_ALT,
             R_REGION.BASE_ATTRIBUTE,
             R_REGION.BATTLE_ATTRIBUTE,
             R_REGION.FACTORY_ATTRIBUTE, --added by guojuan 2011/12/22 是否工厂所在地
             R_REGION.FACTORY_DESC       --added by guojuan 2012/2/6 大区工厂说明
             );
      END;
    
      -- 1.4 secondary region
      BEGIN
        -- 1.4.1 获取territory_id
        BEGIN
          SELECT RT.TERRITORY_ID
            INTO L_TERRITORY_ID
            FROM dwstg.RA_TERRITORIES RT
           WHERE RT.STATUS = 'A'
             AND RT.ENABLED_FLAG = 'Y'
             AND RT.ATTRIBUTE12 = R_REGION.ZONE_SRC_ID
             AND RT.ATTRIBUTE14 = R_REGION.SECONDARY_REGION_SRC_ID
             AND RT.ATTRIBUTE13 = R_REGION.REGION_SRC_ID
             AND RT.ATTRIBUTE15 = R_REGION.BRANCH_SRC_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_TERRITORY_ID := NULL;
        END;
      
        -- 1.4.2 insert/update
        BEGIN
          SELECT SECONDARY_REGION_ID
            INTO L_SECONDARY_REGION_ID
            FROM DIM_REGION_SECONDARY DRS
           WHERE DRS.SECONDARY_REGION_SRC_ID =
                 R_REGION.SECONDARY_REGION_SRC_ID;
        
          /*-- 对于费控中补齐的二级区域，secondary_region_id = branch_id
          IF r_region.secondary_region_name = r_region.branch_name || '缺省' THEN
            l_secondary_region_id := l_branch_id;
            l_secondary_region_name := r_region.branch_name || '_缺省';
          ELSE
            l_secondary_region_name := r_region.secondary_region_name;
          END IF;*/
        
          UPDATE DIM_REGION_SECONDARY DRS
             SET DRS.REGION_ID             = L_REGION_ID,
                 DRS.REGION_SRC_ID         = R_REGION.REGION_SRC_ID,
                 DRS.REGION_NAME           = R_REGION.REGION_NAME,
                 DRS.REGION_NAME_ALT       = R_REGION.REGION_NAME_ALT,
                 DRS.ZONE_NAME             = R_REGION.ZONE_NAME,
                 DRS.ZONE_ID               = L_ZONE_ID,
                 DRS.ZONE_SRC_ID           = R_REGION.ZONE_SRC_ID,
                 DRS.BRANCH_ID             = L_BRANCH_ID,
                 DRS.BRANCH_SRC_ID         = R_REGION.BRANCH_SRC_ID,
                 DRS.BRANCH_NAME           = R_REGION.BRANCH_NAME,
                 DRS.SECONDARY_REGION_NAME = R_REGION.SECONDARY_REGION_NAME,
                 DRS.TERRITORY_ID          = L_TERRITORY_ID,
                 DRS.BASE_ATTRIBUTE        = R_REGION.SECONDARY_BASE_ATTRIBUTE,
                 DRS.BATTLE_ATTRIBUTE      = R_REGION.SECONDARY_BATTLE_ATTRIBUTE,
                 DRS.FACTORY_ATTRIBUTE     = R_REGION.SECONDARY_FACTORY_ATTRIBUTE --added by guojuan 2011/12/22 是否工厂所在地
           WHERE DRS.SECONDARY_REGION_SRC_ID =
                 R_REGION.SECONDARY_REGION_SRC_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            /*-- 对于费控中补齐的二级区域，secondary_region_id = branch_id
            IF r_region.secondary_region_name = r_region.branch_name || '缺省' THEN
              l_secondary_region_id := l_branch_id;
              l_secondary_region_name := r_region.branch_name || '_缺省';
            ELSE
              SELECT dim_region_s.NEXTVAL INTO l_secondary_region_id FROM dual;
              l_secondary_region_name := r_region.secondary_region_name;
            END IF;*/
            SELECT DIM_REGION_S.NEXTVAL
              INTO L_SECONDARY_REGION_ID
              FROM DUAL;
          
            INSERT INTO DIM_REGION_SECONDARY
              (SECONDARY_REGION_ID,
               SECONDARY_REGION_SRC_ID,
               SECONDARY_REGION_NAME,
               TERRITORY_ID,
               BRANCH_ID,
               BRANCH_SRC_ID,
               BRANCH_NAME,
               ZONE_ID,
               ZONE_SRC_ID,
               ZONE_NAME,
               REGION_ID,
               REGION_SRC_ID,
               REGION_NAME,
               REGION_NAME_ALT,
               BASE_ATTRIBUTE,
               BATTLE_ATTRIBUTE,
               FACTORY_ATTRIBUTE --added by guojuan 2011/12/22 是否工厂所在地
               )
            VALUES
              (L_SECONDARY_REGION_ID,
               R_REGION.SECONDARY_REGION_SRC_ID,
               R_REGION.SECONDARY_REGION_NAME,
               L_TERRITORY_ID,
               L_BRANCH_ID,
               R_REGION.BRANCH_SRC_ID,
               R_REGION.BRANCH_NAME,
               L_ZONE_ID,
               R_REGION.ZONE_SRC_ID,
               R_REGION.ZONE_NAME,
               L_REGION_ID,
               R_REGION.REGION_SRC_ID,
               R_REGION.REGION_NAME,
               R_REGION.REGION_NAME_ALT,
               R_REGION.SECONDARY_BASE_ATTRIBUTE,
               R_REGION.SECONDARY_BATTLE_ATTRIBUTE,
               R_REGION.SECONDARY_FACTORY_ATTRIBUTE --added by guojuan 2011/12/22 是否工厂所在地
               );
        END;
      END;
    END LOOP;
  
    -- 2. 补齐区域
    -- 2.1 大区补齐
    -- 2.1.1 大区补到片区
    MERGE INTO DIM_REGION_ZONE DEST
    USING (SELECT REGION_ID, REGION_SRC_ID, REGION_NAME, REGION_NAME_ALT
             FROM DIM_REGION_AREA
            WHERE REGION_ID NOT IN (0, 999999999)) SRC
    ON (DEST.ZONE_ID = SRC.REGION_ID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.ZONE_NAME       = SRC.REGION_NAME || '_缺省',
             DEST.ZONE_SRC_ID     = SRC. REGION_SRC_ID,
             DEST.REGION_NAME     = SRC.REGION_NAME,
             DEST.REGION_NAME_ALT = SRC.REGION_NAME_ALT,
             DEST.REGION_ID       = SRC.REGION_ID,
             DEST.REGION_SRC_ID   = SRC.REGION_SRC_ID
    WHEN NOT MATCHED THEN
      INSERT
        (DEST.ZONE_ID,
         DEST.ZONE_SRC_ID,
         DEST.ZONE_NAME,
         DEST.REGION_ID,
         DEST.REGION_SRC_ID,
         DEST.REGION_NAME,
         DEST.REGION_NAME_ALT)
      VALUES
        (SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME || '_缺省',
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME,
         SRC.REGION_NAME_ALT);
    -- 2.1.2 大区补到城市大区
    MERGE INTO DIM_REGION_BRANCH DEST
    USING (SELECT REGION_ID, REGION_SRC_ID, REGION_NAME, REGION_NAME_ALT
             FROM DIM_REGION_AREA
            WHERE REGION_ID NOT IN (0, 999999999)) SRC
    ON (DEST.BRANCH_ID = SRC.REGION_ID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.BRANCH_NAME     = SRC.REGION_NAME || '_缺省',
             DEST.BRANCH_SRC_ID   = SRC.REGION_SRC_ID,
             DEST.ZONE_NAME       = SRC.REGION_NAME || '_缺省',
             DEST.ZONE_SRC_ID     = SRC.REGION_SRC_ID,
             DEST.ZONE_ID         = SRC.REGION_ID,
             DEST.REGION_NAME     = SRC.REGION_NAME,
             DEST.REGION_NAME_ALT = SRC.REGION_NAME_ALT,
             DEST.REGION_ID       = SRC.REGION_ID,
             DEST.REGION_SRC_ID   = SRC.REGION_SRC_ID
    WHEN NOT MATCHED THEN
      INSERT
        (DEST.BRANCH_ID,
         DEST.BRANCH_SRC_ID,
         DEST.BRANCH_NAME,
         DEST.ZONE_ID,
         DEST.ZONE_SRC_ID,
         DEST.ZONE_NAME,
         DEST.REGION_ID,
         DEST.REGION_SRC_ID,
         DEST.REGION_NAME,
         DEST.REGION_NAME_ALT)
      VALUES
        (SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME || '_缺省',
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME || '_缺省',
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME,
         SRC.REGION_NAME_ALT);
    -- 2.1.3 大区补到二级区域
    MERGE INTO DIM_REGION_SECONDARY DEST
    USING (SELECT REGION_ID, REGION_SRC_ID, REGION_NAME, REGION_NAME_ALT
             FROM DIM_REGION_AREA
            WHERE REGION_ID NOT IN (0, 999999999)) SRC
    ON (DEST.SECONDARY_REGION_ID = SRC.REGION_ID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.SECONDARY_REGION_NAME   = SRC.REGION_NAME || '_缺省',
             DEST.SECONDARY_REGION_SRC_ID = SRC.REGION_SRC_ID,
             DEST.BRANCH_NAME             = SRC.REGION_NAME || '_缺省',
             DEST.BRANCH_SRC_ID           = SRC.REGION_SRC_ID,
             DEST.BRANCH_ID               = SRC.REGION_ID,
             DEST.ZONE_NAME               = SRC.REGION_NAME || '_缺省',
             DEST.ZONE_SRC_ID             = SRC.REGION_SRC_ID,
             DEST.ZONE_ID                 = SRC.REGION_ID,
             DEST.REGION_NAME             = SRC.REGION_NAME,
             DEST.REGION_NAME_ALT         = SRC.REGION_NAME_ALT,
             DEST.REGION_ID               = SRC.REGION_ID,
             DEST.REGION_SRC_ID           = SRC.REGION_SRC_ID
    WHEN NOT MATCHED THEN
      INSERT
        (DEST.SECONDARY_REGION_ID,
         DEST.SECONDARY_REGION_SRC_ID,
         DEST.SECONDARY_REGION_NAME,
         DEST.BRANCH_ID,
         DEST.BRANCH_SRC_ID,
         DEST.BRANCH_NAME,
         DEST.ZONE_ID,
         DEST.ZONE_SRC_ID,
         DEST.ZONE_NAME,
         DEST.REGION_ID,
         DEST.REGION_SRC_ID,
         DEST.REGION_NAME,
         DEST.REGION_NAME_ALT)
      VALUES
        (SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME || '_缺省',
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME || '_缺省',
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME || '_缺省',
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME,
         SRC.REGION_NAME_ALT);
    -- 2.2 片区补齐
    -- 2.2.1 片区补到城市大区
    MERGE INTO DIM_REGION_BRANCH DEST
    USING (SELECT ZONE_ID,
                  ZONE_SRC_ID,
                  ZONE_NAME,
                  REGION_ID,
                  REGION_SRC_ID,
                  REGION_NAME,
                  REGION_NAME_ALT
             FROM DIM_REGION_ZONE
            WHERE ZONE_NAME NOT LIKE '%_缺省'
              AND ZONE_ID NOT IN (0, 999999999)) SRC
    ON (DEST.BRANCH_ID = SRC.ZONE_ID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.BRANCH_NAME     = SRC.ZONE_NAME || '_缺省',
             DEST.BRANCH_SRC_ID   = SRC.ZONE_SRC_ID,
             DEST.ZONE_NAME       = SRC.ZONE_NAME,
             DEST.ZONE_ID         = SRC.ZONE_ID,
             DEST.ZONE_SRC_ID     = SRC.ZONE_SRC_ID,
             DEST.REGION_NAME     = SRC.REGION_NAME,
             DEST.REGION_NAME_ALT = SRC.REGION_NAME_ALT,
             DEST.REGION_ID       = SRC.REGION_ID,
             DEST.REGION_SRC_ID   = SRC.REGION_SRC_ID
    WHEN NOT MATCHED THEN
      INSERT
        (DEST.BRANCH_ID,
         DEST.BRANCH_SRC_ID,
         DEST.BRANCH_NAME,
         DEST.ZONE_ID,
         DEST.ZONE_SRC_ID,
         DEST.ZONE_NAME,
         DEST.REGION_ID,
         DEST.REGION_SRC_ID,
         DEST.REGION_NAME,
         DEST.REGION_NAME_ALT)
      VALUES
        (SRC.ZONE_ID,
         SRC.ZONE_SRC_ID,
         SRC.ZONE_NAME || '_缺省',
         SRC.ZONE_ID,
         SRC.ZONE_SRC_ID,
         SRC.ZONE_NAME,
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME,
         SRC.REGION_NAME_ALT);
    -- 2.2.2 片区补到二级区域
    MERGE INTO DIM_REGION_SECONDARY DEST
    USING (SELECT ZONE_ID,
                  ZONE_SRC_ID,
                  ZONE_SRC_TYPE,
                  ZONE_NAME,
                  REGION_ID,
                  REGION_SRC_ID,
                  REGION_NAME,
                  REGION_NAME_ALT
             FROM DIM_REGION_ZONE
            WHERE ZONE_NAME NOT LIKE '%_缺省'
              AND ZONE_ID NOT IN (0, 999999999)) SRC
    ON (DEST.SECONDARY_REGION_ID = SRC.ZONE_ID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.SECONDARY_REGION_NAME   = SRC.ZONE_NAME || '_缺省',
             DEST.SECONDARY_REGION_SRC_ID = SRC.ZONE_SRC_ID,
             DEST.BRANCH_NAME             = SRC.ZONE_NAME || '_缺省',
             DEST.BRANCH_ID               = SRC.ZONE_ID,
             DEST.BRANCH_SRC_ID           = SRC.ZONE_SRC_ID,
             DEST.ZONE_NAME               = SRC.ZONE_NAME,
             DEST.ZONE_ID                 = SRC.ZONE_ID,
             DEST.ZONE_SRC_ID             = SRC.ZONE_SRC_ID,
             DEST.REGION_NAME             = SRC.REGION_NAME,
             DEST.REGION_NAME_ALT         = SRC.REGION_NAME_ALT,
             DEST.REGION_ID               = SRC.REGION_ID,
             DEST.REGION_SRC_ID           = SRC.REGION_SRC_ID
    WHEN NOT MATCHED THEN
      INSERT
        (DEST.SECONDARY_REGION_ID,
         DEST.SECONDARY_REGION_SRC_ID,
         DEST.SECONDARY_REGION_NAME,
         DEST.BRANCH_ID,
         DEST.BRANCH_SRC_ID,
         DEST.BRANCH_NAME,
         DEST.ZONE_ID,
         DEST.ZONE_SRC_ID,
         DEST.ZONE_NAME,
         DEST.REGION_ID,
         DEST.REGION_SRC_ID,
         DEST.REGION_NAME,
         DEST.REGION_NAME_ALT)
      VALUES
        (SRC.ZONE_ID,
         SRC.ZONE_SRC_ID,
         SRC.ZONE_NAME || '_缺省',
         SRC.ZONE_ID,
         SRC.ZONE_SRC_ID,
         SRC.ZONE_NAME || '_缺省',
         SRC.ZONE_ID,
         SRC.ZONE_SRC_ID,
         SRC.ZONE_NAME,
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME,
         SRC.REGION_NAME_ALT);
  
    -- 2.3 城市大区补齐
    -- 2.3.1 城市大区补到二级区域
    MERGE INTO DIM_REGION_SECONDARY DEST
    USING (SELECT BRANCH_ID,
                  BRANCH_SRC_ID,
                  BRANCH_NAME,
                  ZONE_ID,
                  ZONE_SRC_ID,
                  ZONE_NAME,
                  REGION_ID,
                  REGION_SRC_ID,
                  REGION_NAME,
                  REGION_NAME_ALT,
                  BASE_ATTRIBUTE,
                  BATTLE_ATTRIBUTE,
                  FACTORY_ATTRIBUTE --added by guojuan 2011/12/22 是否工厂所在地
             FROM DIM_REGION_BRANCH
            WHERE /*branch_name NOT LIKE '%_缺省'
                                                                                                                                                                                              AND*/
            ZONE_ID NOT IN (0, 999999999)) SRC
    ON (DEST.SECONDARY_REGION_ID = SRC.BRANCH_ID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.SECONDARY_REGION_NAME   = SRC.BRANCH_NAME || '_缺省',
             DEST.SECONDARY_REGION_SRC_ID = SRC.BRANCH_SRC_ID,
             DEST.BRANCH_NAME             = SRC.BRANCH_NAME,
             DEST.BRANCH_ID               = SRC.BRANCH_ID,
             DEST.BRANCH_SRC_ID           = SRC.BRANCH_SRC_ID,
             DEST.ZONE_NAME               = SRC.ZONE_NAME,
             DEST.ZONE_ID                 = SRC.ZONE_ID,
             DEST.ZONE_SRC_ID             = SRC.ZONE_SRC_ID,
             DEST.REGION_NAME             = SRC.REGION_NAME,
             DEST.REGION_NAME_ALT         = SRC.REGION_NAME_ALT,
             DEST.REGION_ID               = SRC.REGION_ID,
             DEST.REGION_SRC_ID           = SRC.REGION_SRC_ID,
             DEST.BASE_ATTRIBUTE          = SRC.BASE_ATTRIBUTE,
             DEST.BATTLE_ATTRIBUTE        = SRC.BATTLE_ATTRIBUTE,
             DEST.FACTORY_ATTRIBUTE       = SRC.FACTORY_ATTRIBUTE  --added by guojuan 2011/12/22 是否工厂所在地
    WHEN NOT MATCHED THEN
      INSERT
        (DEST.SECONDARY_REGION_ID,
         DEST.SECONDARY_REGION_SRC_ID,
         DEST.SECONDARY_REGION_NAME,
         DEST.BRANCH_ID,
         DEST.BRANCH_SRC_ID,
         DEST.BRANCH_NAME,
         DEST.ZONE_ID,
         DEST.ZONE_SRC_ID,
         DEST.ZONE_NAME,
         DEST.REGION_ID,
         DEST.REGION_SRC_ID,
         DEST.REGION_NAME,
         DEST.REGION_NAME_ALT,
         DEST.BASE_ATTRIBUTE,
         DEST.BATTLE_ATTRIBUTE,
         DEST.FACTORY_ATTRIBUTE --added by guojuan 2011/12/22 是否工厂所在地
         )
      VALUES
        (SRC.BRANCH_ID,
         SRC.BRANCH_SRC_ID,
         SRC.BRANCH_NAME || '_缺省',
         SRC.BRANCH_ID,
         SRC.BRANCH_SRC_ID,
         SRC.BRANCH_NAME,
         SRC.ZONE_ID,
         SRC.ZONE_SRC_ID,
         SRC.ZONE_NAME,
         SRC.REGION_ID,
         SRC.REGION_SRC_ID,
         SRC.REGION_NAME,
         SRC.REGION_NAME_ALT,
         SRC.BASE_ATTRIBUTE,
         SRC.BATTLE_ATTRIBUTE,
         SRC.FACTORY_ATTRIBUTE  --added by guojuan 2011/12/22 是否工厂所在地
         );
    -- 3. 特殊处理
    -- 3.1 如果城市大区上设置基地,战役属性和工厂所在地属性，则所有下属二级区域设置相同的基地、战役、工厂所在地属性
    FOR R IN (SELECT BRANCH_ID, BASE_ATTRIBUTE, BATTLE_ATTRIBUTE, FACTORY_ATTRIBUTE
                FROM DIM_REGION_BRANCH
               WHERE BASE_ATTRIBUTE IS NOT NULL
                  OR BATTLE_ATTRIBUTE IS NOT NULL
                  OR FACTORY_ATTRIBUTE IS NOT NULL) LOOP
      UPDATE DIM_REGION_SECONDARY DRS
         SET DRS.BASE_ATTRIBUTE   = R.BASE_ATTRIBUTE,
             DRS.BATTLE_ATTRIBUTE = R.BATTLE_ATTRIBUTE,
             DRS.FACTORY_ATTRIBUTE = R.FACTORY_ATTRIBUTE  --added by guojuan 2011/12/22 是否工厂所在地
       WHERE DRS.BRANCH_ID = R.BRANCH_ID;
    END LOOP;
  
    -- 3.2 更新排序属性
    -- 3.2.1 片区
    UPDATE DIM_REGION_ZONE Z
       SET Z.REGION_PRIORITY =
           (SELECT A.REGION_PRIORITY
              FROM DIM_REGION_AREA A
             WHERE Z.REGION_ID = A.REGION_ID);
    -- 3.2.2 城市大区
    UPDATE DIM_REGION_BRANCH Z
       SET (Z.REGION_PRIORITY, Z.ZONE_PRIORITY) =
           (SELECT A.REGION_PRIORITY, A.ZONE_PRIORITY
              FROM DIM_REGION_ZONE A
             WHERE Z.ZONE_ID = A.ZONE_ID);
  END MAIN;
  --
END DW_LOAD_REGION_NEW_ETL;
/

prompt
prompt Creating package body DW_LOAD_SALE_BUDGE_ETL
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.dw_load_sale_budge_etl IS

  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_SALE_BUDGE_PKG
  Description:
      This program provide util function for fact DELIERY for ETL.
           
  History: 
      1.00  2010-1-27  Hand Consultant  Creation
  ==================================================*/
  --
  /*==================================================
  Procedure Name :
      main
  Description:
      This procedure proceed the fact sale budge etl.
          
  History: 
      1.00  2010-1-27  hand  Creation
  ==================================================*/

  PROCEDURE main IS
  BEGIN
    --锁定需要操作的数据
    UPDATE soau.j$bsm_sale_budget bsb SET bsb.jrn_consumed = 1 WHERE bsb.jrn_subscriber = 'STG-DW';
  
    --删除原表中已经删除的数据和需要更新的数据
    DELETE FROM fact_sale_budget fsb
     WHERE EXISTS (SELECT 1
              FROM soau.j$bsm_sale_budget bsb
             WHERE bsb.sale_budget_id = fsb.source_id
               AND bsb.jrn_consumed = 1);
  
    --将新增的数据和更新的数据放入目标表
    INSERT INTO fact_sale_budget
      (source_id, month_id, budget_qty, detail_series_id, branch_id)
      SELECT bsb.sale_budget_id source_id,
             to_number(to_char(bsb.YEAR, 'yyyy')) * 100 + prg.id + 1 month_id,
             decode(prg.id,
                    0,
                    bsb.jan_quantity,
                    1,
                    bsb.feb_quantity,
                    2,
                    bsb.mar_quantity,
                    3,
                    bsb.apr_quantity,
                    4,
                    bsb.may_quantity,
                    5,
                    bsb.jun_quantity,
                    6,
                    bsb.jul_quantity,
                    7,
                    bsb.aug_quantity,
                    8,
                    bsb.sep_quantity,
                    9,
                    bsb.oct_quantity,
                    10,
                    bsb.nov_quantity,
                    11,
                    bsb.dec_quantity,
                    NULL) quantity,
             dp.detail_series_id,
             drs.branch_id
        FROM dwstg.BSM_SALE_BUDGET bsb,
             dim_product dp,
             dim_region_branch drs,
             (SELECT 0 id
                FROM dual
              UNION ALL
              SELECT 1 id
                FROM dual
              UNION ALL
              SELECT 2 id
                FROM dual
              UNION ALL
              SELECT 3 id
                FROM dual
              UNION ALL
              SELECT 4 id
                FROM dual
              UNION ALL
              SELECT 5 id
                FROM dual
              UNION ALL
              SELECT 6 id
                FROM dual
              UNION ALL
              SELECT 7 id
                FROM dual
              UNION ALL
              SELECT 8 id
                FROM dual
              UNION ALL
              SELECT 9 id
                FROM dual
              UNION ALL
              SELECT 10 id
                FROM dual
              UNION ALL
              SELECT 11 id FROM dual) prg
       WHERE -bsb.detail_series_id = dp.product_src_id
         AND bsb.branch_id = drs.branch_src_id
         AND EXISTS (SELECT 1
                FROM soau.j$bsm_sale_budget b
               WHERE b.sale_budget_id = bsb.sale_budget_id
                 AND b.jrn_consumed = 1
                 AND b.jrn_flag = 'I');
  
    --删除日志表中已经操作的数据
    DELETE FROM soau.j$bsm_sale_budget bsb
     WHERE bsb.jrn_consumed = 1
       AND bsb.jrn_subscriber = 'STG-DW';
  
  END;
END dw_load_sale_budge_etl;
/

prompt
prompt Creating package body DW_LOAD_TRADE_LEVEL_ETL
prompt =============================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.DW_LOAD_TRADE_LEVEL_ETL IS
  /*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
  /*==================================================
  Program Name:
      DW_LOAD_REGION_ETL
  Description:
      This program provide util function for region dimension for ETL.

  History:
      1.00  2009-11-19  Tsingtao Technology  Creation
      1.10  2009-11-30  updated by Tsingtao
      1.20  2010-01-25  Updated by Hand Consultant
                            1. Region dimension table change
                            2. Before region adujustment project, only load 5 provice area & 9 provice office
      1.30  2010-02-04  Updated by Hand Consultant
                            处理只将二级区域调成办事处的情况
  ==================================================*/
--
  /*==================================================
  Function Name :
      get_branch_province
  Description:
      This Function to get the province of 5 provice area or 9 province office.

  History:
       1.00  2010-01-27  Hand Consultant  Creation
  ==================================================*/
--
  PROCEDURE main IS
    l_count                   NUMBER;
    l_trade_group_id          NUMBER;
    l_trade_group_name        VARCHAR2(255);
    l_trade_company_id        NUMBER;
    l_trade_company_name      VARCHAR2(255);
    
    CURSOR cur_trade_group IS
      SELECT ffv.flex_value_id,
             ffv.flex_value,
             ffvv.description
        FROM dwstg.fnd_flex_values_tl ffvv, 
             dwstg.fnd_flex_values ffv,
             dwstg.fnd_flex_value_sets ffvs
       WHERE SYSDATE BETWEEN nvl(ffv.start_date_active, SYSDATE - 1) AND nvl(ffv.end_date_active, SYSDATE + 1)
         AND nvl(ffv.ENABLED_FLAG,'Y') = 'Y'
         AND ffvv.language = 'ZHS'
         AND ffvv.flex_value_id = ffv.flex_value_id
         AND ffv.hierarchy_level = '0'
         AND ffv.flex_value_set_id = ffvs.flex_value_set_id
         AND ffvs.flex_value_set_name = 'BSM_BI_TRADE_LEVEL';
  
    CURSOR cur_trade_company IS
      SELECT ffv.flex_value_id,
             ffv.flex_value,
             ffvv.description
        FROM dwstg.fnd_flex_values_tl ffvv, 
             dwstg.fnd_flex_values ffv,
             dwstg.fnd_flex_value_sets ffvs
       WHERE SYSDATE BETWEEN nvl(ffv.start_date_active, SYSDATE - 1) AND nvl(ffv.end_date_active, SYSDATE + 1)
         AND nvl(ffv.ENABLED_FLAG,'Y') = 'Y'
         AND ffvv.language = 'ZHS'
         AND ffvv.flex_value_id = ffv.flex_value_id
         AND ffv.hierarchy_level = '1'
         AND ffv.flex_value_set_id = ffvs.flex_value_set_id
         AND ffvs.flex_value_set_name = 'BSM_BI_TRADE_LEVEL';
         
    CURSOR cur_trade_factory IS
      SELECT ffv.flex_value_id,
             ffv.flex_value,
             ffvv.description
        FROM dwstg.fnd_flex_values_tl ffvv, 
             dwstg.fnd_flex_values ffv,
             dwstg.fnd_flex_value_sets ffvs
       WHERE SYSDATE BETWEEN nvl(ffv.start_date_active, SYSDATE - 1) AND nvl(ffv.end_date_active, SYSDATE + 1)
         AND nvl(ffv.ENABLED_FLAG,'Y') = 'Y'
         AND ffvv.language = 'ZHS'
         AND ffvv.flex_value_id = ffv.flex_value_id
         AND ffv.hierarchy_level = '2'
         AND ffv.flex_value_set_id = ffvs.flex_value_set_id
         AND ffvs.flex_value_set_name = 'BSM_BI_TRADE_LEVEL';
  BEGIN
    FOR r_trade_group IN cur_trade_group LOOP
      SELECT COUNT(1)
        INTO l_count
        FROM dim_trade_group    drg
       WHERE drg.trade_group_id = r_trade_group.flex_value_id;
       
      IF l_count > 0 THEN
        UPDATE dim_trade_group      dtg
           SET dtg.trade_group_name = r_trade_group.description
         WHERE dtg.trade_group_id   = r_trade_group.flex_value_id;
      ELSE
        INSERT INTO dim_trade_group
          (TRADE_GROUP_ID,
           TRADE_GROUP_NAME)
        VALUES
          (r_trade_group.flex_value_id,
           r_trade_group.description);
      END IF;
    END LOOP;
    
    FOR r_trade_company IN cur_trade_company LOOP
      BEGIN
        SELECT ffv.flex_value_id,
               ffvv.description
          INTO l_trade_group_id,
               l_trade_group_name
          FROM dwstg.fnd_flex_values_tl ffvv, 
               dwstg.fnd_flex_values ffv,
               dwstg.fnd_flex_value_sets ffvs
         WHERE SYSDATE BETWEEN nvl(ffv.start_date_active, SYSDATE - 1) AND nvl(ffv.end_date_active, SYSDATE + 1)
           AND nvl(ffv.ENABLED_FLAG,'Y') = 'Y'
           AND ffvv.language = 'ZHS'
           AND ffvv.flex_value_id = ffv.flex_value_id
           AND ffv.flex_value = substr(r_trade_company.flex_value, 1, instr(r_trade_company.flex_value, '.', 1, 1) - 1)
           AND ffv.hierarchy_level = '0'
           AND ffv.flex_value_set_id = ffv.flex_value_set_id
           AND ffvs.flex_value_set_name = 'BSM_BI_TRADE_LEVEL';
      EXCEPTION
        WHEN OTHERS THEN 
          dbms_output.put_line(SQLERRM);
          dbms_output.put_line('r_trade_company.flex_value:'||r_trade_company.flex_value);
          l_trade_group_id   := NULL;
          l_trade_group_name := NULL;
      END;
      
      dbms_output.put_line('r_trade_company.flex_value_id:'||r_trade_company.flex_value_id);
      dbms_output.put_line('r_trade_company.flex_value:'||r_trade_company.flex_value);
      dbms_output.put_line('l_trade_group_id:'||l_trade_group_id);
      dbms_output.put_line('l_trade_group_name:'||l_trade_group_name);
      
      
      IF l_trade_group_id IS NOT NULL THEN 
        SELECT COUNT(1)
          INTO l_count
          FROM dim_trade_company   dtc
         WHERE dtc.trade_company_id = r_trade_company.flex_value_id;
        
        IF l_count > 0 THEN
          UPDATE dim_trade_company      dtc
             SET dtc.trade_group_id     = l_trade_group_id,
                 dtc.trade_group_name   = l_trade_group_name,
                 dtc.trade_company_name = r_trade_company.description
           WHERE dtc.trade_company_id   = r_trade_company.flex_value_id; 
        ELSE   
          INSERT INTO dim_trade_company 
            (TRADE_COMPANY_ID,
             TRADE_COMPANY_NAME,
             TRADE_GROUP_ID,
             TRADE_GROUP_NAME)
          VALUES
            (r_trade_company.flex_value_id,
             r_trade_company.description,
             l_trade_group_id,
             l_trade_group_name);
        END IF;
      END IF;
    END LOOP;
    
    FOR r_trade_factory IN cur_trade_factory LOOP
      BEGIN
        SELECT ffvv.flex_value_id,
               ffvv.description
          INTO l_trade_group_id,
               l_trade_group_name
          FROM dwstg.fnd_flex_values_tl ffvv, 
               dwstg.fnd_flex_values ffv,
               dwstg.fnd_flex_value_sets ffvs
         WHERE SYSDATE BETWEEN nvl(ffv.start_date_active, SYSDATE - 1) AND nvl(ffv.end_date_active, SYSDATE + 1)
           AND nvl(ffv.ENABLED_FLAG,'Y') = 'Y'
           AND ffvv.language = 'ZHS'
           AND ffvv.flex_value_id = ffv.flex_value_id
           AND ffv.flex_value = substr(r_trade_factory.flex_value, 1, instr(r_trade_factory.flex_value, '.', 1, 1) - 1)
           AND ffv.hierarchy_level = '0'
           AND ffv.flex_value_set_id = ffv.flex_value_set_id
           AND ffvs.flex_value_set_name = 'BSM_BI_TRADE_LEVEL';
      EXCEPTION
        WHEN OTHERS THEN 
          dbms_output.put_line('r_trade_factory.flex_value:'||r_trade_factory.flex_value);
          dbms_output.put_line(SQLERRM);
          l_trade_group_id   := NULL;
          l_trade_group_name := NULL;
      END;
      
      BEGIN
        SELECT ffvv.flex_value_id,
               ffvv.description
          INTO l_trade_company_id,
               l_trade_company_name
          FROM dwstg.fnd_flex_values_tl ffvv, 
               dwstg.fnd_flex_values ffv,
               dwstg.fnd_flex_value_sets ffvs
         WHERE SYSDATE BETWEEN nvl(ffv.start_date_active, SYSDATE - 1) AND nvl(ffv.end_date_active, SYSDATE + 1)
           AND nvl(ffv.ENABLED_FLAG,'Y') = 'Y'
           AND ffvv.language = 'ZHS'
           AND ffvv.flex_value_id = ffv.flex_value_id
           AND ffv.flex_value = substr(r_trade_factory.flex_value, 1, instr(r_trade_factory.flex_value, '.', 1, 2) - 1)
           AND ffv.hierarchy_level = '1'
           AND ffv.flex_value_set_id = ffv.flex_value_set_id
           AND ffvs.flex_value_set_name = 'BSM_BI_TRADE_LEVEL';
      EXCEPTION
        WHEN OTHERS THEN 
          dbms_output.put_line('r_trade_factory.flex_value:'||r_trade_factory.flex_value);
          dbms_output.put_line(SQLERRM);
          l_trade_company_id   := NULL;
          l_trade_company_name := NULL;
      END;      
      
      IF l_trade_group_id IS NOT NULL AND l_trade_company_id IS NOT NULL THEN 
        SELECT COUNT(1)
          INTO l_count 
          FROM dim_trade_factory   dtf
         WHERE dtf.trade_factory_id = r_trade_factory.flex_value_id;
      
        IF l_count > 0 THEN
          UPDATE dim_trade_factory dtf
             SET dtf.trade_factory_name = r_trade_factory.description,
                 dtf.trade_company_id   = l_trade_company_id,
                 dtf.trade_company_name = l_trade_company_name,
                 dtf.trade_group_id     = l_trade_group_id,
                 dtf.trade_group_name   = l_trade_group_name
           WHERE dtf.trade_factory_id   = r_trade_factory.flex_value_id;
        ELSE
          INSERT INTO dim_trade_factory
            (trade_factory_id,
             trade_factory_name,
             trade_company_id,
             trade_company_name,
             trade_group_id,
             trade_group_name)
          VALUES 
            (r_trade_factory.flex_value_id,
             r_trade_factory.description,
             l_trade_company_id,
             l_trade_company_name,
             l_trade_group_id,
             l_trade_group_name);
        END IF;
      END IF;  
    END LOOP;
    
   
  END main;
  --
END DW_LOAD_TRADE_LEVEL_ETL;
/

prompt
prompt Creating package body DW_NEW_SALE_ETL
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.DW_NEW_SALE_ETL IS
  --??????????????????????????????
  FUNCTION GET_DAY_QTY(P_ZONE_ID          IN NUMBER,
                       P_DETAIL_SERIES_ID IN NUMBER,
                       P_DATE             IN DATE) RETURN NUMBER IS
    L_DAY_QTY  NUMBER;
    L_LAST_DAY VARCHAR2(10);
  BEGIN
    BEGIN
      SELECT TO_CHAR(MAX(BNSQ.SALE_DATE), 'YYYYMMDD')
        INTO L_LAST_DAY
        FROM dwstg.BSM_NEW_SALE_QUANTITY BNSQ,
             DIM_REGION_ZONE            DRZ,
             DIM_TIME_GL_MONTH          DTG
       WHERE DECODE(BNSQ.SOURCE_CODE,
                    'ERP',
                    BNSQ.ZONE_ID,
                    'MANUAL',
                    BNSQ.ZONE_ID,
                    SUBSTR(BNSQ.ZONE_ID, 1, LENGTH(BNSQ.ZONE_ID) - 1)) =
             DRZ.ZONE_SRC_ID
         AND BNSQ.SOURCE_CODE = DRZ.ZONE_SRC_TYPE
         AND BNSQ.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
         AND DRZ.ZONE_ID = P_ZONE_ID
            /*AND TO_CHAR(BNSQ.SALE_DATE, 'YYYYMMDD')<
                                                            TO_CHAR(P_DATE, 'YYYYMMDD');*/
         AND BNSQ.SALE_DATE >= DTG.GL_MONTH_START_DATE
         AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
             DTG.GL_MONTH_END_DATE
         AND TO_CHAR(BNSQ.SALE_DATE, 'YYYYMMDD') <
             TO_CHAR(P_DATE, 'YYYYMMDD');
    EXCEPTION
      WHEN OTHERS THEN
        L_LAST_DAY := NULL;
    END;
    IF L_LAST_DAY IS NOT NULL THEN
      SELECT (BNSQ.SALE_QUANTITY -
             (SELECT BNSQ_INNER.SALE_QUANTITY
                 FROM dwstg.BSM_NEW_SALE_QUANTITY BNSQ_INNER,
                      DIM_REGION_ZONE            DRZ_INNER
                WHERE DECODE(BNSQ_INNER.SOURCE_CODE,
                             'ERP',
                             BNSQ_INNER.ZONE_ID,
                             'MANUAL',
                             BNSQ_INNER.ZONE_ID,
                             SUBSTR(BNSQ_INNER.ZONE_ID,
                                    1,
                                    LENGTH(BNSQ_INNER.ZONE_ID) - 1)) =
                      DRZ_INNER.ZONE_SRC_ID
                  AND BNSQ_INNER.SOURCE_CODE = DRZ_INNER.ZONE_SRC_TYPE
                  AND TO_CHAR(BNSQ_INNER.SALE_DATE, 'YYYYMMDD') = L_LAST_DAY
                  AND BNSQ_INNER.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
                  AND DRZ_INNER.ZONE_ID = P_ZONE_ID))
        INTO L_DAY_QTY
        FROM dwstg.BSM_NEW_SALE_QUANTITY BNSQ, DIM_REGION_ZONE DRZ
       WHERE DECODE(BNSQ.SOURCE_CODE,
                    'ERP',
                    BNSQ.ZONE_ID,
                    'MANUAL',
                    BNSQ.ZONE_ID,
                    SUBSTR(BNSQ.ZONE_ID, 1, LENGTH(BNSQ.ZONE_ID) - 1)) =
             DRZ.ZONE_SRC_ID
         AND BNSQ.SOURCE_CODE = DRZ.ZONE_SRC_TYPE
         AND TO_CHAR(BNSQ.SALE_DATE, 'YYYYMMDD') =
             TO_CHAR(P_DATE, 'YYYYMMDD')
         AND BNSQ.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
         AND DRZ.ZONE_ID = P_ZONE_ID;
    ELSE
      SELECT BNSQ.SALE_QUANTITY
        INTO L_DAY_QTY
        FROM dwstg.BSM_NEW_SALE_QUANTITY BNSQ, DIM_REGION_ZONE DRZ
       WHERE DECODE(BNSQ.SOURCE_CODE,
                    'ERP',
                    BNSQ.ZONE_ID,
                    'MANUAL',
                    BNSQ.ZONE_ID,
                    SUBSTR(BNSQ.ZONE_ID, 1, LENGTH(BNSQ.ZONE_ID) - 1)) =
             DRZ.ZONE_SRC_ID
         AND BNSQ.SOURCE_CODE = DRZ.ZONE_SRC_TYPE
         AND TO_CHAR(BNSQ.SALE_DATE, 'YYYYMMDD') =
             TO_CHAR(P_DATE, 'YYYYMMDD')
         AND BNSQ.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
         AND DRZ.ZONE_ID = P_ZONE_ID;
    END IF;
    RETURN L_DAY_QTY;
  EXCEPTION
    WHEN OTHERS THEN
      L_DAY_QTY := NULL;
      RETURN L_DAY_QTY;
  END;
  --????????????
  FUNCTION GET_MONTH_BUDGET_QTY(P_ZONE_ID          IN NUMBER,
                                P_DETAIL_SERIES_ID IN NUMBER,
                                P_DATE             IN DATE) RETURN NUMBER IS
    L_MONTH_BUDGET_QTY NUMBER;
    --L_REGION_ID        NUMBER;
    L_COUNT_NUM        NUMBER;
  BEGIN
    SELECT COUNT(*)
      INTO L_COUNT_NUM
      FROM DIM_REGION_AREA DRA
     WHERE DRA.REGION_ID = P_ZONE_ID;
    IF L_COUNT_NUM <> 0 THEN
      BEGIN
        SELECT SUM(FSB.BUDGET_QTY)
          INTO L_MONTH_BUDGET_QTY
          FROM FACT_SALE_BUDGET FSB
         WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
           AND EXISTS (SELECT 1
                  FROM DIM_REGION_BRANCH DRB
                 WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
                   AND DRB.REGION_ID = P_ZONE_ID)
           AND EXISTS (SELECT 1
                  FROM DIM_TIME_GL_MONTH DTG
                 WHERE DTG.GL_MONTH_ID = FSB.MONTH_ID
                   AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                       DTG.GL_MONTH_END_DATE);
        RETURN L_MONTH_BUDGET_QTY;
      EXCEPTION
        WHEN OTHERS THEN
          L_MONTH_BUDGET_QTY := NULL;
          RETURN L_MONTH_BUDGET_QTY;
      END;
    END IF;
    SELECT COUNT(*)
      INTO L_COUNT_NUM
      FROM DIM_REGION_ZONE DRZ
     WHERE DRZ.ZONE_ID = P_ZONE_ID;
    IF L_COUNT_NUM <> 0 THEN
      BEGIN
        SELECT SUM(FSB.BUDGET_QTY)
          INTO L_MONTH_BUDGET_QTY
          FROM FACT_SALE_BUDGET FSB
         WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
           AND EXISTS (SELECT 1
                  FROM DIM_REGION_BRANCH DRB
                 WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
                   AND DRB.ZONE_ID = P_ZONE_ID)
           AND EXISTS (SELECT 1
                  FROM DIM_TIME_GL_MONTH DTG
                 WHERE DTG.GL_MONTH_ID = FSB.MONTH_ID
                   AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                       DTG.GL_MONTH_END_DATE);
        RETURN L_MONTH_BUDGET_QTY;
      EXCEPTION
        WHEN OTHERS THEN
          L_MONTH_BUDGET_QTY := NULL;
          RETURN L_MONTH_BUDGET_QTY;
      END;
    END IF;
  
    SELECT SUM(FSB.BUDGET_QTY)
      INTO L_MONTH_BUDGET_QTY
      FROM FACT_SALE_BUDGET FSB
     WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
       AND EXISTS (SELECT 1
              FROM DIM_REGION_BRANCH DRB
             WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
               AND DRB.BRANCH_ID = P_ZONE_ID)
       AND EXISTS (SELECT 1
              FROM DIM_TIME_GL_MONTH DTG
             WHERE DTG.GL_MONTH_ID = FSB.MONTH_ID
               AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                   DTG.GL_MONTH_END_DATE);
    RETURN L_MONTH_BUDGET_QTY;
  EXCEPTION
    WHEN OTHERS THEN
      L_MONTH_BUDGET_QTY := NULL;
      RETURN L_MONTH_BUDGET_QTY;
  END;

  --????????????
  FUNCTION GET_YEAR_BUDGET_QTY(P_ZONE_ID          IN NUMBER,
                               P_DETAIL_SERIES_ID IN NUMBER,
                               P_DATE             IN DATE) RETURN NUMBER IS
    L_YEAR_BUDGET_QTY NUMBER;
    L_COUNT_NUM       NUMBER;
  BEGIN
    SELECT COUNT(*)
      INTO L_COUNT_NUM
      FROM DIM_REGION_AREA DRA
     WHERE DRA.REGION_ID = P_ZONE_ID;
    IF L_COUNT_NUM <> 0 THEN
      BEGIN
        SELECT SUM(FSB.BUDGET_QTY)
          INTO L_YEAR_BUDGET_QTY
          FROM FACT_SALE_BUDGET FSB
         WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
           AND EXISTS (SELECT 1
                  FROM DIM_REGION_BRANCH DRB
                 WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
                   AND DRB.REGION_ID = P_ZONE_ID)
           AND EXISTS
         (SELECT 1
                  FROM DIM_TIME_GL_MONTH DTG
                 WHERE FSB.MONTH_ID BETWEEN DTG.YEAR_START_GL_MONTH AND
                       DTG.YEAR_END_GL_MONTH
                   AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                       DTG.GL_MONTH_END_DATE);
      
        RETURN L_YEAR_BUDGET_QTY;
      EXCEPTION
        WHEN OTHERS THEN
          L_YEAR_BUDGET_QTY := NULL;
          RETURN L_YEAR_BUDGET_QTY;
      END;
    
    END IF;
    SELECT COUNT(*)
      INTO L_COUNT_NUM
      FROM DIM_REGION_ZONE DRZ
     WHERE DRZ.ZONE_ID = P_ZONE_ID;
    IF L_COUNT_NUM <> 0 THEN
      BEGIN
        SELECT SUM(FSB.BUDGET_QTY)
          INTO L_YEAR_BUDGET_QTY
          FROM FACT_SALE_BUDGET FSB
         WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
           AND EXISTS (SELECT 1
                  FROM DIM_REGION_BRANCH DRB
                 WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
                   AND DRB.ZONE_ID = P_ZONE_ID)
           AND EXISTS
         (SELECT 1
                  FROM DIM_TIME_GL_MONTH DTG
                 WHERE FSB.MONTH_ID BETWEEN DTG.YEAR_START_GL_MONTH AND
                       DTG.YEAR_END_GL_MONTH
                   AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                       DTG.GL_MONTH_END_DATE);
      
        RETURN L_YEAR_BUDGET_QTY;
      EXCEPTION
        WHEN OTHERS THEN
          L_YEAR_BUDGET_QTY := NULL;
          RETURN L_YEAR_BUDGET_QTY;
      END;
    END IF;
    SELECT SUM(FSB.BUDGET_QTY)
      INTO L_YEAR_BUDGET_QTY
      FROM FACT_SALE_BUDGET FSB
     WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
       AND EXISTS (SELECT 1
              FROM DIM_REGION_BRANCH DRB
             WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
               AND DRB.ZONE_ID = P_ZONE_ID)
       AND EXISTS (SELECT 1
              FROM DIM_TIME_GL_MONTH DTG
             WHERE FSB.MONTH_ID BETWEEN DTG.YEAR_START_GL_MONTH AND
                   DTG.YEAR_END_GL_MONTH
               AND P_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                   DTG.GL_MONTH_END_DATE);
  
    RETURN L_YEAR_BUDGET_QTY;
  EXCEPTION
    WHEN OTHERS THEN
      L_YEAR_BUDGET_QTY := NULL;
      RETURN L_YEAR_BUDGET_QTY;
  END;

  FUNCTION GET_MONTH_BUDGET_QTY_NEW(P_BRANCH_ID        IN NUMBER,
                                    P_DETAIL_SERIES_ID IN NUMBER,
                                    P_MONTH_ID         IN NUMBER)
    RETURN NUMBER IS
    L_MONTH_BUDGET_QTY NUMBER;
    --L_DATE             DATE;
  BEGIN
    --  L_DATE := TO_DATE(P_DAY_ID, 'YYYY/MM/DD');
  
    SELECT SUM(FSB.BUDGET_QTY)
      INTO L_MONTH_BUDGET_QTY
      FROM FACT_SALE_BUDGET FSB
     WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
       AND EXISTS (SELECT 1
              FROM DIM_REGION_BRANCH DRB
             WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
               AND DRB.BRANCH_ID = P_BRANCH_ID)
       AND /*EXISTS (SELECT 1
                                                      FROM DIM_TIME_GL_MONTH DTG
                                                     WHERE DTG.GL_MONTH_ID = FSB.MONTH_ID
                                                       AND L_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                                                           DTG.GL_MONTH_END_DATE);*/
           FSB.MONTH_ID = P_MONTH_ID;
    RETURN L_MONTH_BUDGET_QTY;
  EXCEPTION
    WHEN OTHERS THEN
      L_MONTH_BUDGET_QTY := NULL;
      RETURN L_MONTH_BUDGET_QTY;
  END;
  FUNCTION GET_YEAR_BUDGET_QTY_NEW(P_BRANCH_ID        IN NUMBER,
                                   P_DETAIL_SERIES_ID IN NUMBER,
                                   P_YEAR_ID          IN NUMBER)
    RETURN NUMBER IS
    L_YEAR_BUDGET_QTY NUMBER;
    --  L_DATE            DATE;
  BEGIN
    -- L_DATE := TO_DATE(P_DAY_ID, 'YYYY/MM/DD');
    SELECT SUM(FSB.BUDGET_QTY)
      INTO L_YEAR_BUDGET_QTY
      FROM FACT_SALE_BUDGET FSB
     WHERE FSB.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
       AND EXISTS (SELECT 1
              FROM DIM_REGION_BRANCH DRB
             WHERE DRB.BRANCH_ID = FSB.BRANCH_ID
               AND DRB.BRANCH_ID = P_BRANCH_ID)
       AND /*EXISTS (SELECT 1
                                                      FROM DIM_TIME_GL_MONTH DTG
                                                     WHERE FSB.MONTH_ID BETWEEN DTG.YEAR_START_GL_MONTH AND
                                                           DTG.YEAR_END_GL_MONTH
                                                       AND L_DATE BETWEEN DTG.GL_MONTH_START_DATE AND
                                                           DTG.GL_MONTH_END_DATE)*/
           FSB.MONTH_ID BETWEEN P_YEAR_ID * 100 + 1 AND
           P_YEAR_ID * 100 + 12;
  
    RETURN L_YEAR_BUDGET_QTY;
  EXCEPTION
    WHEN OTHERS THEN
      L_YEAR_BUDGET_QTY := NULL;
      RETURN L_YEAR_BUDGET_QTY;
  END;
  /*PROCEDURE MAIN IS
  BEGIN
    NULL;
    DELETE FROM FACT_DAY_NEW_SALE FDNS
     WHERE TO_DATE(FDNS.DAY_ID, 'YYYY-MM-DD') >=
           TRUNC(SYSDATE) - G_TIMESPAN;
  
    FOR R IN (SELECT FPDM.DAY_ID,
                     DP.PRODUCT_ID,
                     DRS.BRANCH_ID,
                     SUM(FPDM.DELIVERY_UNIT_QTY) DELIVERY_UNIT_QTY
                FROM FACT_PROD_DELIVERY_MV FPDM,
                     DIM_PRODUCT           DP,
                     DIM_REGION_SECONDARY  DRS
               WHERE FPDM.PRODUCT_ID = DP.PRODUCT_ID
                 AND FPDM.SECONDARY_REGION_ID = DRS.SECONDARY_REGION_ID
                 AND DP.NEW_PROD_FLAG = 'Y'
                 AND TO_DATE(FPDM.DAY_ID, 'YYYY-MM-DD') >=
                     TRUNC(SYSDATE) - G_TIMESPAN
               GROUP BY FPDM.DAY_ID, DP.PRODUCT_ID, DRS.BRANCH_ID) LOOP
    
      INSERT INTO FACT_DAY_NEW_SALE
        (SOURCE_ID,
         DAY_ID,
         PRODUCT_ID,
         BRANCH_ID,
         DAY_SALE_BOX_QTY,
         DAY_SALE_UNIT_QTY,
         MONTH_BOX_QTY,
         MONTH_UNIT_QTY,
         MONTH_BUDGET_BOX_QTY,
         MONTH_BUDGET_UNIT_QTY,
         YEAR_BUDGET_BOX_QTY,
         YEAR_BUDGET_UNIT_QTY)
      VALUES
        (NULL,
         R.DAY_ID,
         R.PRODUCT_ID,
         R.BRANCH_ID,
         NULL,
         R.DELIVERY_UNIT_QTY,
         NULL,
         NULL,
         NULL,
         NULL, --  GET_MONTH_BUDGET_QTY_NEW(R.BRANCH_ID,R.DETAIL_SERIES_ID,R.DAY_ID),
         NULL,
         NULL); --  GET_YEAR_BUDGET_QTY_NEW(R.BRANCH_ID,R.DETAIL_SERIES_ID,R.DAY_ID));
    
    END LOOP;
  END;*/
  FUNCTION GET_TO_DAY_QTY(P_DAY_ID           IN NUMBER,
                          P_DETAIL_SERIES_ID IN NUMBER,
                          P_BRANCH_ID        IN NUMBER,
                          P_TYPE             IN VARCHAR2) RETURN NUMBER IS
    L_TODAY_QTY NUMBER;
  BEGIN
    SELECT SUM(FPD.DELIVERY_UNIT_QTY)
      INTO L_TODAY_QTY
      FROM FACT_PROD_DELIVERY_DAY_NEW_MV FPD,dim_product dp 
     WHERE fpd.product_id = dp.product_id 
       AND dp.new_prod_flag= 'Y'
       AND dp.detail_series_id = P_DETAIL_SERIES_ID
 --      AND FPD.DETAIL_SERIES_ID = P_DETAIL_SERIES_ID
       AND FPD.BRANCH_ID = P_BRANCH_ID
       AND FPD.DAY_ID BETWEEN GET_FIRST_DAY(P_DAY_ID, P_TYPE) AND P_DAY_ID;
  
    RETURN L_TODAY_QTY;
  END GET_TO_DAY_QTY;
  FUNCTION GET_FIRST_DAY(P_DAY_ID IN NUMBER, P_TYPE IN VARCHAR2)
    RETURN NUMBER IS
    L_DAY_ID NUMBER;
  BEGIN
    IF P_TYPE = 'Y' THEN
      L_DAY_ID := ROUND(P_DAY_ID / 10000) * 10000 + 101;
    ELSIF P_TYPE = 'M' THEN
      SELECT MIN(DAY_ID)
        INTO L_DAY_ID
        FROM DIM_TIME DT
       WHERE DT.GL_MONTH_ID = GET_MONTH_OF_DAY(P_DAY_ID);
    END IF;
  
    RETURN L_DAY_ID;
  END GET_FIRST_DAY;
  FUNCTION GET_MONTH_OF_DAY(P_DAY_ID IN NUMBER) RETURN NUMBER IS
    L_MONTH_ID NUMBER;
  BEGIN
    SELECT GL_MONTH_ID
      INTO L_MONTH_ID
      FROM DIM_TIME
     WHERE DAY_ID = P_DAY_ID;
  
    RETURN L_MONTH_ID;
  END GET_MONTH_OF_DAY;
END DW_NEW_SALE_ETL;
/

prompt
prompt Creating package body DW_XXZZ_MTL_ETL
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE BODY TBDW.DW_XXZZ_MTL_ETL IS
/*==================================================
  Copyright (C) TsingTao Brewery Co.,Ltd.
             AllRights Reserved
  ==================================================*/
/*==================================================
  Program Name:
      dw_xxzz_mtl_etl
  Description:
      This program provide util function for region dimension for ETL.
           
  History: 
      1.0.0  2009-11-04  Besthelp Consultant  Creation
  ==================================================*/
--
  PROCEDURE mtl_dim
  IS
   --Query Material Items Category
    Cursor cur_item
    is
    select mic.inventory_item_id
          ,msi.segment1
          ,msi.description
          ,msi.primary_uom_code
          ,mc.segment6
          ,l5.detail_category_id
          ,l5.detail_category_sid
          ,l5.detail_category_code
          ,l5.detail_category
          ,l5.detail_category_desc
          ,l5.layer4_category_id
          ,l5.layer4_category_sid
          ,l5.layer4_category_code
          ,l5.layer4_category
          ,l5.layer4_category_desc
          ,l5.layer3_category_id
          ,l5.layer3_category_sid
          ,l5.layer3_category_code
          ,l5.layer3_category
          ,l5.layer3_category_desc
          ,l5.layer2_category_id
          ,l5.layer2_category_sid
          ,l5.layer2_category_code
          ,l5.layer2_category
          ,l5.layer2_category_desc
          ,l5.layer1_category_id
          ,l5.layer1_category_sid
          ,l5.layer1_category_code
          ,l5.layer1_category
          ,l5.layer1_category_desc
          ,l5.total_id
          ,l5.toal_code
          ,l5.toal_name
    from   
           dwstg.mtl_categories_b mc
          ,dwstg.mtl_system_items_b msi
          ,dim_xxzz_material_layer5 l5
          ,dwstg.mtl_item_categories mic
          
    where  1=1
    and    msi.organization_id      = G_Item_Org
    and    msi.inventory_item_id    = mic.inventory_item_id
    and    mc.structure_id          = G_Category_Stru
    and    mc.category_id           = mic.category_id
    and    mic.category_set_id      = G_Category_Set
    and    mic.organization_id      = G_Item_Org
    and    l5.detail_category_code  = mc.segment5
    and    l5.layer4_category_code  = mc.segment4
    and    l5.layer3_category_code  = mc.segment3
    and    l5.layer2_category_code  = mc.segment2
    and    l5.layer1_category_code  = mc.segment1
    and   (
            ( greatest(mc.last_update_date,mic.last_update_date,msi.last_update_date) between trunc(sysdate)
                                                              and trunc(sysdate) +1 - 1/(24*3600)
            )
            or
            not exists (select 'x'
                        from dim_xxzz_material dm
                        where dm.item_sid = mic.inventory_item_id
            )
          )
    ;
   x_row            dim_xxzz_material%rowtype;
   x_mrow           Dim_Xxzz_Merge_Material%rowtype;
   x_item_id        Number;
  BEGIN
        -- Execute Item Category Loop
        For c_i  in cur_item    Loop
            x_item_id := null;
            x_row     := null;
            x_mrow    := null;
            update Dim_Xxzz_Merge_Material
            set
           merge_item_code      = c_i.segment1
          ,merge_item_desc      = c_i.description
          ,merge_primary_uom    = c_i.primary_uom_code
          ,merge_item_note      = c_i.segment6

          ,detail_category_id   = c_i.detail_category_id
          ,detail_category_sid  = c_i.detail_category_sid
          ,detail_category_code = c_i.detail_category_code
          ,detail_category      = c_i.detail_category
          ,detail_category_desc = c_i.detail_category_desc
          ,layer4_category_id   = c_i.layer4_category_id
          ,layer4_category_sid  = c_i.layer4_category_sid
          ,layer4_category_code = c_i.layer4_category_code
          ,layer4_category      = c_i.layer4_category
          ,layer4_category_desc = c_i.layer4_category_desc
          ,layer3_category_id   = c_i.layer3_category_id
          ,layer3_category_sid  = c_i.layer3_category_sid
          ,layer3_category_code = c_i.layer3_category_code
          ,layer3_category      = c_i.layer3_category
          ,layer3_category_desc = c_i.layer3_category_desc
          ,layer2_category_id   = c_i.layer2_category_id
          ,layer2_category_sid  = c_i.layer2_category_sid
          ,layer2_category_code = c_i.layer2_category_code
          ,layer2_category      = c_i.layer2_category
          ,layer2_category_desc = c_i.layer2_category_desc
          ,layer1_category_id   = c_i.layer1_category_id
          ,layer1_category_sid  = c_i.layer1_category_sid
          ,layer1_category_code = c_i.layer1_category_code
          ,layer1_category      = c_i.layer1_category
          ,layer1_category_desc = c_i.layer1_category_desc
          ,total_id             = c_i.total_id
          ,toal_code            = c_i.toal_code
          ,toal_name            = c_i.toal_name
            where  merge_item_sid   = c_i.inventory_item_id
            ;

            update dim_xxzz_material
            set
           item_code            = c_i.segment1
          ,item_desc            = c_i.description
          ,primary_uom          = c_i.primary_uom_code
          ,note                 = c_i.segment6

          ,merge_item_sid       = c_i.inventory_item_id
          ,merge_item_code      = c_i.segment1
          ,merge_item_desc      = c_i.description
          ,merge_primary_uom    = c_i.primary_uom_code
          ,merge_item_note      = c_i.segment6
          
          ,detail_category_id   = c_i.detail_category_id
          ,detail_category_sid  = c_i.detail_category_sid
          ,detail_category_code = c_i.detail_category_code
          ,detail_category      = c_i.detail_category
          ,detail_category_desc = c_i.detail_category_desc
          ,layer4_category_id   = c_i.layer4_category_id
          ,layer4_category_sid  = c_i.layer4_category_sid
          ,layer4_category_code = c_i.layer4_category_code
          ,layer4_category      = c_i.layer4_category
          ,layer4_category_desc = c_i.layer4_category_desc
          ,layer3_category_id   = c_i.layer3_category_id
          ,layer3_category_sid  = c_i.layer3_category_sid
          ,layer3_category_code = c_i.layer3_category_code
          ,layer3_category      = c_i.layer3_category
          ,layer3_category_desc = c_i.layer3_category_desc
          ,layer2_category_id   = c_i.layer2_category_id
          ,layer2_category_sid  = c_i.layer2_category_sid
          ,layer2_category_code = c_i.layer2_category_code
          ,layer2_category      = c_i.layer2_category
          ,layer2_category_desc = c_i.layer2_category_desc
          ,layer1_category_id   = c_i.layer1_category_id
          ,layer1_category_sid  = c_i.layer1_category_sid
          ,layer1_category_code = c_i.layer1_category_code
          ,layer1_category      = c_i.layer1_category
          ,layer1_category_desc = c_i.layer1_category_desc
          ,total_id             = c_i.total_id
          ,toal_code            = c_i.toal_code
          ,toal_name            = c_i.toal_name
            where  item_sid   = c_i.inventory_item_id
            Return item_id into x_item_id
            ;
          if x_item_id is null then
          
            select Dim_Xxzz_Material_s.nextval
            into   x_row.item_id
            from   dual
            ;
            x_row.item_sid              := c_i.inventory_item_id;
            x_row.item_code             := c_i.segment1;
            x_row.item_desc             := c_i.description;
            x_row.primary_uom           := c_i.primary_uom_code;
            x_row.note                  := c_i.segment6;
            
            x_row.merge_item_id         := x_row.item_id;
            x_row.merge_item_sid        := c_i.inventory_item_id;
            x_row.merge_item_code       := c_i.segment1;
            x_row.merge_item_desc       := c_i.description;
            x_row.merge_primary_uom     := c_i.primary_uom_code;
            x_row.merge_item_note       := c_i.segment6;
            
            x_row.detail_category_id    := c_i.detail_category_id;
            x_row.detail_category_sid   := c_i.detail_category_sid;
            x_row.detail_category_code  := c_i.detail_category_code;
            x_row.detail_category       := c_i.detail_category;
            x_row.detail_category_desc  := c_i.detail_category_desc;
            x_row.layer4_category_id    := c_i.layer4_category_id;
            x_row.layer4_category_sid   := c_i.layer4_category_sid;
            x_row.layer4_category_code  := c_i.layer4_category_code;
            x_row.layer4_category       := c_i.layer4_category;
            x_row.layer4_category_desc  := c_i.layer4_category_desc;
            x_row.layer3_category_id    := c_i.layer3_category_id;
            x_row.layer3_category_sid   := c_i.layer3_category_sid;
            x_row.layer3_category_code  := c_i.layer3_category_code;
            x_row.layer3_category       := c_i.layer3_category;
            x_row.layer3_category_desc  := c_i.layer3_category_desc;
            x_row.layer2_category_id    := c_i.layer2_category_id;
            x_row.layer2_category_sid   := c_i.layer2_category_sid;
            x_row.layer2_category_code  := c_i.layer2_category_code;
            x_row.layer2_category       := c_i.layer2_category;
            x_row.layer2_category_desc  := c_i.layer2_category_desc;
            x_row.layer1_category_id    := c_i.layer1_category_id;
            x_row.layer1_category_sid   := c_i.layer1_category_sid;
            x_row.layer1_category_code  := c_i.layer1_category_code;
            x_row.layer1_category       := c_i.layer1_category;
            x_row.layer1_category_desc  := c_i.layer1_category_desc;
            x_row.total_id              := c_i.total_id;
            x_row.toal_code             := c_i.toal_code;
            x_row.toal_name             := c_i.toal_name;
            
            x_mrow.merge_item_id         := x_row.item_id;
            x_mrow.merge_item_sid        := c_i.inventory_item_id;
            x_mrow.merge_item_code       := c_i.segment1;
            x_mrow.merge_item_desc       := c_i.description;
            x_mrow.merge_primary_uom     := c_i.primary_uom_code;
            x_mrow.merge_item_note       := c_i.segment6;

            x_mrow.detail_category_id    := c_i.detail_category_id;
            x_mrow.detail_category_sid   := c_i.detail_category_sid;
            x_mrow.detail_category_code  := c_i.detail_category_code;
            x_mrow.detail_category       := c_i.detail_category;
            x_mrow.detail_category_desc  := c_i.detail_category_desc;
            x_mrow.layer4_category_id    := c_i.layer4_category_id;
            x_mrow.layer4_category_sid   := c_i.layer4_category_sid;
            x_mrow.layer4_category_code  := c_i.layer4_category_code;
            x_mrow.layer4_category       := c_i.layer4_category;
            x_mrow.layer4_category_desc  := c_i.layer4_category_desc;
            x_mrow.layer3_category_id    := c_i.layer3_category_id;
            x_mrow.layer3_category_sid   := c_i.layer3_category_sid;
            x_mrow.layer3_category_code  := c_i.layer3_category_code;
            x_mrow.layer3_category       := c_i.layer3_category;
            x_mrow.layer3_category_desc  := c_i.layer3_category_desc;
            x_mrow.layer2_category_id    := c_i.layer2_category_id;
            x_mrow.layer2_category_sid   := c_i.layer2_category_sid;
            x_mrow.layer2_category_code  := c_i.layer2_category_code;
            x_mrow.layer2_category       := c_i.layer2_category;
            x_mrow.layer2_category_desc  := c_i.layer2_category_desc;
            x_mrow.layer1_category_id    := c_i.layer1_category_id;
            x_mrow.layer1_category_sid   := c_i.layer1_category_sid;
            x_mrow.layer1_category_code  := c_i.layer1_category_code;
            x_mrow.layer1_category       := c_i.layer1_category;
            x_mrow.layer1_category_desc  := c_i.layer1_category_desc;
            x_mrow.total_id              := c_i.total_id;
            x_mrow.toal_code             := c_i.toal_code;
            x_mrow.toal_name             := c_i.toal_name;

            insert into Dim_Xxzz_Material
            values  x_row
            ;
            
            insert into Dim_Xxzz_Merge_Material
            values  x_mrow
            ;
          end if;
        End Loop;
  Exception when others then
     raise;
  END;
--
  --供应商维度处理
  Procedure vendor_dim
  is
  --供应商信息
   cursor cur_vendor
   is
   select p.vendor_id
         ,p.segment1 vendor_code
         ,p.vendor_name
         ,p.vendor_name_alt
         ,dv.vendor_class_id
         ,dv.vendor_class_sid
         ,dv.vendor_class_code
         ,dv.vendor_class_name
         ,dv.vendor_class_desc
         ,dv.total_id
         ,dv.total_name
   from  dwstg.po_vendors p
        ,dim_xxzz_vendor_class dv
   where p.vendor_type_lookup_code = dv.vendor_class_code
   and (
            ( greatest(p.last_update_date) between trunc(sysdate)
                                                              and trunc(sysdate) +1 - 1/(24*3600)
            )
            or
            not exists (select 'x'
                        from dim_xxzz_vendor dm
                        where dm.vendor_sid     = p.vendor_id
            )
          )
   ;
   x_row        dim_xxzz_vendor%rowtype;
   x_mrow       dim_xxzz_merge_vendor%rowtype;
   x_vendor_id  number := null;
  begin
    -- Execute Vendor Loop
     For c_v in cur_vendor  Loop
     
            x_vendor_id := null;
            x_row       := null;
            x_mrow      := null;
            update  dim_xxzz_merge_vendor
            set
                vendor_class_id         = c_v.vendor_class_id
               ,vendor_class_sid        = c_v.vendor_class_sid
               ,vendor_class_code       = c_v.vendor_class_code
               ,vendor_class_name       = c_v.vendor_class_name
               ,vendor_class_desc       = c_v.vendor_class_desc
               ,total_id                = c_v.total_id
               ,total_name              = c_v.total_name
               ,merge_vendor_sid        = c_v.vendor_id
               ,merge_vendor_code       = c_v.vendor_code
               ,merge_vendor_name_alt   = c_v.vendor_name_alt
               ,merge_vendor_name       = c_v.vendor_name
            where  merge_vendor_sid     = c_v.vendor_id
            ;
            
            update dim_xxzz_vendor
            set
                  vendor_class_id        = c_v.vendor_class_id
                 ,vendor_class_sid       = c_v.vendor_class_sid
                 ,vendor_class_code      = c_v.vendor_class_code
                 ,vendor_class_name      = c_v.vendor_class_name
                 ,vendor_class_desc      = c_v.vendor_class_desc
                 ,total_id               = c_v.total_id
                 ,total_name             = c_v.total_name
                 ,merge_vendor_code      = c_v.vendor_code
                 ,merge_vendor_name_alt  = c_v.vendor_name_alt
                 ,merge_vendor_name      = c_v.vendor_name
                 ,vendor_code            = c_v.vendor_code
                 ,vendor_name_alt        = c_v.vendor_name_alt
                 ,vendor_name            = c_v.vendor_name
                 
            where vendor_sid             = c_v.vendor_id
            return vendor_id   into x_vendor_id
            ;

            if x_vendor_id is null then

                select dim_xxzz_vendor_s.nextval
                into  x_row.vendor_id
                from  dual
                ;
        			x_row.vendor_class_id          := c_v.vendor_class_id  ;
        			x_row.vendor_class_sid         := c_v.vendor_class_sid  ;
        			x_row.vendor_class_code        := c_v.vendor_class_code  ;
        			x_row.vendor_class_name        := c_v.vendor_class_name  ;
        			x_row.vendor_class_desc        := c_v.vendor_class_desc ;
        			x_row.total_id                 := c_v.total_id         ;
        			x_row.total_name               := c_v.total_name       ;
        			x_row.merge_vendor_id          := x_row.vendor_id  ;
        			x_row.merge_vendor_sid         := c_v.vendor_id  ;
        			x_row.merge_vendor_code        := c_v.vendor_code ;
        			x_row.merge_vendor_name_alt    := c_v.vendor_name_alt ;
        			x_row.merge_vendor_name        := c_v.vendor_name  ;
        			x_row.vendor_sid               := c_v.vendor_id  ;
        			x_row.vendor_code              := c_v.vendor_code   ;
        			x_row.vendor_name_alt          := c_v.vendor_name_alt ;
        			x_row.vendor_name              := c_v.vendor_name   ;
        			
        			
        			x_mrow.vendor_class_id          := c_v.vendor_class_id  ;
        			x_mrow.vendor_class_sid         := c_v.vendor_class_sid  ;
        			x_mrow.vendor_class_code        := c_v.vendor_class_code  ;
        			x_mrow.vendor_class_name        := c_v.vendor_class_name  ;
        			x_mrow.vendor_class_desc        := c_v.vendor_class_desc ;
        			x_mrow.total_id                 := c_v.total_id         ;
        			x_mrow.total_name               := c_v.total_name       ;
        			x_mrow.merge_vendor_id          := x_row.vendor_id  ;
        			x_mrow.merge_vendor_sid         := c_v.vendor_id  ;
        			x_mrow.merge_vendor_code        := c_v.vendor_code ;
        			x_mrow.merge_vendor_name_alt    := c_v.vendor_name_alt ;
        			x_mrow.merge_vendor_name        := c_v.vendor_name  ;
        			
        			insert into dim_xxzz_vendor
        			values  x_row
        			;
        			
        			insert into dim_xxzz_merge_vendor
        			values x_mrow
        			;
                
            end if;
     End Loop;
  null;
  end;
  --计算库存天数
  Function Jdays(i_qty      in Number
                ,i_org      in Number
                ,i_cate     in Varchar2
                ,i_month    in number
                )
  RETURN number
  is
  /*
  期末数量/（预算每天的消耗量）。如果库存量超过三十天，则需要用新的一个月份的预算量来计算，产品所消耗的麦芽计算按一定比例转换
  */
   x_days  Number;
   x_init_month Number;
   x_Init_year  Number;
   --汇总信息
    cursor cur_month
    is
    select month_id
      ,sum(xcp.quantity*xcp.barly_convert_rate) amount
      ,dtm.gl_month_end_date - dtm.gl_month_start_date + 1 days
from  dwstg.Xxzz_Con_Product_Budget xcp
     ,dwstg.hr_organization_information ood
     ,dim_time_gl_month dtm
where 1=1
and   dtm.gl_month_id     = xcp.month_id
and   ood.organization_id = xcp.organization_id
and   ood.org_information_context     = 'Accounting Information'
and   xcp.month_id >= x_init_month
--and   to_Number(substr(xcp.month_id,1,4)) = x_init_year
and   To_Number(ood.org_information3)     = i_org
group by month_id
      ,dtm.gl_month_end_date - dtm.gl_month_start_date + 1
order by xcp.month_id
;
  x_remain_qty  number;
  begin
        select dtm2.gl_month_id,dtm2.year_id
        into   x_init_month,x_init_year
        from  dim_time_gl_month dtm1
             ,dim_time_gl_month dtm2
        where dtm1.gl_month_id          = i_month
        and   dtm2.gl_month_start_id    = to_number(to_char(dtm1.gl_month_end_date + 1,'yyyymmdd'))
        ;

     x_remain_qty := i_qty;
     x_days       := 0;
     for cm in cur_month loop
            if x_remain_qty > cm.amount then
                x_remain_qty := x_remain_qty - cm.amount;
                x_days       := x_days + cm.days;
            else
                x_days       := Trunc(x_remain_qty/(cm.amount/cm.days)) + x_days;
                x_remain_qty := 0;
            end if;
      exit when x_remain_qty = 0;
     end loop;
     
    return x_days;
  exception when others then
    return -1;
  end;

  --是否含制麦车间
  Function JFlag(i_org_id   in number,
                 p_year_id  in number default null
                )
  Return Varchar2
  is
  x_flag varchar2(1) := 'N';
  begin

        begin
        select 'Y'
        into x_flag
        from  dual
        where exists (select 'x'
                       from  dwstg.xxzz_con_wheat_quanlity a
                            ,dwstg.hr_organization_information ood
                       where ood.organization_id                  = a.organization_id
                        and   ood.org_information_context         = 'Accounting Information'
                        and   To_Number(ood.org_information3)     = i_org_id 
                        and   a.year_id=nvl(p_year_id,a.year_id)
                        )
        ;
        exception when others then
            x_flag  := 'N';
        end;
        
    return x_flag;
  exception when others then
    return 'O';
  end;
  --读取用户id
  Function get_UserId(x_user in varchar2
                )
  Return Number
  is
    x_user_id  Number;
  begin
        begin
            select user_id
            into  x_user_id
            from  
                  dwstg.fnd_user
                 ,dwstg.per_all_people_f
            where 1=1
            and   employee_id   = person_id
            and   employee_number= x_user
            and   sysdate between effective_start_date and effective_end_date
            ;
        exception when others then
            x_user_id := 5537;
        end;
        
   return Nvl(x_user_id,5537);
  exception when others then
      return 5537;
  end;


  --安全库存天数统计
  Function JsafeNum(p_org_id    in number
                   ,p_category  in varchar2
                   ,p_month_id  in number
                   ,p_flag      in varchar2
                   ,p_type      in varchar2
                   ,p_days      in number
                   )
  Return Number
  is
   x_year           number; --年度
   x_flag           number;
   x_min_days       number; --最小安全库存天数
   x_max_days       number; --最大安全库存天数
  begin
   if p_days is null then
     return null;
   end if;
   
      if p_flag = 'Y' then
         x_min_days := 60;
         x_max_days := 120;
      else
         x_min_days := 0;
         x_max_days := 45;
      end if;
    if p_type = 'BIG' then
             if p_days between x_min_days -30
                        and    x_max_days + 30
                        then
                 x_flag  := 0;
             else
                 x_flag  := 1;
             end if;
    elsif p_type = 'RANGE' then
    
             if p_days between x_min_days
                        and    x_max_days
                        then
                 x_flag  := 1;
             else
                 x_flag  := 0;
             end if;

    elsif p_type = 'SMALL' then

             if (p_days between x_min_days -30
                        and    x_min_days
                )
                or
                (
                p_days between x_max_days
                        and    x_max_days + 30
                )
                        then
                 x_flag  := 1;
             else
                 x_flag  := 0;
             end if;
             
    end if;
    return x_flag;
  exception when others then
  return 0;
  end;

  --读取PYE
  Function Get_PYE(p_org_id         in number
                  ,p_flex_value_id  in number
                  ,p_month_id       in number
                  ,p_ytd            in number
                  )
  Return Number
  is
  x_attribute13     varchar2(30);
  x_remain_budget   number;
  x_act_purchase    number;
  x_pye             Number;
  x_purchase_price  Number;
  x_purchase_qty    number;
  x_purchase_amt    number;
  /*取数原则
     1 根据物料中类的值集(XXZZ_ITEM_CATEGORY_TWO)的描述性弹性域attribute13判断
          1  计算公式为  YTD* （剩余预算量/实际发生量）
          2 （类别上月的采购加权价 - 年初预算价格）*预算剩余数量
  */
  begin
        --读取描述性弹性域 attribute13
        begin
            select nvl(attribute13,'1')
            into   x_attribute13
            from   dwstg.fnd_flex_values
            where  flex_value_id    = p_flex_value_id
            ;
        exception
            when others then
                 x_attribute13  := '1';
        end;
        --预算剩余数量 和实际采购量
           select sum(decode(sign(month_id-p_month_id),1,nvl(budget_quantity,0)
                                                   ,0)
                   ) remain_budget
                  ,sum(decode(sign(month_id-p_month_id),1,0
                                                       ,nvl(purchase_quantity,0)
                                                       )
                    ) actual_purchase
            into  x_remain_budget
                 ,x_act_purchase
            from fact_xxzz_budget_line l
            where 1 =1
            and   month_id              is not null
            and   l.category_layer2_id  = p_flex_value_id
            and   organization_id = p_org_id
            and   year_id         = To_Number(substr(p_month_id,1,4))
            ;
        --当月采购价格
            begin
            select decode(sum(nvl(l.purchase_price,0)*nvl(l.purchase_quantity,0)),0,0
                                                                                 ,sum(nvl(l.purchase_price,0)*nvl(l.purchase_quantity,0))/sum(nvl(l.purchase_quantity,0))
                                                                                 )
            into   x_purchase_price
            from  fact_xxzz_budget_line l
            where  1 = 1
            and    l.category_layer2_id = p_flex_value_id
            and    month_id        = p_month_id
            and    organization_id  = p_org_id
            ;
            exception when others then
                  x_purchase_price := 0;
            end;

        if x_attribute13    = '1' then
             if x_act_purchase = 0 then
                x_pye   := 0;
             else
                x_pye   := p_ytd * x_remain_budget /x_act_purchase;
             end if;
        else
                begin
                    select sum(nvl(l.budget_quantity,0)
                                * (x_purchase_price - l.budget_price))
                    into   x_pye
                    from fact_xxzz_budget_line l
                    where 1 =1
                    and   month_id              >= to_number(to_char(last_day(to_date(p_month_id,'yyyymm')) +1,'yyyymm'))
                    and   l.category_layer2_id  = p_flex_value_id
                    and   organization_id       = p_org_id
                    and   year_id               = To_Number(substr(p_month_id,1,4))
                    ;
                 exception
                    when others then
                        x_pye   := 0;
                end;

        end if;
    Return x_pye;
  end;
  
  --Refresh Category
  Procedure Refresh_Category
  is
    cursor  cur_budget
    is
    select  l.line_id
    from  fact_xxzz_budget_line l
    where l.category_layer1_id is null
    ; 
    cursor cur_target
    is
    select t.line_id
    from fact_xxzz_category_target t
    where t.category_layer1_id is null
    ;
    l_category_id number;
    l_cate_sid5   number;
    l_cate_sid4   number;
    l_cate_sid3   number;
    l_cate_sid2   number;
    l_cate_sid1   number;
  begin
    for c in cur_budget loop
        begin
            select category_id
            into l_category_id
            from dwstg.xxzz_con_budget_line xl
            where xl.line_id    = c.line_id
            ;
        exception when others then
          null;
        end;
        
        select dl5.detail_category_sid
              ,dl5.layer4_category_sid
              ,dl5.layer3_category_sid
              ,dl5.layer2_category_sid
              ,dl5.layer1_category_sid
        into  l_cate_sid5
              ,l_cate_sid4
              ,l_cate_sid3
              ,l_cate_sid2
              ,l_cate_sid1
        from  dim_xxzz_material_layer5 dl5
             ,dwstg.mtl_categories_b mc
        where dl5.detail_category_code = mc.segment5
        and   dl5.layer4_category_code = mc.segment4
        and   dl5.layer3_category_code = mc.segment3
        and   dl5.layer2_category_code = mc.segment2
        and   dl5.layer1_category_code  = mc.segment1
        and   mc.category_id   = l_category_id
        
        ; 
        update fact_xxzz_budget_line fl
        set fl.CATEGORY_LAYER5_ID = l_cate_sid5
           ,fl.CATEGORY_LAYER4_ID =l_cate_sid4
           ,CATEGORY_LAYER3_ID =l_cate_sid3
           ,CATEGORY_LAYER2_ID=l_cate_sid2
           ,CATEGORY_LAYER1_ID=l_cate_sid1 
        where line_id  = c.line_id;
        commit;
    end loop;
    
    for c in cur_target loop
    
        begin
            select category_id
            into l_category_id
            from dwstg.xxzz_con_category_target xt
            where xt.line_id  = c.line_id
            ;
        exception when others then
          null;
        end;
        
        select dl5.detail_category_sid
              ,dl5.layer4_category_sid
              ,dl5.layer3_category_sid
              ,dl5.layer2_category_sid
              ,dl5.layer1_category_sid
        into  l_cate_sid5
              ,l_cate_sid4
              ,l_cate_sid3
              ,l_cate_sid2
              ,l_cate_sid1
        from  dim_xxzz_material_layer5 dl5
             ,dwstg.mtl_categories_b mc
        where dl5.detail_category_code = mc.segment5
        and   dl5.layer4_category_code = mc.segment4
        and   dl5.layer3_category_code = mc.segment3
        and   dl5.layer2_category_code = mc.segment2
        and   dl5.layer1_category_code  = mc.segment1
        and   mc.category_id   = l_category_id
        
        ;
        update fact_xxzz_category_target fl
        set CATEGORY_LAYER5_ID = l_cate_sid5
           ,CATEGORY_LAYER4_ID =l_cate_sid4
           ,CATEGORY_LAYER3_ID =l_cate_sid3
           ,CATEGORY_LAYER2_ID=l_cate_sid2
           ,CATEGORY_LAYER1_ID=l_cate_sid1
        where line_id  = c.line_id;
        commit; 
    end loop;  
  end;
END;
/


spool off
